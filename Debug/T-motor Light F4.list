
T-motor Light F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080095a0  080095a0  000195a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c20  08009c20  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c20  08009c20  00019c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c28  08009c28  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08009c30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000230  08009e5c  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08009e5c  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba6c  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c28  00000000  00000000  0002bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a528  00000000  00000000  0002ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3c3  00000000  00000000  0004a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c56  00000000  00000000  00058853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed4a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041fc  00000000  00000000  000ed4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009584 	.word	0x08009584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	08009584 	.word	0x08009584

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d101      	bne.n	8000ffa <LL_SPI_IsActiveFlag_TXE+0x18>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	330c      	adds	r3, #12
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	330c      	adds	r3, #12
 8001034:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	4013      	ands	r3, r2
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	619a      	str	r2, [r3, #24]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	041a      	lsls	r2, r3, #16
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SPI1_SendByte>:
	CHIP_DESELECT(ICM20602);
}


unsigned char SPI1_SendByte(unsigned char data)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80010b6:	bf00      	nop
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <SPI1_SendByte+0x40>)
 80010ba:	f7ff ff92 	bl	8000fe2 <LL_SPI_IsActiveFlag_TXE>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f9      	beq.n	80010b8 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <SPI1_SendByte+0x40>)
 80010ca:	f7ff ffab 	bl	8001024 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80010ce:	bf00      	nop
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <SPI1_SendByte+0x40>)
 80010d2:	f7ff ff73 	bl	8000fbc <LL_SPI_IsActiveFlag_RXNE>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f9      	beq.n	80010d0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <SPI1_SendByte+0x40>)
 80010de:	f7ff ff93 	bl	8001008 <LL_SPI_ReceiveData8>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013000 	.word	0x40013000

080010f0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80010fa:	2110      	movs	r1, #16
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <ICM20602_Readbyte+0x3c>)
 80010fe:	f7ff ffc6 	bl	800108e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffce 	bl	80010ac <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ffcb 	bl	80010ac <SPI1_SendByte>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800111a:	2110      	movs	r1, #16
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <ICM20602_Readbyte+0x3c>)
 800111e:	f7ff ffa8 	bl	8001072 <LL_GPIO_SetOutputPin>
	
	return val;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020000 	.word	0x40020000

08001130 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	603a      	str	r2, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	460b      	mov	r3, r1
 800113e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001144:	2110      	movs	r1, #16
 8001146:	4810      	ldr	r0, [pc, #64]	; (8001188 <ICM20602_Readbytes+0x58>)
 8001148:	f7ff ffa1 	bl	800108e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffa9 	bl	80010ac <SPI1_SendByte>
	while(i < len)
 800115a:	e009      	b.n	8001170 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60fa      	str	r2, [r7, #12]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	18d4      	adds	r4, r2, r3
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff ffa0 	bl	80010ac <SPI1_SendByte>
 800116c:	4603      	mov	r3, r0
 800116e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3f1      	bcc.n	800115c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001178:	2110      	movs	r1, #16
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <ICM20602_Readbytes+0x58>)
 800117c:	f7ff ff79 	bl	8001072 <LL_GPIO_SetOutputPin>
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	40020000 	.word	0x40020000

0800118c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800119c:	2110      	movs	r1, #16
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <ICM20602_Writebyte+0x40>)
 80011a0:	f7ff ff75 	bl	800108e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff7d 	bl	80010ac <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff79 	bl	80010ac <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80011ba:	2110      	movs	r1, #16
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <ICM20602_Writebyte+0x40>)
 80011be:	f7ff ff58 	bl	8001072 <LL_GPIO_SetOutputPin>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020000 	.word	0x40020000

080011d0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	CHIP_DESELECT(ICM20602);
 80011d6:	2110      	movs	r1, #16
 80011d8:	4837      	ldr	r0, [pc, #220]	; (80012b8 <ICM20602_Initialization+0xe8>)
 80011da:	f7ff ff4a 	bl	8001072 <LL_GPIO_SetOutputPin>
	uint8_t who_am_i = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
	//ICM20602_GPIO_SPI_Initialization(); Pin initialization in gpio.c and spi.c
	
	printf("Checking ICM20602...\n\r");
 80011e2:	4836      	ldr	r0, [pc, #216]	; (80012bc <ICM20602_Initialization+0xec>)
 80011e4:	f004 fd9a 	bl	8005d1c <iprintf>
	LL_SPI_Enable(SPI1);
 80011e8:	4835      	ldr	r0, [pc, #212]	; (80012c0 <ICM20602_Initialization+0xf0>)
 80011ea:	f7ff fed7 	bl	8000f9c <LL_SPI_Enable>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80011ee:	2075      	movs	r0, #117	; 0x75
 80011f0:	f7ff ff7e 	bl	80010f0 <ICM20602_Readbyte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xAF // MPU60000 : 0x68
	if(who_am_i == 0x68)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b68      	cmp	r3, #104	; 0x68
 80011fc:	d105      	bne.n	800120a <ICM20602_Initialization+0x3a>
	{
		printf("ICM20602 who_am_i = 0x%02x...OK\n\r", who_am_i);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4619      	mov	r1, r3
 8001202:	4830      	ldr	r0, [pc, #192]	; (80012c4 <ICM20602_Initialization+0xf4>)
 8001204:	f004 fd8a 	bl	8005d1c <iprintf>
 8001208:	e012      	b.n	8001230 <ICM20602_Initialization+0x60>
	}
	// recheck
	else if(who_am_i != 0x68)
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b68      	cmp	r3, #104	; 0x68
 800120e:	d00f      	beq.n	8001230 <ICM20602_Initialization+0x60>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001210:	2075      	movs	r0, #117	; 0x75
 8001212:	f7ff ff6d 	bl	80010f0 <ICM20602_Readbyte>
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x68){
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b68      	cmp	r3, #104	; 0x68
 800121e:	d007      	beq.n	8001230 <ICM20602_Initialization+0x60>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x68);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2268      	movs	r2, #104	; 0x68
 8001224:	4619      	mov	r1, r3
 8001226:	4828      	ldr	r0, [pc, #160]	; (80012c8 <ICM20602_Initialization+0xf8>)
 8001228:	f004 fd78 	bl	8005d1c <iprintf>
			return 1; //ERROR
 800122c:	2301      	movs	r3, #1
 800122e:	e03f      	b.n	80012b0 <ICM20602_Initialization+0xe0>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	206b      	movs	r0, #107	; 0x6b
 8001234:	f7ff ffaa 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001238:	2032      	movs	r0, #50	; 0x32
 800123a:	f002 fd3f 	bl	8003cbc <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800123e:	2101      	movs	r1, #1
 8001240:	206b      	movs	r0, #107	; 0x6b
 8001242:	f7ff ffa3 	bl	800118c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001246:	2032      	movs	r0, #50	; 0x32
 8001248:	f002 fd38 	bl	8003cbc <HAL_Delay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 800124c:	2100      	movs	r1, #0
 800124e:	206c      	movs	r0, #108	; 0x6c
 8001250:	f7ff ff9c 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	f002 fd31 	bl	8003cbc <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800125a:	2100      	movs	r1, #0
 800125c:	2019      	movs	r0, #25
 800125e:	f7ff ff95 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001262:	2032      	movs	r0, #50	; 0x32
 8001264:	f002 fd2a 	bl	8003cbc <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001268:	2105      	movs	r1, #5
 800126a:	201a      	movs	r0, #26
 800126c:	f7ff ff8e 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001270:	2032      	movs	r0, #50	; 0x32
 8001272:	f002 fd23 	bl	8003cbc <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001276:	2118      	movs	r1, #24
 8001278:	201b      	movs	r0, #27
 800127a:	f7ff ff87 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 800127e:	2032      	movs	r0, #50	; 0x32
 8001280:	f002 fd1c 	bl	8003cbc <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001284:	2118      	movs	r1, #24
 8001286:	201c      	movs	r0, #28
 8001288:	f7ff ff80 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f002 fd15 	bl	8003cbc <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D //No ACCEL_CONFIG2 in MPU6000
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001292:	2103      	movs	r1, #3
 8001294:	201d      	movs	r0, #29
 8001296:	f7ff ff79 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 800129a:	2032      	movs	r0, #50	; 0x32
 800129c:	f002 fd0e 	bl	8003cbc <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80012a0:	2101      	movs	r1, #1
 80012a2:	2038      	movs	r0, #56	; 0x38
 80012a4:	f7ff ff72 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f002 fd07 	bl	8003cbc <HAL_Delay>

	// Remove Gyro Z offset
	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte
*/
	return 0; //OK
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020000 	.word	0x40020000
 80012bc:	080095a0 	.word	0x080095a0
 80012c0:	40013000 	.word	0x40013000
 80012c4:	080095b8 	.word	0x080095b8
 80012c8:	080095dc 	.word	0x080095dc

080012cc <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	unsigned char data[14];

	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	461a      	mov	r2, r3
 80012dc:	210e      	movs	r1, #14
 80012de:	203b      	movs	r0, #59	; 0x3b
 80012e0:	f7ff ff26 	bl	8001130 <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 80012e4:	7a3b      	ldrb	r3, [r7, #8]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7a7b      	ldrb	r3, [r7, #9]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b219      	sxth	r1, r3
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	b21a      	sxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3302      	adds	r3, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	b212      	sxth	r2, r2
 8001308:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b219      	sxth	r1, r3
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	b21a      	sxth	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3304      	adds	r3, #4
 8001318:	430a      	orrs	r2, r1
 800131a:	b212      	sxth	r2, r2
 800131c:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8)  | data[9]);
 800131e:	7c3b      	ldrb	r3, [r7, #16]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7c7b      	ldrb	r3, [r7, #17]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21a      	sxth	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 8001330:	7cbb      	ldrb	r3, [r7, #18]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b219      	sxth	r1, r3
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	b21a      	sxth	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3302      	adds	r3, #2
 800133e:	430a      	orrs	r2, r1
 8001340:	b212      	sxth	r2, r2
 8001342:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 8001344:	7d3b      	ldrb	r3, [r7, #20]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b219      	sxth	r1, r3
 800134a:	7d7b      	ldrb	r3, [r7, #21]
 800134c:	b21a      	sxth	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3304      	adds	r3, #4
 8001352:	430a      	orrs	r2, r1
 8001354:	b212      	sxth	r2, r2
 8001356:	801a      	strh	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001364:	2102      	movs	r1, #2
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <ICM20602_DataReady+0x14>)
 8001368:	f7ff fe6e 	bl	8001048 <LL_GPIO_IsInputPinSet>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020000 	.word	0x40020000

08001378 <GPIO_init>:
{
	GPIOA -> ODR ^= 1 << LED_PIN;
}


void GPIO_init(GPIO_TypeDef *Port, uint32_t pin, uint32_t mode){     
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	// mode  : Input(0), Output(1), AlterFunc(2), Analog(3)   
	if (Port == GPIOA)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <GPIO_init+0x44>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <GPIO_init+0x18>
		RCC_GPIOA_enable();
 800138c:	f000 fb60 	bl	8001a50 <RCC_GPIOA_enable>

	if (Port == GPIOB)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <GPIO_init+0x48>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <GPIO_init+0x24>
		RCC_GPIOB_enable();
 8001398:	f000 fb6a 	bl	8001a70 <RCC_GPIOB_enable>

	if (Port == GPIOC)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <GPIO_init+0x4c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d101      	bne.n	80013a8 <GPIO_init+0x30>
		RCC_GPIOC_enable();
 80013a4:	f000 fb74 	bl	8001a90 <RCC_GPIOC_enable>



	GPIO_mode(Port, pin, mode);
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 f80b 	bl	80013c8 <GPIO_mode>
	
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800

080013c8 <GPIO_mode>:


// GPIO Mode          : Input(00), Output(01), AlterFunc(10), Analog(11)
void GPIO_mode(GPIO_TypeDef *Port, uint32_t pin, uint32_t mode){
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	
   Port->MODER &= ~(3UL<<(2*pin));     
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2103      	movs	r1, #3
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	401a      	ands	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]
   Port->MODER |= mode<<(2*pin);    
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <GPIO_ospeed>:


// GPIO Speed          : Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
void GPIO_ospeed(GPIO_TypeDef *Port, uint32_t pin, uint32_t speed){
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]

	Port->OSPEEDR &= ~(3UL << (2 * pin)); //reset
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2103      	movs	r1, #3
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
	Port->OSPEEDR |= speed << (2 * pin);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	431a      	orrs	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <PWM_init>:

#include "ecPWM.h"

/* PWM Configuration */

void PWM_init(PWM_t *pwm, GPIO_TypeDef *port, int pin){
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
// 0. Match Output Port and Pin for TIMx 	
		pwm->port = port;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	601a      	str	r2, [r3, #0]
		pwm->pin  = pin;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	605a      	str	r2, [r3, #4]
		PWM_pinmap(pwm);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f9e1 	bl	800182c <PWM_pinmap>
		TIM_TypeDef *TIMx = pwm->timer; //?
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61fb      	str	r3, [r7, #28]
		int CHn = pwm->ch;	
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]

// 1. Initialize GPIO port and pin as AF
		GPIO_init(port, pin, AF);  // AF=2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2202      	movs	r2, #2
 800147a:	4619      	mov	r1, r3
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f7ff ff7b 	bl	8001378 <GPIO_init>
		GPIO_ospeed(port, pin, 3);  // speed VHIGH=3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	4619      	mov	r1, r3
 8001488:	68b8      	ldr	r0, [r7, #8]
 800148a:	f7ff ffbe 	bl	800140a <GPIO_ospeed>
	
// 2. Configure GPIO AFR by Pin num.				
	//  AFR[0] for pin: 0~7,     AFR[1] for pin 8~15
	//  AFR=1 for TIM1,TIM2	AFR=2 for TIM3 etc
	
	port->AFR[pin>>3] &= ~(0xF<<(4*(pin%8)));  // [pin>>3]: see only pin's first digit pin%8: select pin's location
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3208      	adds	r2, #8
 8001496:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	425a      	negs	r2, r3
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	f002 0207 	and.w	r2, r2, #7
 80014a6:	bf58      	it	pl
 80014a8:	4253      	negpl	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	10da      	asrs	r2, r3, #3
 80014ba:	4001      	ands	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3208      	adds	r2, #8
 80014c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	
	if     (TIMx==TIM1 || TIMx==TIM2)                    port->AFR[pin>>3] |= 1U << 4*(pin%8); 			
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4a93      	ldr	r2, [pc, #588]	; (8001714 <PWM_init+0x2c8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d003      	beq.n	80014d4 <PWM_init+0x88>
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d2:	d119      	bne.n	8001508 <PWM_init+0xbc>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	10da      	asrs	r2, r3, #3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3208      	adds	r2, #8
 80014dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	425a      	negs	r2, r3
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	f002 0207 	and.w	r2, r2, #7
 80014ec:	bf58      	it	pl
 80014ee:	4253      	negpl	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	2201      	movs	r2, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	10d2      	asrs	r2, r2, #3
 80014fc:	4319      	orrs	r1, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3208      	adds	r2, #8
 8001502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001506:	e04a      	b.n	800159e <PWM_init+0x152>
	else if(TIMx==TIM3 || TIMx==TIM4  || TIMx==TIM5)     port->AFR[pin>>3] |= 2U << 4*(pin%8);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4a83      	ldr	r2, [pc, #524]	; (8001718 <PWM_init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <PWM_init+0xd4>
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4a82      	ldr	r2, [pc, #520]	; (800171c <PWM_init+0x2d0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d003      	beq.n	8001520 <PWM_init+0xd4>
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4a81      	ldr	r2, [pc, #516]	; (8001720 <PWM_init+0x2d4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d119      	bne.n	8001554 <PWM_init+0x108>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	425a      	negs	r2, r3
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	f002 0207 	and.w	r2, r2, #7
 8001538:	bf58      	it	pl
 800153a:	4253      	negpl	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	2202      	movs	r2, #2
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	10d2      	asrs	r2, r2, #3
 8001548:	4319      	orrs	r1, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3208      	adds	r2, #8
 800154e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001552:	e024      	b.n	800159e <PWM_init+0x152>
  else if(TIMx==TIM9 || TIMx==TIM10 || TIMx==TIM11)    port->AFR[pin>>3] |= 3U << 4*(pin%8);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4a73      	ldr	r2, [pc, #460]	; (8001724 <PWM_init+0x2d8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d007      	beq.n	800156c <PWM_init+0x120>
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4a72      	ldr	r2, [pc, #456]	; (8001728 <PWM_init+0x2dc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d003      	beq.n	800156c <PWM_init+0x120>
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4a71      	ldr	r2, [pc, #452]	; (800172c <PWM_init+0x2e0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d118      	bne.n	800159e <PWM_init+0x152>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	10da      	asrs	r2, r3, #3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3208      	adds	r2, #8
 8001574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	425a      	negs	r2, r3
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	f002 0207 	and.w	r2, r2, #7
 8001584:	bf58      	it	pl
 8001586:	4253      	negpl	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	10d2      	asrs	r2, r2, #3
 8001594:	4319      	orrs	r1, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3208      	adds	r2, #8
 800159a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

// 3. Initialize Timer 
		TIM_init(TIMx, 1);	// with default msec=1 value.		
 800159e:	2101      	movs	r1, #1
 80015a0:	69f8      	ldr	r0, [r7, #28]
 80015a2:	f000 facd 	bl	8001b40 <TIM_init>
		TIMx->CR1 &= ~TIM_CR1_CEN;	// disable counter
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0201 	bic.w	r2, r3, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	601a      	str	r2, [r3, #0]
// 3-2. Direction of Counter
		
		TIMx->CR1 &= ~TIM_CR1_DIR;    // Counting direction: 0 = up-counting, 1 = down-counting
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0210 	bic.w	r2, r3, #16
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	601a      	str	r2, [r3, #0]
	
			
// 4. Configure Timer Output mode as PWM
	uint32_t ccVal=TIMx->ARR/2;  // default value  CC=ARR/2
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
	if(CHn == 1){
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d121      	bne.n	8001610 <PWM_init+0x1c4>
		TIMx->CCMR1 &= ~TIM_CCMR1_OC1M;                     // Clear ouput compare mode bits for channel 1
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |=  TIM_CCMR1_OC1M_1 |  TIM_CCMR1_OC1M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1	|=  TIM_CCMR1_OC1PE;                     // Output 1 preload enable (make CCR1 value changable)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f043 0208 	orr.w	r2, r3, #8
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	619a      	str	r2, [r3, #24]
		TIMx->CCR1   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34
		TIMx->CCER  &= ~TIM_CCER_CC1P;                       // select output polarity: active high	
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	f023 0202 	bic.w	r2, r3, #2
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC1E;												// Enable output for ch1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	621a      	str	r2, [r3, #32]
 800160e:	e06d      	b.n	80016ec <PWM_init+0x2a0>
	}
	else if(CHn == 2){
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d121      	bne.n	800165a <PWM_init+0x20e>
		TIMx->CCMR1 &= ~TIM_CCMR1_OC2M;                     // Clear ouput compare mode bits for channel 2
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |=  TIM_CCMR1_OC2M_1 |  TIM_CCMR1_OC2M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1	|=  TIM_CCMR1_OC2PE;                     // Output 1 preload enable (make CCR1 value changable)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	619a      	str	r2, [r3, #24]
		TIMx->CCR1   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
		TIMx->CCER  &= ~TIM_CCER_CC2P;                       // select output polarity: active high	
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f023 0220 	bic.w	r2, r3, #32
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC2E;															// Enable output for ch2
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	621a      	str	r2, [r3, #32]
 8001658:	e048      	b.n	80016ec <PWM_init+0x2a0>
	}
	else if(CHn == 3){
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d121      	bne.n	80016a4 <PWM_init+0x258>
		TIMx->CCMR2 &= ~TIM_CCMR2_OC3M;                     // Clear ouput compare mode bits for channel 3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2 |=  TIM_CCMR2_OC3M_1 |  TIM_CCMR2_OC3M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2	|=  TIM_CCMR2_OC3PE;                     // Output 1 preload enable (make CCR1 value changable)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f043 0208 	orr.w	r2, r3, #8
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	61da      	str	r2, [r3, #28]
		TIMx->CCR2   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
		TIMx->CCER  &= ~TIM_CCER_CC3P;                       // select output polarity: active high	
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC3E;	                   				// select output polarity: active high	
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	e023      	b.n	80016ec <PWM_init+0x2a0>
                             													// Enable output for ch3
	}
	else if(CHn == 4){
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d120      	bne.n	80016ec <PWM_init+0x2a0>
		TIMx->CCMR2 &= ~TIM_CCMR2_OC4M;                     // Clear ouput compare mode bits for channel 3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2 |=  TIM_CCMR2_OC4M_1 |  TIM_CCMR2_OC4M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2	|=  TIM_CCMR2_OC4PE;                     // Output 1 preload enable (make CCR1 value changable)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	61da      	str	r2, [r3, #28]
		TIMx->CCR2   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
		TIMx->CCER  &= ~TIM_CCER_CC4P;                       // select output polarity: active high	
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC4E;	 
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	621a      	str	r2, [r3, #32]
	}	
	
	
	
// 5. Enable Timer Counter
	if(TIMx == TIM1) TIMx->BDTR |= TIM_BDTR_MOE;					// Main output enable (MOE): 0 = Disable, 1 = Enable	
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <PWM_init+0x2c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d105      	bne.n	8001700 <PWM_init+0x2b4>
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
	TIMx->CR1  |= TIM_CR1_CEN;  													// Enable counter
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010000 	.word	0x40010000
 8001718:	40000400 	.word	0x40000400
 800171c:	40000800 	.word	0x40000800
 8001720:	40000c00 	.word	0x40000c00
 8001724:	40014000 	.word	0x40014000
 8001728:	40014400 	.word	0x40014400
 800172c:	40014800 	.word	0x40014800

08001730 <PWM_period_us>:
void PWM_period_ms(PWM_t *pwm, uint32_t msec){
	TIM_TypeDef *TIMx = pwm->timer;
	TIM_period_ms(TIMx, msec);  //YOUR CODE GOES HERE
}

void PWM_period_us(PWM_t *pwm, uint32_t usec){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	TIM_TypeDef *TIMx = pwm->timer;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	60fb      	str	r3, [r7, #12]
	TIM_period_us(TIMx, usec); 	//YOUR CODE GOES HERE
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fa70 	bl	8001c28 <TIM_period_us>
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <PWM_pulsewidth_us>:
	}
}



void PWM_pulsewidth_us(PWM_t *pwm, float pulse_width_us){ 
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	ed87 0a00 	vstr	s0, [r7]
	TIM_TypeDef *TIMx = pwm->timer;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	61bb      	str	r3, [r7, #24]
	int CHn = pwm->ch;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	617b      	str	r3, [r7, #20]
	uint32_t fsys = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
	uint32_t psc=pwm->timer->PSC;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	613b      	str	r3, [r7, #16]
	
	// Check System CLK: PLL or HSI
	if((RCC->CFGR & (3<<0)) == 2)      { fsys = 96; }  // for msec 84MHz/1000
 8001774:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <PWM_pulsewidth_us+0xd4>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d102      	bne.n	8001786 <PWM_pulsewidth_us+0x36>
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	e007      	b.n	8001796 <PWM_pulsewidth_us+0x46>
	else if((RCC->CFGR & (3<<0)) == 0) { fsys = 16; }
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <PWM_pulsewidth_us+0xd4>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <PWM_pulsewidth_us+0x46>
 8001792:	2310      	movs	r3, #16
 8001794:	61fb      	str	r3, [r7, #28]
	
	float fclk = fsys / (psc+1);					              // fclk=fsys/(psc+1);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3301      	adds	r3, #1
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a8:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t ccval = pulse_width_us *	fclk - 1.0;				// width_ms *fclk - 1;
 80017ac:	ed97 7a00 	vldr	s14, [r7]
 80017b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	ee17 0a90 	vmov	r0, s15
 80017bc:	f7fe fecc 	bl	8000558 <__aeabi_f2d>
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <PWM_pulsewidth_us+0xd8>)
 80017c6:	f7fe fd67 	bl	8000298 <__aeabi_dsub>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f9f1 	bl	8000bb8 <__aeabi_d2uiz>
 80017d6:	4603      	mov	r3, r0
 80017d8:	60bb      	str	r3, [r7, #8]
	
	switch(CHn){
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3b01      	subs	r3, #1
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d81a      	bhi.n	8001818 <PWM_pulsewidth_us+0xc8>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <PWM_pulsewidth_us+0x98>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	08001801 	.word	0x08001801
 80017f0:	08001809 	.word	0x08001809
 80017f4:	08001811 	.word	0x08001811
		case 1: TIMx->CCR1 = ccval; break;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
 80017fe:	e00c      	b.n	800181a <PWM_pulsewidth_us+0xca>
		case 2: TIMx->CCR2 = ccval; break;
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	639a      	str	r2, [r3, #56]	; 0x38
 8001806:	e008      	b.n	800181a <PWM_pulsewidth_us+0xca>
		case 3: TIMx->CCR3 = ccval; break;
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
 800180e:	e004      	b.n	800181a <PWM_pulsewidth_us+0xca>
		case 4: TIMx->CCR4 = ccval; break;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
 8001816:	e000      	b.n	800181a <PWM_pulsewidth_us+0xca>
		default: break;
 8001818:	bf00      	nop
	}
}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	3ff00000 	.word	0x3ff00000

0800182c <PWM_pinmap>:
		}
}


// DO NOT MODIFY HERE
void PWM_pinmap(PWM_t *pwm){
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
   GPIO_TypeDef *port = pwm->port;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
   int pin = pwm->pin;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	60bb      	str	r3, [r7, #8]
   
   if(port == GPIOA) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a7d      	ldr	r2, [pc, #500]	; (8001a38 <PWM_pinmap+0x20c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d163      	bne.n	8001910 <PWM_pinmap+0xe4>
      switch(pin){
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	f200 80e6 	bhi.w	8001a1c <PWM_pinmap+0x1f0>
 8001850:	a201      	add	r2, pc, #4	; (adr r2, 8001858 <PWM_pinmap+0x2c>)
 8001852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001856:	bf00      	nop
 8001858:	08001899 	.word	0x08001899
 800185c:	080018a9 	.word	0x080018a9
 8001860:	08001a1d 	.word	0x08001a1d
 8001864:	08001a1d 	.word	0x08001a1d
 8001868:	08001a1d 	.word	0x08001a1d
 800186c:	080018b9 	.word	0x080018b9
 8001870:	080018c9 	.word	0x080018c9
 8001874:	08001a1d 	.word	0x08001a1d
 8001878:	080018d7 	.word	0x080018d7
 800187c:	080018e5 	.word	0x080018e5
 8001880:	080018f3 	.word	0x080018f3
 8001884:	08001a1d 	.word	0x08001a1d
 8001888:	08001a1d 	.word	0x08001a1d
 800188c:	08001a1d 	.word	0x08001a1d
 8001890:	08001a1d 	.word	0x08001a1d
 8001894:	08001901 	.word	0x08001901
         case 0 : pwm->timer = TIM2; pwm->ch = 1; break;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	e0c0      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 1 : pwm->timer = TIM2; pwm->ch = 2; break;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	e0b8      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 5 : pwm->timer = TIM2; pwm->ch = 1; break;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e0b0      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 6 : pwm->timer = TIM3; pwm->ch = 1; break;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a5c      	ldr	r2, [pc, #368]	; (8001a3c <PWM_pinmap+0x210>)
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	e0a9      	b.n	8001a2a <PWM_pinmap+0x1fe>
         //case 7: PWM_pin->timer = TIM1; PWM_pin->ch = 1N; break;
         case 8 : pwm->timer = TIM1; pwm->ch = 1; break;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a59      	ldr	r2, [pc, #356]	; (8001a40 <PWM_pinmap+0x214>)
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	e0a2      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 9 : pwm->timer = TIM1; pwm->ch = 2; break;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a56      	ldr	r2, [pc, #344]	; (8001a40 <PWM_pinmap+0x214>)
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	e09b      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 10: pwm->timer = TIM1; pwm->ch = 3; break;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <PWM_pinmap+0x214>)
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2203      	movs	r2, #3
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	e094      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 15: pwm->timer = TIM2; pwm->ch = 1; break;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	e08c      	b.n	8001a2a <PWM_pinmap+0x1fe>
         default: break;
      }         
   }
   else if(port == GPIOB) {
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a4c      	ldr	r2, [pc, #304]	; (8001a44 <PWM_pinmap+0x218>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d151      	bne.n	80019bc <PWM_pinmap+0x190>
      switch(pin){
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3b03      	subs	r3, #3
 800191c:	2b07      	cmp	r3, #7
 800191e:	d87f      	bhi.n	8001a20 <PWM_pinmap+0x1f4>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <PWM_pinmap+0xfc>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	08001949 	.word	0x08001949
 800192c:	08001959 	.word	0x08001959
 8001930:	08001967 	.word	0x08001967
 8001934:	08001975 	.word	0x08001975
 8001938:	08001983 	.word	0x08001983
 800193c:	08001991 	.word	0x08001991
 8001940:	0800199f 	.word	0x0800199f
 8001944:	080019ad 	.word	0x080019ad
         //case 0: PWM_pin->timer = TIM1; PWM_pin->ch = 2N; break;
         //case 1: PWM_pin->timer = TIM1; PWM_pin->ch = 3N; break;
         case 3 : pwm->timer = TIM2; pwm->ch = 2; break;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	e068      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 4 : pwm->timer = TIM3; pwm->ch = 1; break;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <PWM_pinmap+0x210>)
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	e061      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 5 : pwm->timer = TIM3; pwm->ch = 2; break;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <PWM_pinmap+0x210>)
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e05a      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 6 : pwm->timer = TIM4; pwm->ch = 1; break;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <PWM_pinmap+0x21c>)
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	e053      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 7 : pwm->timer = TIM4; pwm->ch = 2; break;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a30      	ldr	r2, [pc, #192]	; (8001a48 <PWM_pinmap+0x21c>)
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	e04c      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 8 : pwm->timer = TIM4; pwm->ch = 3; break;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <PWM_pinmap+0x21c>)
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	e045      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 9 : pwm->timer = TIM4; pwm->ch = 4; break;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <PWM_pinmap+0x21c>)
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	e03e      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 10: pwm->timer = TIM2; pwm->ch = 3; break;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	e036      	b.n	8001a2a <PWM_pinmap+0x1fe>
         
         default: break;
      }
   }
   else if(port == GPIOC) {
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <PWM_pinmap+0x220>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d12f      	bne.n	8001a24 <PWM_pinmap+0x1f8>
      switch(pin){
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3b06      	subs	r3, #6
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d82d      	bhi.n	8001a28 <PWM_pinmap+0x1fc>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <PWM_pinmap+0x1a8>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019f3 	.word	0x080019f3
 80019dc:	08001a01 	.word	0x08001a01
 80019e0:	08001a0f 	.word	0x08001a0f
         case 6 : pwm->timer = TIM3; pwm->ch = 1; break;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <PWM_pinmap+0x210>)
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	e01b      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 7 : pwm->timer = TIM3; pwm->ch = 2; break;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <PWM_pinmap+0x210>)
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	e014      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 8 : pwm->timer = TIM3; pwm->ch = 3; break;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <PWM_pinmap+0x210>)
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	e00d      	b.n	8001a2a <PWM_pinmap+0x1fe>
         case 9 : pwm->timer = TIM3; pwm->ch = 4; break;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <PWM_pinmap+0x210>)
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2204      	movs	r2, #4
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	e006      	b.n	8001a2a <PWM_pinmap+0x1fe>
         default: break;
 8001a1c:	bf00      	nop
 8001a1e:	e004      	b.n	8001a2a <PWM_pinmap+0x1fe>
         default: break;
 8001a20:	bf00      	nop
 8001a22:	e002      	b.n	8001a2a <PWM_pinmap+0x1fe>
         
         default: break;
      }
   }
 8001a24:	bf00      	nop
 8001a26:	e000      	b.n	8001a2a <PWM_pinmap+0x1fe>
         default: break;
 8001a28:	bf00      	nop
	 // TIM5 needs to be added, if used.
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	40020800 	.word	0x40020800

08001a50 <RCC_GPIOA_enable>:
}



void RCC_GPIOA_enable()
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	// HSI is used as system clock         
	//RCC_HSI_init();
	
	// RCC Peripheral Clock Enable Register 
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <RCC_GPIOA_enable+0x1c>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <RCC_GPIOA_enable+0x1c>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800

08001a70 <RCC_GPIOB_enable>:

void RCC_GPIOB_enable()
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	// HSI is used as system clock         
	//RCC_HSI_init();
	// RCC Peripheral Clock Enable Register 
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <RCC_GPIOB_enable+0x1c>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <RCC_GPIOB_enable+0x1c>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <RCC_GPIOC_enable>:

void RCC_GPIOC_enable()
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
	// HSI is used as system clock         
	//RCC_HSI_init();
	// RCC Peripheral Clock Enable Register 
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <RCC_GPIOC_enable+0x1c>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <RCC_GPIOC_enable+0x1c>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <TIM_init>:
#include "ecTIM.h"
#include "ecGPIO.h"

/* Timer Configuration */

void TIM_init(TIM_TypeDef* TIMx, uint32_t msec){ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	
// 1. Enable Timer CLOCK
	if     (TIMx ==TIM1) RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a2f      	ldr	r2, [pc, #188]	; (8001c0c <TIM_init+0xcc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d106      	bne.n	8001b60 <TIM_init+0x20>
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <TIM_init+0xd0>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a2e      	ldr	r2, [pc, #184]	; (8001c10 <TIM_init+0xd0>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	e040      	b.n	8001be2 <TIM_init+0xa2>
	else if(TIMx ==TIM2) RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b66:	d106      	bne.n	8001b76 <TIM_init+0x36>
 8001b68:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <TIM_init+0xd0>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a28      	ldr	r2, [pc, #160]	; (8001c10 <TIM_init+0xd0>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
 8001b74:	e035      	b.n	8001be2 <TIM_init+0xa2>
	else if(TIMx ==TIM3) RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <TIM_init+0xd4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d106      	bne.n	8001b8c <TIM_init+0x4c>
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <TIM_init+0xd0>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <TIM_init+0xd0>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	e02a      	b.n	8001be2 <TIM_init+0xa2>
	else if(TIMx ==TIM4)  RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <TIM_init+0xd8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d106      	bne.n	8001ba2 <TIM_init+0x62>
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <TIM_init+0xd0>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <TIM_init+0xd0>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	e01f      	b.n	8001be2 <TIM_init+0xa2>
	else if(TIMx ==TIM5)  RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <TIM_init+0xdc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d106      	bne.n	8001bb8 <TIM_init+0x78>
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <TIM_init+0xd0>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <TIM_init+0xd0>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	e014      	b.n	8001be2 <TIM_init+0xa2>
	else if(TIMx ==TIM9)  RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <TIM_init+0xe0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d106      	bne.n	8001bce <TIM_init+0x8e>
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <TIM_init+0xd0>)
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <TIM_init+0xd0>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	6453      	str	r3, [r2, #68]	; 0x44
 8001bcc:	e009      	b.n	8001be2 <TIM_init+0xa2>
	else if(TIMx ==TIM11) RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <TIM_init+0xe4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d105      	bne.n	8001be2 <TIM_init+0xa2>
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <TIM_init+0xd0>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <TIM_init+0xd0>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44

	
	
// 2. Set CNT period
	TIM_period_ms(TIMx, msec); 
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f85f 	bl	8001ca8 <TIM_period_ms>
	
	
// 3. CNT Direction
	TIMx->CR1 |=    TIM_CR1_DIR;					// Upcounter	
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
	// timerx->CR1 |= TIM_CR1_DIR;				// Downcounter	
	
	
// 4. Enable Timer Counter
	TIMx->CR1 |= TIM_CR1_CEN;		
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	40000c00 	.word	0x40000c00
 8001c20:	40014000 	.word	0x40014000
 8001c24:	40014800 	.word	0x40014800

08001c28 <TIM_period_us>:



void TIM_period_us(TIM_TypeDef *TIMx, uint32_t usec)
	{   
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	uint32_t prescaler;
	uint32_t ARRval_32;
	uint16_t ARRval_16;
	
	// Check System CLK: PLL or HSI
	if     ((RCC->CFGR & (3<<0)) == 2)      { prescaler = 96; }
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <TIM_period_us+0x78>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d102      	bne.n	8001c44 <TIM_period_us+0x1c>
 8001c3e:	2360      	movs	r3, #96	; 0x60
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e007      	b.n	8001c54 <TIM_period_us+0x2c>
	else if((RCC->CFGR & (3<<0)) == 0)      { prescaler = 16; }
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <TIM_period_us+0x78>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <TIM_period_us+0x2c>
 8001c50:	2310      	movs	r3, #16
 8001c52:	617b      	str	r3, [r7, #20]
	
			if (TIMx== TIM2 || TIMx == TIM5) 
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5a:	d003      	beq.n	8001c64 <TIM_period_us+0x3c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <TIM_period_us+0x7c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d10a      	bne.n	8001c7a <TIM_period_us+0x52>
			{
				ARRval_32 = usec ;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
				TIMx->PSC = prescaler-1;					
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_32-1;	
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c78:	e00b      	b.n	8001c92 <TIM_period_us+0x6a>
			}
			
			else
			{
				ARRval_16 = (uint16_t)( usec) ;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	827b      	strh	r3, [r7, #18]
				TIMx->PSC = prescaler-1;					
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_16-1;	
 8001c86:	8a7b      	ldrh	r3, [r7, #18]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
			
			}			
	
	
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40000c00 	.word	0x40000c00

08001ca8 <TIM_period_ms>:


void TIM_period_ms(TIM_TypeDef* TIMx, uint32_t msec){ 
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
	uint32_t ARRval_32;
	uint16_t ARRval_16;
	

	// Check System CLK: PLL or HSI
	if((RCC->CFGR & (3<<0)) == 2)      { prescaler = 9600; }  // for msec 84MHz/1000
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <TIM_period_ms+0x90>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d103      	bne.n	8001cc6 <TIM_period_ms+0x1e>
 8001cbe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001cc2:	81fb      	strh	r3, [r7, #14]
 8001cc4:	e008      	b.n	8001cd8 <TIM_period_ms+0x30>
	else if((RCC->CFGR & (3<<0)) == 0) { prescaler = 1600; }
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <TIM_period_ms+0x90>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <TIM_period_ms+0x30>
 8001cd2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001cd6:	81fb      	strh	r3, [r7, #14]

	
	
  //	uint32_t prescaler = 8400;
	
			if (TIMx== TIM2 || TIMx == TIM5) 
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d003      	beq.n	8001ce8 <TIM_period_ms+0x40>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <TIM_period_ms+0x94>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d10f      	bne.n	8001d08 <TIM_period_ms+0x60>
			{
				ARRval_32 = 10 * msec ;
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
				TIMx->PSC = prescaler-1;					
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_32-1;	
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1e5a      	subs	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d06:	e011      	b.n	8001d2c <TIM_period_ms+0x84>
			}
			
			else
			{
				ARRval_16 = (uint16_t)(10 * msec) ;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	81bb      	strh	r3, [r7, #12]
				TIMx->PSC = prescaler-1;					
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_16-1;	
 8001d20:	89bb      	ldrh	r3, [r7, #12]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	461a      	mov	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
			}
	
	
		

}
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40000c00 	.word	0x40000c00

08001d40 <TIM_INT_init>:
// Update Event Interrupt
void TIM_INT_init(TIM_TypeDef* TIMx, uint32_t msec){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
// 1. Initialize Timer	
	TIM_init(TIMx,msec);
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fef7 	bl	8001b40 <TIM_init>
	
// 2. Enable Update Interrupt
	TIM_INT_enable(TIMx);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f84e 	bl	8001df4 <TIM_INT_enable>
	
// 3. NVIC Setting
	uint32_t IRQn_reg =0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
	if     (TIMx == TIM1)       IRQn_reg = TIM1_UP_TIM10_IRQn;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <TIM_INT_init+0x9c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d102      	bne.n	8001d6a <TIM_INT_init+0x2a>
 8001d64:	2319      	movs	r3, #25
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e028      	b.n	8001dbc <TIM_INT_init+0x7c>
	else if(TIMx == TIM2)       IRQn_reg = TIM2_IRQn;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d102      	bne.n	8001d78 <TIM_INT_init+0x38>
 8001d72:	231c      	movs	r3, #28
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	e021      	b.n	8001dbc <TIM_INT_init+0x7c>
	else if(TIMx == TIM3)       IRQn_reg = TIM3_IRQn;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <TIM_INT_init+0xa0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d102      	bne.n	8001d86 <TIM_INT_init+0x46>
 8001d80:	231d      	movs	r3, #29
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e01a      	b.n	8001dbc <TIM_INT_init+0x7c>
	else if(TIMx ==TIM4)   			IRQn_reg = TIM4_IRQn;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <TIM_INT_init+0xa4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d102      	bne.n	8001d94 <TIM_INT_init+0x54>
 8001d8e:	231e      	movs	r3, #30
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e013      	b.n	8001dbc <TIM_INT_init+0x7c>
	else if(TIMx ==TIM5)   			IRQn_reg = TIM5_IRQn;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <TIM_INT_init+0xa8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d102      	bne.n	8001da2 <TIM_INT_init+0x62>
 8001d9c:	2332      	movs	r3, #50	; 0x32
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e00c      	b.n	8001dbc <TIM_INT_init+0x7c>
	else if(TIMx ==TIM9)   			IRQn_reg = TIM1_BRK_TIM9_IRQn;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <TIM_INT_init+0xac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d102      	bne.n	8001db0 <TIM_INT_init+0x70>
 8001daa:	2318      	movs	r3, #24
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e005      	b.n	8001dbc <TIM_INT_init+0x7c>
	else if(TIMx ==TIM11)  			IRQn_reg = TIM1_TRG_COM_TIM11_IRQn;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <TIM_INT_init+0xb0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <TIM_INT_init+0x7c>
 8001db8:	231a      	movs	r3, #26
 8001dba:	60fb      	str	r3, [r7, #12]
	
				
	NVIC_SetPriority(IRQn_reg,2);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fe92 	bl	8001aec <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn_reg);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fe6f 	bl	8001ab0 <__NVIC_EnableIRQ>
	
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800
 8001de8:	40000c00 	.word	0x40000c00
 8001dec:	40014000 	.word	0x40014000
 8001df0:	40014800 	.word	0x40014800

08001df4 <TIM_INT_enable>:



void TIM_INT_enable(TIM_TypeDef* TIMx){
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	TIMx->DIER |=   TIM_DIER_UIE;			// Enable Timer Update Interrupt		
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <is_UIF>:

void TIM_INT_disable(TIM_TypeDef* TIMx){
	TIMx->DIER &= ~(TIM_DIER_UIE);				// Disable Timer Update Interrupt		
}

uint32_t is_UIF(TIM_TypeDef *TIMx){
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	return TIMx->SR & TIM_DIER_UIE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f003 0301 	and.w	r3, r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <clear_UIF>:

void clear_UIF(TIM_TypeDef *TIMx){
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	TIMx->SR &= ~TIM_DIER_UIE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f023 0201 	bic.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_GPIO_ResetOutputPin>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7c:	4907      	ldr	r1, [pc, #28]	; (8001e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001eb6:	2080      	movs	r0, #128	; 0x80
 8001eb8:	f7ff ffda 	bl	8001e70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff ffd7 	bl	8001e70 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GYRO_CS_Pin|LEDpin_Pin);
 8001ec2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001ec6:	4811      	ldr	r0, [pc, #68]	; (8001f0c <MX_GPIO_Init+0x6c>)
 8001ec8:	f7ff ffc2 	bl	8001e50 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4619      	mov	r1, r3
 8001edc:	480b      	ldr	r0, [pc, #44]	; (8001f0c <MX_GPIO_Init+0x6c>)
 8001ede:	f002 fd60 	bl	80049a2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GYRO_CS_Pin|LEDpin_Pin;
 8001ee2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ee6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	463b      	mov	r3, r7
 8001efa:	4619      	mov	r1, r3
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <MX_GPIO_Init+0x6c>)
 8001efe:	f002 fd50 	bl	80049a2 <LL_GPIO_Init>

}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40020000 	.word	0x40020000

08001f10 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	330c      	adds	r3, #12
 8001f1c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	e853 3f00 	ldrex	r3, [r3]
 8001f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	330c      	adds	r3, #12
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	61ba      	str	r2, [r7, #24]
 8001f36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f38:	6979      	ldr	r1, [r7, #20]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	e841 2300 	strex	r3, r2, [r1]
 8001f40:	613b      	str	r3, [r7, #16]
   return(result);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e7      	bne.n	8001f18 <LL_USART_EnableIT_RXNE+0x8>
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	605a      	str	r2, [r3, #4]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	041a      	lsls	r2, r3, #16
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	400b      	ands	r3, r1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_write>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// To use UART printf() Function
int _write(int file, char *p, int len)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]

    for(int i = 0; i < len; ++i)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e00d      	b.n	8001fd6 <_write+0x2e>
    {
    	LL_USART_TransmitData8(USART1, *(p+i));  //send data to usart1
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <_write+0x40>)
 8001fc6:	f7ff ffc6 	bl	8001f56 <LL_USART_TransmitData8>
    	LL_mDelay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f003 f9d6 	bl	800537c <LL_mDelay>
    for(int i = 0; i < len; ++i)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dbed      	blt.n	8001fba <_write+0x12>
    }

    return len;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	00000000 	.word	0x00000000

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff6:	f001 fdef 	bl	8003bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffa:	f000 fd13 	bl	8002a24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  motor_setup();
 8001ffe:	f000 fd79 	bl	8002af4 <motor_setup>

  TIM_INT_init(TIM2, 1);
 8002002:	2101      	movs	r1, #1
 8002004:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002008:	f7ff fe9a 	bl	8001d40 <TIM_INT_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200c:	f7ff ff48 	bl	8001ea0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002010:	f000 fe9a 	bl	8002d48 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002014:	f001 fcf6 	bl	8003a04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002018:	f001 fd54 	bl	8003ac4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Waiting for Pin Initialization...\n\r");
 800201c:	48cc      	ldr	r0, [pc, #816]	; (8002350 <main+0x360>)
 800201e:	f003 fe7d 	bl	8005d1c <iprintf>
  LL_mDelay(2000);
 8002022:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002026:	f003 f9a9 	bl	800537c <LL_mDelay>

  ICM20602_Initialization();
 800202a:	f7ff f8d1 	bl	80011d0 <ICM20602_Initialization>


  LL_USART_EnableIT_RXNE(USART2);
 800202e:	48c9      	ldr	r0, [pc, #804]	; (8002354 <main+0x364>)
 8002030:	f7ff ff6e 	bl	8001f10 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART1);  //USART bluetooth or usb cabe intterupt enable
 8002034:	48c8      	ldr	r0, [pc, #800]	; (8002358 <main+0x368>)
 8002036:	f7ff ff6b 	bl	8001f10 <LL_USART_EnableIT_RXNE>



  printf("USART2 pin for SUMD Interrupt enabled\n\r");
 800203a:	48c8      	ldr	r0, [pc, #800]	; (800235c <main+0x36c>)
 800203c:	f003 fe6e 	bl	8005d1c <iprintf>


	  /*===============================================================*/
	  /*                Gyro Sensor Processing Part                    */
	  /*===============================================================*/
	  if(ICM20602_DataReady() == 1)
 8002040:	f7ff f98e 	bl	8001360 <ICM20602_DataReady>
 8002044:	4603      	mov	r3, r0
 8002046:	2b01      	cmp	r3, #1
 8002048:	f040 83fb 	bne.w	8002842 <main+0x852>
		{
			printcnt++;
 800204c:	4bc4      	ldr	r3, [pc, #784]	; (8002360 <main+0x370>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4ac3      	ldr	r2, [pc, #780]	; (8002360 <main+0x370>)
 8002054:	6013      	str	r3, [r2, #0]
			LL_GPIO_TogglePin(LEDpin_GPIO_Port, LEDpin_Pin);
 8002056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205a:	48c2      	ldr	r0, [pc, #776]	; (8002364 <main+0x374>)
 800205c:	f7ff ff8a 	bl	8001f74 <LL_GPIO_TogglePin>
			ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);
 8002060:	49c1      	ldr	r1, [pc, #772]	; (8002368 <main+0x378>)
 8002062:	48c2      	ldr	r0, [pc, #776]	; (800236c <main+0x37c>)
 8002064:	f7ff f932 	bl	80012cc <ICM20602_Get6AxisRawData>

			//Raw data to deg/s conversion with sensor direction conversion. check AFS_SEL value for Gyro sensor Register!
			ICM20602.gyro_x =   (float)(  ICM20602.gyro_y_raw/16.4f - gyro_y_offset);
 8002068:	4bc0      	ldr	r3, [pc, #768]	; (800236c <main+0x37c>)
 800206a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002076:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002370 <main+0x380>
 800207a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800207e:	ee16 0a90 	vmov	r0, s13
 8002082:	f7fe fa69 	bl	8000558 <__aeabi_f2d>
 8002086:	4bbb      	ldr	r3, [pc, #748]	; (8002374 <main+0x384>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe f904 	bl	8000298 <__aeabi_dsub>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fdae 	bl	8000bf8 <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	4ab3      	ldr	r2, [pc, #716]	; (800236c <main+0x37c>)
 80020a0:	61d3      	str	r3, [r2, #28]
			ICM20602.gyro_y =   (float)(-(ICM20602.gyro_x_raw/16.4f - gyro_x_offset));
 80020a2:	4bb2      	ldr	r3, [pc, #712]	; (800236c <main+0x37c>)
 80020a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b0:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8002370 <main+0x380>
 80020b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020b8:	ee16 0a90 	vmov	r0, s13
 80020bc:	f7fe fa4c 	bl	8000558 <__aeabi_f2d>
 80020c0:	4bad      	ldr	r3, [pc, #692]	; (8002378 <main+0x388>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe f8e7 	bl	8000298 <__aeabi_dsub>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fd91 	bl	8000bf8 <__aeabi_d2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef1 7a67 	vneg.f32	s15, s15
 80020e0:	4ba2      	ldr	r3, [pc, #648]	; (800236c <main+0x37c>)
 80020e2:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z =   (float)(  ICM20602.gyro_z_raw/16.4f - gyro_z_offset);
 80020e6:	4ba1      	ldr	r3, [pc, #644]	; (800236c <main+0x37c>)
 80020e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002370 <main+0x380>
 80020f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020fc:	ee16 0a90 	vmov	r0, s13
 8002100:	f7fe fa2a 	bl	8000558 <__aeabi_f2d>
 8002104:	4b9d      	ldr	r3, [pc, #628]	; (800237c <main+0x38c>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe f8c5 	bl	8000298 <__aeabi_dsub>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fd6f 	bl	8000bf8 <__aeabi_d2f>
 800211a:	4603      	mov	r3, r0
 800211c:	4a93      	ldr	r2, [pc, #588]	; (800236c <main+0x37c>)
 800211e:	6253      	str	r3, [r2, #36]	; 0x24

			//Complementary filter

			ICM20602.angle_pitch += ICM20602.gyro_x * 0.001; //(sampling frequency: 1kHz)
 8002120:	4b92      	ldr	r3, [pc, #584]	; (800236c <main+0x37c>)
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa17 	bl	8000558 <__aeabi_f2d>
 800212a:	4604      	mov	r4, r0
 800212c:	460d      	mov	r5, r1
 800212e:	4b8f      	ldr	r3, [pc, #572]	; (800236c <main+0x37c>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa10 	bl	8000558 <__aeabi_f2d>
 8002138:	a381      	add	r3, pc, #516	; (adr r3, 8002340 <main+0x350>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fa63 	bl	8000608 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4620      	mov	r0, r4
 8002148:	4629      	mov	r1, r5
 800214a:	f7fe f8a7 	bl	800029c <__adddf3>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f7fe fd4f 	bl	8000bf8 <__aeabi_d2f>
 800215a:	4603      	mov	r3, r0
 800215c:	4a83      	ldr	r2, [pc, #524]	; (800236c <main+0x37c>)
 800215e:	6393      	str	r3, [r2, #56]	; 0x38
			ICM20602.angle_roll  += ICM20602.gyro_y * 0.001;
 8002160:	4b82      	ldr	r3, [pc, #520]	; (800236c <main+0x37c>)
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f9f7 	bl	8000558 <__aeabi_f2d>
 800216a:	4604      	mov	r4, r0
 800216c:	460d      	mov	r5, r1
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <main+0x37c>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f9f0 	bl	8000558 <__aeabi_f2d>
 8002178:	a371      	add	r3, pc, #452	; (adr r3, 8002340 <main+0x350>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa43 	bl	8000608 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4620      	mov	r0, r4
 8002188:	4629      	mov	r1, r5
 800218a:	f7fe f887 	bl	800029c <__adddf3>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fd2f 	bl	8000bf8 <__aeabi_d2f>
 800219a:	4603      	mov	r3, r0
 800219c:	4a73      	ldr	r2, [pc, #460]	; (800236c <main+0x37c>)
 800219e:	6353      	str	r3, [r2, #52]	; 0x34
			ICM20602.angle_yaw   += ICM20602.gyro_z * 0.001;
 80021a0:	4b72      	ldr	r3, [pc, #456]	; (800236c <main+0x37c>)
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9d7 	bl	8000558 <__aeabi_f2d>
 80021aa:	4604      	mov	r4, r0
 80021ac:	460d      	mov	r5, r1
 80021ae:	4b6f      	ldr	r3, [pc, #444]	; (800236c <main+0x37c>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9d0 	bl	8000558 <__aeabi_f2d>
 80021b8:	a361      	add	r3, pc, #388	; (adr r3, 8002340 <main+0x350>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe fa23 	bl	8000608 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4620      	mov	r0, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	f7fe f867 	bl	800029c <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	f7fe fd0f 	bl	8000bf8 <__aeabi_d2f>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a63      	ldr	r2, [pc, #396]	; (800236c <main+0x37c>)
 80021de:	63d3      	str	r3, [r2, #60]	; 0x3c

			ICM20602.angle_pitch += ICM20602.angle_roll * sin(ICM20602.gyro_z * 0.001 * DEG2RAD);
 80021e0:	4b62      	ldr	r3, [pc, #392]	; (800236c <main+0x37c>)
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f9b7 	bl	8000558 <__aeabi_f2d>
 80021ea:	4604      	mov	r4, r0
 80021ec:	460d      	mov	r5, r1
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <main+0x37c>)
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9b0 	bl	8000558 <__aeabi_f2d>
 80021f8:	4680      	mov	r8, r0
 80021fa:	4689      	mov	r9, r1
 80021fc:	4b5b      	ldr	r3, [pc, #364]	; (800236c <main+0x37c>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f9a9 	bl	8000558 <__aeabi_f2d>
 8002206:	a34e      	add	r3, pc, #312	; (adr r3, 8002340 <main+0x350>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f9fc 	bl	8000608 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	a34b      	add	r3, pc, #300	; (adr r3, 8002348 <main+0x358>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f7fe f9f3 	bl	8000608 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	ec43 2b17 	vmov	d7, r2, r3
 800222a:	eeb0 0a47 	vmov.f32	s0, s14
 800222e:	eef0 0a67 	vmov.f32	s1, s15
 8002232:	f005 fe2d 	bl	8007e90 <sin>
 8002236:	ec53 2b10 	vmov	r2, r3, d0
 800223a:	4640      	mov	r0, r8
 800223c:	4649      	mov	r1, r9
 800223e:	f7fe f9e3 	bl	8000608 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f7fe f827 	bl	800029c <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f7fe fccf 	bl	8000bf8 <__aeabi_d2f>
 800225a:	4603      	mov	r3, r0
 800225c:	4a43      	ldr	r2, [pc, #268]	; (800236c <main+0x37c>)
 800225e:	6393      	str	r3, [r2, #56]	; 0x38
			ICM20602.angle_roll -= ICM20602.angle_pitch * sin(ICM20602.gyro_z * 0.001 * DEG2RAD);
 8002260:	4b42      	ldr	r3, [pc, #264]	; (800236c <main+0x37c>)
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f977 	bl	8000558 <__aeabi_f2d>
 800226a:	4604      	mov	r4, r0
 800226c:	460d      	mov	r5, r1
 800226e:	4b3f      	ldr	r3, [pc, #252]	; (800236c <main+0x37c>)
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f970 	bl	8000558 <__aeabi_f2d>
 8002278:	4680      	mov	r8, r0
 800227a:	4689      	mov	r9, r1
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <main+0x37c>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f969 	bl	8000558 <__aeabi_f2d>
 8002286:	a32e      	add	r3, pc, #184	; (adr r3, 8002340 <main+0x350>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fe f9bc 	bl	8000608 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	a32b      	add	r3, pc, #172	; (adr r3, 8002348 <main+0x358>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f7fe f9b3 	bl	8000608 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	ec43 2b17 	vmov	d7, r2, r3
 80022aa:	eeb0 0a47 	vmov.f32	s0, s14
 80022ae:	eef0 0a67 	vmov.f32	s1, s15
 80022b2:	f005 fded 	bl	8007e90 <sin>
 80022b6:	ec53 2b10 	vmov	r2, r3, d0
 80022ba:	4640      	mov	r0, r8
 80022bc:	4649      	mov	r1, r9
 80022be:	f7fe f9a3 	bl	8000608 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fd ffe5 	bl	8000298 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc8f 	bl	8000bf8 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <main+0x37c>)
 80022de:	6353      	str	r3, [r2, #52]	; 0x34


			ICM20602.acc_total_vect = sqrt((ICM20602.acc_x_raw*ICM20602.acc_x_raw)
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <main+0x37c>)
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <main+0x37c>)
 80022ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
										  +(ICM20602.acc_y_raw*ICM20602.acc_y_raw)
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <main+0x37c>)
 80022f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022f8:	4619      	mov	r1, r3
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <main+0x37c>)
 80022fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	441a      	add	r2, r3
										  +(ICM20602.acc_z_raw*ICM20602.acc_z_raw));
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <main+0x37c>)
 8002308:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800230c:	4619      	mov	r1, r3
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <main+0x37c>)
 8002310:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
			ICM20602.acc_total_vect = sqrt((ICM20602.acc_x_raw*ICM20602.acc_x_raw)
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f90a 	bl	8000534 <__aeabi_i2d>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	ec43 2b10 	vmov	d0, r2, r3
 8002328:	f005 fe3e 	bl	8007fa8 <sqrt>
 800232c:	ec53 2b10 	vmov	r2, r3, d0
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc60 	bl	8000bf8 <__aeabi_d2f>
 8002338:	4603      	mov	r3, r0
 800233a:	e021      	b.n	8002380 <main+0x390>
 800233c:	f3af 8000 	nop.w
 8002340:	d2f1a9fc 	.word	0xd2f1a9fc
 8002344:	3f50624d 	.word	0x3f50624d
 8002348:	00de4c51 	.word	0x00de4c51
 800234c:	3f91df33 	.word	0x3f91df33
 8002350:	08009608 	.word	0x08009608
 8002354:	40004400 	.word	0x40004400
 8002358:	40011000 	.word	0x40011000
 800235c:	0800962c 	.word	0x0800962c
 8002360:	20000410 	.word	0x20000410
 8002364:	40020000 	.word	0x40020000
 8002368:	20000254 	.word	0x20000254
 800236c:	2000024c 	.word	0x2000024c
 8002370:	41833333 	.word	0x41833333
 8002374:	20000008 	.word	0x20000008
 8002378:	20000000 	.word	0x20000000
 800237c:	20000010 	.word	0x20000010
 8002380:	4ab5      	ldr	r2, [pc, #724]	; (8002658 <main+0x668>)
 8002382:	6293      	str	r3, [r2, #40]	; 0x28


			ICM20602.angle_pitch_acc = asin((float)(ICM20602.acc_x_raw /ICM20602.acc_total_vect))*RAD2DEG;
 8002384:	4bb4      	ldr	r3, [pc, #720]	; (8002658 <main+0x668>)
 8002386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002392:	4bb1      	ldr	r3, [pc, #708]	; (8002658 <main+0x668>)
 8002394:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002398:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800239c:	ee16 0a90 	vmov	r0, s13
 80023a0:	f7fe f8da 	bl	8000558 <__aeabi_f2d>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	ec43 2b10 	vmov	d0, r2, r3
 80023ac:	f005 fdc8 	bl	8007f40 <asin>
 80023b0:	ec51 0b10 	vmov	r0, r1, d0
 80023b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8002638 <main+0x648>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f7fe f925 	bl	8000608 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f7fe fc17 	bl	8000bf8 <__aeabi_d2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4aa2      	ldr	r2, [pc, #648]	; (8002658 <main+0x668>)
 80023ce:	62d3      	str	r3, [r2, #44]	; 0x2c
			ICM20602.angle_roll_acc  = asin((float)(-ICM20602.acc_y_raw)/ICM20602.acc_total_vect)*-RAD2DEG;
 80023d0:	4ba1      	ldr	r3, [pc, #644]	; (8002658 <main+0x668>)
 80023d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023d6:	425b      	negs	r3, r3
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e0:	4b9d      	ldr	r3, [pc, #628]	; (8002658 <main+0x668>)
 80023e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80023e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023ea:	ee16 0a90 	vmov	r0, s13
 80023ee:	f7fe f8b3 	bl	8000558 <__aeabi_f2d>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	ec43 2b10 	vmov	d0, r2, r3
 80023fa:	f005 fda1 	bl	8007f40 <asin>
 80023fe:	ec51 0b10 	vmov	r0, r1, d0
 8002402:	a38f      	add	r3, pc, #572	; (adr r3, 8002640 <main+0x650>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe f8fe 	bl	8000608 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fbf0 	bl	8000bf8 <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	4a8f      	ldr	r2, [pc, #572]	; (8002658 <main+0x668>)
 800241c:	6313      	str	r3, [r2, #48]	; 0x30

			ICM20602.angle_pitch = (ICM20602.angle_pitch * 0.95f + ICM20602.angle_pitch_acc * 0.05f);
 800241e:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <main+0x668>)
 8002420:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002424:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800265c <main+0x66c>
 8002428:	ee27 7a87 	vmul.f32	s14, s15, s14
 800242c:	4b8a      	ldr	r3, [pc, #552]	; (8002658 <main+0x668>)
 800242e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002432:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8002660 <main+0x670>
 8002436:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	4b86      	ldr	r3, [pc, #536]	; (8002658 <main+0x668>)
 8002440:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			ICM20602.angle_roll  = (ICM20602.angle_roll *  0.95f + ICM20602.angle_roll_acc  * 0.05f);
 8002444:	4b84      	ldr	r3, [pc, #528]	; (8002658 <main+0x668>)
 8002446:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800244a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800265c <main+0x66c>
 800244e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <main+0x668>)
 8002454:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002458:	eddf 6a81 	vldr	s13, [pc, #516]	; 8002660 <main+0x670>
 800245c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002464:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <main+0x668>)
 8002466:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			 // if(tim2_1ms_flag == 1)
			  //{

				 // tim2_1ms_flag = 0;

				  pitch_ref		   		 = (oneShot125[2] - stick_offset_us)*0.8f;// -50 ~ 50 deg
 800246a:	4b7e      	ldr	r3, [pc, #504]	; (8002664 <main+0x674>)
 800246c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002470:	4b7d      	ldr	r3, [pc, #500]	; (8002668 <main+0x678>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fd ff0f 	bl	8000298 <__aeabi_dsub>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	a371      	add	r3, pc, #452	; (adr r3, 8002648 <main+0x658>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe f8be 	bl	8000608 <__aeabi_dmul>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4976      	ldr	r1, [pc, #472]	; (800266c <main+0x67c>)
 8002492:	e9c1 2300 	strd	r2, r3, [r1]
				  pitch_error 	   		 = pitch_ref - ICM20602.angle_pitch;
 8002496:	4b75      	ldr	r3, [pc, #468]	; (800266c <main+0x67c>)
 8002498:	e9d3 4500 	ldrd	r4, r5, [r3]
 800249c:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <main+0x668>)
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f859 	bl	8000558 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4620      	mov	r0, r4
 80024ac:	4629      	mov	r1, r5
 80024ae:	f7fd fef3 	bl	8000298 <__aeabi_dsub>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	496e      	ldr	r1, [pc, #440]	; (8002670 <main+0x680>)
 80024b8:	e9c1 2300 	strd	r2, r3, [r1]
				  pitch_p 		   		 = p_gain_pitch * pitch_error;
 80024bc:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <main+0x684>)
 80024be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c2:	4b6b      	ldr	r3, [pc, #428]	; (8002670 <main+0x680>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f89e 	bl	8000608 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4969      	ldr	r1, [pc, #420]	; (8002678 <main+0x688>)
 80024d2:	e9c1 2300 	strd	r2, r3, [r1]
				  pitch_error_sum 		+= pitch_error*0.001;
 80024d6:	4b66      	ldr	r3, [pc, #408]	; (8002670 <main+0x680>)
 80024d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024dc:	a35c      	add	r3, pc, #368	; (adr r3, 8002650 <main+0x660>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f891 	bl	8000608 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <main+0x68c>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fd fed2 	bl	800029c <__adddf3>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	495f      	ldr	r1, [pc, #380]	; (800267c <main+0x68c>)
 80024fe:	e9c1 2300 	strd	r2, r3, [r1]
				  pitch_i          		 = i_gain_pitch * pitch_error_sum;
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <main+0x690>)
 8002504:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002508:	4b5c      	ldr	r3, [pc, #368]	; (800267c <main+0x68c>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f87b 	bl	8000608 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	495b      	ldr	r1, [pc, #364]	; (8002684 <main+0x694>)
 8002518:	e9c1 2300 	strd	r2, r3, [r1]
				  pitch_error_derivative = ICM20602.gyro_x;
 800251c:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <main+0x668>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f819 	bl	8000558 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4957      	ldr	r1, [pc, #348]	; (8002688 <main+0x698>)
 800252c:	e9c1 2300 	strd	r2, r3, [r1]
				  pitch_d 			     = d_gain_pitch * pitch_error_derivative;
 8002530:	4b56      	ldr	r3, [pc, #344]	; (800268c <main+0x69c>)
 8002532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002536:	4b54      	ldr	r3, [pc, #336]	; (8002688 <main+0x698>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f864 	bl	8000608 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4952      	ldr	r1, [pc, #328]	; (8002690 <main+0x6a0>)
 8002546:	e9c1 2300 	strd	r2, r3, [r1]
				  pitch_pid 			 = pitch_p + pitch_i + pitch_d;
 800254a:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <main+0x688>)
 800254c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <main+0x694>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fd fea1 	bl	800029c <__adddf3>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <main+0x6a0>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fd fe98 	bl	800029c <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4948      	ldr	r1, [pc, #288]	; (8002694 <main+0x6a4>)
 8002572:	e9c1 2300 	strd	r2, r3, [r1]

				  roll_ref		   		 = (oneShot125[1] - stick_offset_us)*0.8f;// -50 ~ 50 deg
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <main+0x674>)
 8002578:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <main+0x678>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fd fe89 	bl	8000298 <__aeabi_dsub>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	a32e      	add	r3, pc, #184	; (adr r3, 8002648 <main+0x658>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fe f838 	bl	8000608 <__aeabi_dmul>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	493e      	ldr	r1, [pc, #248]	; (8002698 <main+0x6a8>)
 800259e:	e9c1 2300 	strd	r2, r3, [r1]
				  roll_error 	   		 = roll_ref - ICM20602.angle_roll;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <main+0x6a8>)
 80025a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <main+0x668>)
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffd3 	bl	8000558 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4620      	mov	r0, r4
 80025b8:	4629      	mov	r1, r5
 80025ba:	f7fd fe6d 	bl	8000298 <__aeabi_dsub>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4936      	ldr	r1, [pc, #216]	; (800269c <main+0x6ac>)
 80025c4:	e9c1 2300 	strd	r2, r3, [r1]
				  roll_p 		   		 = p_gain_roll * roll_error;
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <main+0x6b0>)
 80025ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <main+0x6ac>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fe f818 	bl	8000608 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4931      	ldr	r1, [pc, #196]	; (80026a4 <main+0x6b4>)
 80025de:	e9c1 2300 	strd	r2, r3, [r1]
				  roll_error_sum 		+= roll_error*0.001;
 80025e2:	4b2e      	ldr	r3, [pc, #184]	; (800269c <main+0x6ac>)
 80025e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e8:	a319      	add	r3, pc, #100	; (adr r3, 8002650 <main+0x660>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fe f80b 	bl	8000608 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <main+0x6b8>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fd fe4c 	bl	800029c <__adddf3>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4927      	ldr	r1, [pc, #156]	; (80026a8 <main+0x6b8>)
 800260a:	e9c1 2300 	strd	r2, r3, [r1]
				  roll_i          		 = i_gain_roll * roll_error_sum;
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <main+0x6bc>)
 8002610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <main+0x6b8>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fd fff5 	bl	8000608 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4923      	ldr	r1, [pc, #140]	; (80026b0 <main+0x6c0>)
 8002624:	e9c1 2300 	strd	r2, r3, [r1]
				  roll_error_derivative  = ICM20602.gyro_y;
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <main+0x668>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ff93 	bl	8000558 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	e03e      	b.n	80026b4 <main+0x6c4>
 8002636:	bf00      	nop
 8002638:	1615ebfb 	.word	0x1615ebfb
 800263c:	404ca5dc 	.word	0x404ca5dc
 8002640:	1615ebfb 	.word	0x1615ebfb
 8002644:	c04ca5dc 	.word	0xc04ca5dc
 8002648:	a0000000 	.word	0xa0000000
 800264c:	3fe99999 	.word	0x3fe99999
 8002650:	d2f1a9fc 	.word	0xd2f1a9fc
 8002654:	3f50624d 	.word	0x3f50624d
 8002658:	2000024c 	.word	0x2000024c
 800265c:	3f733333 	.word	0x3f733333
 8002660:	3d4ccccd 	.word	0x3d4ccccd
 8002664:	20000390 	.word	0x20000390
 8002668:	20000028 	.word	0x20000028
 800266c:	200002b0 	.word	0x200002b0
 8002670:	200002d0 	.word	0x200002d0
 8002674:	20000020 	.word	0x20000020
 8002678:	200002b8 	.word	0x200002b8
 800267c:	200002d8 	.word	0x200002d8
 8002680:	20000298 	.word	0x20000298
 8002684:	200002c0 	.word	0x200002c0
 8002688:	200002e0 	.word	0x200002e0
 800268c:	200002a8 	.word	0x200002a8
 8002690:	200002c8 	.word	0x200002c8
 8002694:	200002e8 	.word	0x200002e8
 8002698:	200002f0 	.word	0x200002f0
 800269c:	20000310 	.word	0x20000310
 80026a0:	20000018 	.word	0x20000018
 80026a4:	200002f8 	.word	0x200002f8
 80026a8:	20000318 	.word	0x20000318
 80026ac:	20000290 	.word	0x20000290
 80026b0:	20000300 	.word	0x20000300
 80026b4:	460b      	mov	r3, r1
 80026b6:	49a2      	ldr	r1, [pc, #648]	; (8002940 <main+0x950>)
 80026b8:	e9c1 2300 	strd	r2, r3, [r1]
				  roll_d 			     = d_gain_roll * roll_error_derivative;
 80026bc:	4ba1      	ldr	r3, [pc, #644]	; (8002944 <main+0x954>)
 80026be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c2:	4b9f      	ldr	r3, [pc, #636]	; (8002940 <main+0x950>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd ff9e 	bl	8000608 <__aeabi_dmul>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	499d      	ldr	r1, [pc, #628]	; (8002948 <main+0x958>)
 80026d2:	e9c1 2300 	strd	r2, r3, [r1]
				  roll_pid 			     = roll_p + roll_i + roll_d;
 80026d6:	4b9d      	ldr	r3, [pc, #628]	; (800294c <main+0x95c>)
 80026d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026dc:	4b9c      	ldr	r3, [pc, #624]	; (8002950 <main+0x960>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fd fddb 	bl	800029c <__adddf3>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	4b96      	ldr	r3, [pc, #600]	; (8002948 <main+0x958>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fd fdd2 	bl	800029c <__adddf3>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4995      	ldr	r1, [pc, #596]	; (8002954 <main+0x964>)
 80026fe:	e9c1 2300 	strd	r2, r3, [r1]
				   * [4]     [3]
				   *	 BCK
				   */


				  Motor1_pulsewidth = oneShot125[0] + 1.25 * roll_pid - 1.25* pitch_pid;  //- GAYJOYGO *  (oneShot125[3] - stick_offset_us);
 8002702:	4b95      	ldr	r3, [pc, #596]	; (8002958 <main+0x968>)
 8002704:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002708:	4b92      	ldr	r3, [pc, #584]	; (8002954 <main+0x964>)
 800270a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b92      	ldr	r3, [pc, #584]	; (800295c <main+0x96c>)
 8002714:	f7fd ff78 	bl	8000608 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4620      	mov	r0, r4
 800271e:	4629      	mov	r1, r5
 8002720:	f7fd fdbc 	bl	800029c <__adddf3>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4614      	mov	r4, r2
 800272a:	461d      	mov	r5, r3
 800272c:	4b8c      	ldr	r3, [pc, #560]	; (8002960 <main+0x970>)
 800272e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b89      	ldr	r3, [pc, #548]	; (800295c <main+0x96c>)
 8002738:	f7fd ff66 	bl	8000608 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4620      	mov	r0, r4
 8002742:	4629      	mov	r1, r5
 8002744:	f7fd fda8 	bl	8000298 <__aeabi_dsub>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4985      	ldr	r1, [pc, #532]	; (8002964 <main+0x974>)
 800274e:	e9c1 2300 	strd	r2, r3, [r1]
				  Motor2_pulsewidth = oneShot125[0] - 1.25 * roll_pid - 1.25* pitch_pid;  //+ GAYJOYGO *  (oneShot125[3] - stick_offset_us);
 8002752:	4b81      	ldr	r3, [pc, #516]	; (8002958 <main+0x968>)
 8002754:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002758:	4b7e      	ldr	r3, [pc, #504]	; (8002954 <main+0x964>)
 800275a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b7e      	ldr	r3, [pc, #504]	; (800295c <main+0x96c>)
 8002764:	f7fd ff50 	bl	8000608 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4620      	mov	r0, r4
 800276e:	4629      	mov	r1, r5
 8002770:	f7fd fd92 	bl	8000298 <__aeabi_dsub>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4614      	mov	r4, r2
 800277a:	461d      	mov	r5, r3
 800277c:	4b78      	ldr	r3, [pc, #480]	; (8002960 <main+0x970>)
 800277e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b75      	ldr	r3, [pc, #468]	; (800295c <main+0x96c>)
 8002788:	f7fd ff3e 	bl	8000608 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4620      	mov	r0, r4
 8002792:	4629      	mov	r1, r5
 8002794:	f7fd fd80 	bl	8000298 <__aeabi_dsub>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4972      	ldr	r1, [pc, #456]	; (8002968 <main+0x978>)
 800279e:	e9c1 2300 	strd	r2, r3, [r1]
				  Motor3_pulsewidth = oneShot125[0] - 1.25 * roll_pid + 1.25* pitch_pid;  //- GAYJOYGO *  (oneShot125[3] - stick_offset_us);
 80027a2:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <main+0x968>)
 80027a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <main+0x964>)
 80027aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <main+0x96c>)
 80027b4:	f7fd ff28 	bl	8000608 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4620      	mov	r0, r4
 80027be:	4629      	mov	r1, r5
 80027c0:	f7fd fd6a 	bl	8000298 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4614      	mov	r4, r2
 80027ca:	461d      	mov	r5, r3
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <main+0x970>)
 80027ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b61      	ldr	r3, [pc, #388]	; (800295c <main+0x96c>)
 80027d8:	f7fd ff16 	bl	8000608 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd5a 	bl	800029c <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	495f      	ldr	r1, [pc, #380]	; (800296c <main+0x97c>)
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
				  Motor4_pulsewidth = oneShot125[0] + 1.25 * roll_pid + 1.25* pitch_pid;  //+ GAYJOYGO *  (oneShot125[3] - stick_offset_us);
 80027f2:	4b59      	ldr	r3, [pc, #356]	; (8002958 <main+0x968>)
 80027f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <main+0x964>)
 80027fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	4b56      	ldr	r3, [pc, #344]	; (800295c <main+0x96c>)
 8002804:	f7fd ff00 	bl	8000608 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4620      	mov	r0, r4
 800280e:	4629      	mov	r1, r5
 8002810:	f7fd fd44 	bl	800029c <__adddf3>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	4b50      	ldr	r3, [pc, #320]	; (8002960 <main+0x970>)
 800281e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <main+0x96c>)
 8002828:	f7fd feee 	bl	8000608 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f7fd fd32 	bl	800029c <__adddf3>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	494c      	ldr	r1, [pc, #304]	; (8002970 <main+0x980>)
 800283e:	e9c1 2300 	strd	r2, r3, [r1]

		  /*===============================================================*/
		  /*                       SUMD Receiver part                      */
		  /*===============================================================*/

		  if(sumd_rx_cplt_flag == 1) //Check whether sumd_rx_buf Receive data is completely filled
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <main+0x984>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d111      	bne.n	800286e <main+0x87e>
		  {
			  sumd_rx_cplt_flag = 0;
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <main+0x984>)
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
			  if(CRC16_check(sumd_rx_buf,  SUMD_BUFFER_LENGTH - 1) == 0) //Check if sumd_rx_buf passed "CRC-16 Sick" Test
 8002850:	2123      	movs	r1, #35	; 0x23
 8002852:	4849      	ldr	r0, [pc, #292]	; (8002978 <main+0x988>)
 8002854:	f000 fed0 	bl	80035f8 <CRC16_check>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d107      	bne.n	800286e <main+0x87e>
			  {
				  SUMD_parsing(sumd_rx_buf, &sumd_ch);
 800285e:	4947      	ldr	r1, [pc, #284]	; (800297c <main+0x98c>)
 8002860:	4845      	ldr	r0, [pc, #276]	; (8002978 <main+0x988>)
 8002862:	f000 fc0b 	bl	800307c <SUMD_parsing>
				  ch_data_to_oneShot125(oneShot125, &sumd_ch);
 8002866:	4945      	ldr	r1, [pc, #276]	; (800297c <main+0x98c>)
 8002868:	483b      	ldr	r0, [pc, #236]	; (8002958 <main+0x968>)
 800286a:	f000 fd15 	bl	8003298 <ch_data_to_oneShot125>
		  /*===============================================================*/
		  /*                        Motor Write Part                       */
		  /*===============================================================*/
		  /*PWM Write with pulsewidth, added min/max saturation for motor pulse width, which is 120us to 250us*/

		  PWM_pulsewidth_us(&MOTOR[0], (Motor1_pulsewidth > 250.0) ? 250.0 :
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <main+0x974>)
 8002870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	4b41      	ldr	r3, [pc, #260]	; (8002980 <main+0x990>)
 800287a:	f7fe f955 	bl	8000b28 <__aeabi_dcmpgt>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <main+0x898>
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <main+0x994>)
 8002886:	e014      	b.n	80028b2 <main+0x8c2>
				  	  	  	  	  	   (Motor1_pulsewidth < 125.0) ? 125.0 :
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <main+0x974>)
 800288a:	e9d3 0100 	ldrd	r0, r1, [r3]
		  PWM_pulsewidth_us(&MOTOR[0], (Motor1_pulsewidth > 250.0) ? 250.0 :
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <main+0x998>)
 8002894:	f7fe f92a 	bl	8000aec <__aeabi_dcmplt>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <main+0x8b2>
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <main+0x99c>)
 80028a0:	e007      	b.n	80028b2 <main+0x8c2>
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <main+0x974>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f9a4 	bl	8000bf8 <__aeabi_d2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	ee00 3a10 	vmov	s0, r3
 80028b6:	4836      	ldr	r0, [pc, #216]	; (8002990 <main+0x9a0>)
 80028b8:	f7fe ff4a 	bl	8001750 <PWM_pulsewidth_us>
				  	  	  	  	  	    Motor1_pulsewidth);

		  PWM_pulsewidth_us(&MOTOR[1], (Motor2_pulsewidth > 250.0) ? 250.0 :
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <main+0x978>)
 80028be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <main+0x990>)
 80028c8:	f7fe f92e 	bl	8000b28 <__aeabi_dcmpgt>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <main+0x8e6>
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <main+0x994>)
 80028d4:	e014      	b.n	8002900 <main+0x910>
				  	  	  	  	  	   (Motor2_pulsewidth < 125.0) ? 125.0 :
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <main+0x978>)
 80028d8:	e9d3 0100 	ldrd	r0, r1, [r3]
		  PWM_pulsewidth_us(&MOTOR[1], (Motor2_pulsewidth > 250.0) ? 250.0 :
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <main+0x998>)
 80028e2:	f7fe f903 	bl	8000aec <__aeabi_dcmplt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <main+0x900>
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <main+0x99c>)
 80028ee:	e007      	b.n	8002900 <main+0x910>
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <main+0x978>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f97d 	bl	8000bf8 <__aeabi_d2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	ee00 3a10 	vmov	s0, r3
 8002904:	4823      	ldr	r0, [pc, #140]	; (8002994 <main+0x9a4>)
 8002906:	f7fe ff23 	bl	8001750 <PWM_pulsewidth_us>
				  	  	  	  	  	    Motor2_pulsewidth);

		  PWM_pulsewidth_us(&MOTOR[2], (Motor3_pulsewidth > 250.0) ? 250.0 :
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <main+0x97c>)
 800290c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <main+0x990>)
 8002916:	f7fe f907 	bl	8000b28 <__aeabi_dcmpgt>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <main+0x934>
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <main+0x994>)
 8002922:	e041      	b.n	80029a8 <main+0x9b8>
				  	  	  	  	  	   (Motor3_pulsewidth < 125.0) ? 125.0 :
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <main+0x97c>)
 8002926:	e9d3 0100 	ldrd	r0, r1, [r3]
		  PWM_pulsewidth_us(&MOTOR[2], (Motor3_pulsewidth > 250.0) ? 250.0 :
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <main+0x998>)
 8002930:	f7fe f8dc 	bl	8000aec <__aeabi_dcmplt>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02e      	beq.n	8002998 <main+0x9a8>
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <main+0x99c>)
 800293c:	e034      	b.n	80029a8 <main+0x9b8>
 800293e:	bf00      	nop
 8002940:	20000320 	.word	0x20000320
 8002944:	200002a0 	.word	0x200002a0
 8002948:	20000308 	.word	0x20000308
 800294c:	200002f8 	.word	0x200002f8
 8002950:	20000300 	.word	0x20000300
 8002954:	20000328 	.word	0x20000328
 8002958:	20000390 	.word	0x20000390
 800295c:	3ff40000 	.word	0x3ff40000
 8002960:	200002e8 	.word	0x200002e8
 8002964:	20000330 	.word	0x20000330
 8002968:	20000338 	.word	0x20000338
 800296c:	20000340 	.word	0x20000340
 8002970:	20000348 	.word	0x20000348
 8002974:	20000439 	.word	0x20000439
 8002978:	20000414 	.word	0x20000414
 800297c:	20000440 	.word	0x20000440
 8002980:	406f4000 	.word	0x406f4000
 8002984:	437a0000 	.word	0x437a0000
 8002988:	405f4000 	.word	0x405f4000
 800298c:	42fa0000 	.word	0x42fa0000
 8002990:	20000350 	.word	0x20000350
 8002994:	20000360 	.word	0x20000360
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <main+0xa14>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7fe f929 	bl	8000bf8 <__aeabi_d2f>
 80029a6:	4603      	mov	r3, r0
 80029a8:	ee00 3a10 	vmov	s0, r3
 80029ac:	4816      	ldr	r0, [pc, #88]	; (8002a08 <main+0xa18>)
 80029ae:	f7fe fecf 	bl	8001750 <PWM_pulsewidth_us>
				  	  	  	  	  	    Motor3_pulsewidth);

		  PWM_pulsewidth_us(&MOTOR[3], (Motor4_pulsewidth > 250.0) ? 250.0 :
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <main+0xa1c>)
 80029b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <main+0xa20>)
 80029be:	f7fe f8b3 	bl	8000b28 <__aeabi_dcmpgt>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <main+0x9dc>
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <main+0xa24>)
 80029ca:	e014      	b.n	80029f6 <main+0xa06>
				  	  	  	  	  	   (Motor4_pulsewidth < 125.0) ? 125.0 :
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <main+0xa1c>)
 80029ce:	e9d3 0100 	ldrd	r0, r1, [r3]
		  PWM_pulsewidth_us(&MOTOR[3], (Motor4_pulsewidth > 250.0) ? 250.0 :
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <main+0xa28>)
 80029d8:	f7fe f888 	bl	8000aec <__aeabi_dcmplt>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <main+0x9f6>
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <main+0xa2c>)
 80029e4:	e007      	b.n	80029f6 <main+0xa06>
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <main+0xa1c>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f902 	bl	8000bf8 <__aeabi_d2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	ee00 3a10 	vmov	s0, r3
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <main+0xa30>)
 80029fc:	f7fe fea8 	bl	8001750 <PWM_pulsewidth_us>
	  if(ICM20602_DataReady() == 1)
 8002a00:	f7ff bb1e 	b.w	8002040 <main+0x50>
 8002a04:	20000340 	.word	0x20000340
 8002a08:	20000370 	.word	0x20000370
 8002a0c:	20000348 	.word	0x20000348
 8002a10:	406f4000 	.word	0x406f4000
 8002a14:	437a0000 	.word	0x437a0000
 8002a18:	405f4000 	.word	0x405f4000
 8002a1c:	42fa0000 	.word	0x42fa0000
 8002a20:	20000380 	.word	0x20000380

08002a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b094      	sub	sp, #80	; 0x50
 8002a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2a:	f107 0320 	add.w	r3, r7, #32
 8002a2e:	2230      	movs	r2, #48	; 0x30
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 fd00 	bl	8005438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <SystemClock_Config+0xc8>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <SystemClock_Config+0xc8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <SystemClock_Config+0xc8>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <SystemClock_Config+0xcc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <SystemClock_Config+0xcc>)
 8002a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <SystemClock_Config+0xcc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a94:	2304      	movs	r3, #4
 8002a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002a98:	2360      	movs	r3, #96	; 0x60
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa4:	f107 0320 	add.w	r3, r7, #32
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fa11 	bl	8003ed0 <HAL_RCC_OscConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ab4:	f000 f876 	bl	8002ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abc:	2302      	movs	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	2103      	movs	r1, #3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fc73 	bl	80043c0 <HAL_RCC_ClockConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ae0:	f000 f860 	bl	8002ba4 <Error_Handler>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3750      	adds	r7, #80	; 0x50
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000

08002af4 <motor_setup>:

/* USER CODE BEGIN 4 */
void motor_setup(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0

	/*PWM Setup------------------------------------------------------*/
	PWM_init(&MOTOR[0], MOTOR_pin[0].port, MOTOR_pin[0].pin);
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <motor_setup+0x98>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <motor_setup+0x98>)
 8002afe:	8892      	ldrh	r2, [r2, #4]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4823      	ldr	r0, [pc, #140]	; (8002b90 <motor_setup+0x9c>)
 8002b04:	f7fe fca2 	bl	800144c <PWM_init>
	PWM_init(&MOTOR[1], MOTOR_pin[1].port, MOTOR_pin[1].pin);
 8002b08:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <motor_setup+0x98>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <motor_setup+0x98>)
 8002b0e:	8992      	ldrh	r2, [r2, #12]
 8002b10:	4619      	mov	r1, r3
 8002b12:	4820      	ldr	r0, [pc, #128]	; (8002b94 <motor_setup+0xa0>)
 8002b14:	f7fe fc9a 	bl	800144c <PWM_init>
	PWM_init(&MOTOR[2], MOTOR_pin[2].port, MOTOR_pin[2].pin);
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <motor_setup+0x98>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <motor_setup+0x98>)
 8002b1e:	8a92      	ldrh	r2, [r2, #20]
 8002b20:	4619      	mov	r1, r3
 8002b22:	481d      	ldr	r0, [pc, #116]	; (8002b98 <motor_setup+0xa4>)
 8002b24:	f7fe fc92 	bl	800144c <PWM_init>
	PWM_init(&MOTOR[3], MOTOR_pin[3].port, MOTOR_pin[3].pin);
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <motor_setup+0x98>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <motor_setup+0x98>)
 8002b2e:	8b92      	ldrh	r2, [r2, #28]
 8002b30:	4619      	mov	r1, r3
 8002b32:	481a      	ldr	r0, [pc, #104]	; (8002b9c <motor_setup+0xa8>)
 8002b34:	f7fe fc8a 	bl	800144c <PWM_init>

	PWM_period_us(&MOTOR[0], 500);
 8002b38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b3c:	4814      	ldr	r0, [pc, #80]	; (8002b90 <motor_setup+0x9c>)
 8002b3e:	f7fe fdf7 	bl	8001730 <PWM_period_us>
	PWM_period_us(&MOTOR[1], 500);
 8002b42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b46:	4813      	ldr	r0, [pc, #76]	; (8002b94 <motor_setup+0xa0>)
 8002b48:	f7fe fdf2 	bl	8001730 <PWM_period_us>
	PWM_period_us(&MOTOR[2], 500);
 8002b4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b50:	4811      	ldr	r0, [pc, #68]	; (8002b98 <motor_setup+0xa4>)
 8002b52:	f7fe fded 	bl	8001730 <PWM_period_us>
	PWM_period_us(&MOTOR[3], 500);
 8002b56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b5a:	4810      	ldr	r0, [pc, #64]	; (8002b9c <motor_setup+0xa8>)
 8002b5c:	f7fe fde8 	bl	8001730 <PWM_period_us>

	PWM_pulsewidth_us(&MOTOR[0], 125.0);
 8002b60:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002ba0 <motor_setup+0xac>
 8002b64:	480a      	ldr	r0, [pc, #40]	; (8002b90 <motor_setup+0x9c>)
 8002b66:	f7fe fdf3 	bl	8001750 <PWM_pulsewidth_us>
	PWM_pulsewidth_us(&MOTOR[1], 125.0);
 8002b6a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002ba0 <motor_setup+0xac>
 8002b6e:	4809      	ldr	r0, [pc, #36]	; (8002b94 <motor_setup+0xa0>)
 8002b70:	f7fe fdee 	bl	8001750 <PWM_pulsewidth_us>
	PWM_pulsewidth_us(&MOTOR[2], 125.0);
 8002b74:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002ba0 <motor_setup+0xac>
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <motor_setup+0xa4>)
 8002b7a:	f7fe fde9 	bl	8001750 <PWM_pulsewidth_us>
	PWM_pulsewidth_us(&MOTOR[3], 125.0);
 8002b7e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002ba0 <motor_setup+0xac>
 8002b82:	4806      	ldr	r0, [pc, #24]	; (8002b9c <motor_setup+0xa8>)
 8002b84:	f7fe fde4 	bl	8001750 <PWM_pulsewidth_us>


}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000030 	.word	0x20000030
 8002b90:	20000350 	.word	0x20000350
 8002b94:	20000360 	.word	0x20000360
 8002b98:	20000370 	.word	0x20000370
 8002b9c:	20000380 	.word	0x20000380
 8002ba0:	42fa0000 	.word	0x42fa0000

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bac:	e7fe      	b.n	8002bac <Error_Handler+0x8>
	...

08002bb0 <__NVIC_GetPriorityGrouping>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0307 	and.w	r3, r3, #7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_EnableIRQ>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	db0b      	blt.n	8002bf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 021f 	and.w	r2, r3, #31
 8002be4:	4907      	ldr	r1, [pc, #28]	; (8002c04 <__NVIC_EnableIRQ+0x38>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2001      	movs	r0, #1
 8002bee:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_SetPriority>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db0a      	blt.n	8002c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	490c      	ldr	r1, [pc, #48]	; (8002c54 <__NVIC_SetPriority+0x4c>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c30:	e00a      	b.n	8002c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4908      	ldr	r1, [pc, #32]	; (8002c58 <__NVIC_SetPriority+0x50>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	440b      	add	r3, r1
 8002c46:	761a      	strb	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000e100 	.word	0xe000e100
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f1c3 0307 	rsb	r3, r3, #7
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	bf28      	it	cs
 8002c7a:	2304      	movcs	r3, #4
 8002c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d902      	bls.n	8002c8c <NVIC_EncodePriority+0x30>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3b03      	subs	r3, #3
 8002c8a:	e000      	b.n	8002c8e <NVIC_EncodePriority+0x32>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	4313      	orrs	r3, r2
         );
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_SPI_SetStandard>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 0210 	bic.w	r2, r3, #16
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	605a      	str	r2, [r3, #4]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_AHB1_GRP1_EnableClock>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	4907      	ldr	r1, [pc, #28]	; (8002d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4013      	ands	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40023800 	.word	0x40023800

08002d18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4013      	ands	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40023800 	.word	0x40023800

08002d48 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b090      	sub	sp, #64	; 0x40
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002d4e:	f107 0318 	add.w	r3, r7, #24
 8002d52:	2228      	movs	r2, #40	; 0x28
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 fb6e 	bl	8005438 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002d6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d70:	f7ff ffd2 	bl	8002d18 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002d74:	2001      	movs	r0, #1
 8002d76:	f7ff ffb7 	bl	8002ce8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = GYRO_SCK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 8002d7a:	23e0      	movs	r3, #224	; 0xe0
 8002d7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002d8e:	2305      	movs	r3, #5
 8002d90:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	463b      	mov	r3, r7
 8002d94:	4619      	mov	r1, r3
 8002d96:	481b      	ldr	r0, [pc, #108]	; (8002e04 <MX_SPI1_Init+0xbc>)
 8002d98:	f001 fe03 	bl	80049a2 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d9c:	f7ff ff08 	bl	8002bb0 <__NVIC_GetPriorityGrouping>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff58 	bl	8002c5c <NVIC_EncodePriority>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4619      	mov	r1, r3
 8002db0:	2023      	movs	r0, #35	; 0x23
 8002db2:	f7ff ff29 	bl	8002c08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8002db6:	2023      	movs	r0, #35	; 0x23
 8002db8:	f7ff ff08 	bl	8002bcc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002dc0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002dc4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8002dd8:	2330      	movs	r3, #48	; 0x30
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002de4:	230a      	movs	r3, #10
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <MX_SPI1_Init+0xc0>)
 8002df0:	f001 ffa7 	bl	8004d42 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002df4:	2100      	movs	r1, #0
 8002df6:	4804      	ldr	r0, [pc, #16]	; (8002e08 <MX_SPI1_Init+0xc0>)
 8002df8:	f7ff ff63 	bl	8002cc2 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dfc:	bf00      	nop
 8002dfe:	3740      	adds	r7, #64	; 0x40
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40013000 	.word	0x40013000

08002e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_MspInit+0x4c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <LL_USART_IsActiveFlag_RXNE>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_USART_ClearFlag_RXNE>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f06f 0220 	mvn.w	r2, #32
 8002e90:	601a      	str	r2, [r3, #0]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_USART_ReceiveData8>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b2db      	uxtb	r3, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <NMI_Handler+0x4>

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f04:	f000 feba 	bl	8003c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1)) // if external command detected
 8002f20:	480a      	ldr	r0, [pc, #40]	; (8002f4c <USART1_IRQHandler+0x30>)
 8002f22:	f7ff ff9b 	bl	8002e5c <LL_USART_IsActiveFlag_RXNE>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <USART1_IRQHandler+0x2a>
	{
	    LL_USART_ClearFlag_RXNE(USART1);
 8002f2c:	4807      	ldr	r0, [pc, #28]	; (8002f4c <USART1_IRQHandler+0x30>)
 8002f2e:	f7ff ffa8 	bl	8002e82 <LL_USART_ClearFlag_RXNE>
	    uart1_rx_data = LL_USART_ReceiveData8(USART1);
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <USART1_IRQHandler+0x30>)
 8002f34:	f7ff ffb3 	bl	8002e9e <LL_USART_ReceiveData8>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <USART1_IRQHandler+0x34>)
 8002f3e:	701a      	strb	r2, [r3, #0]
	    uart1_rx_flag = 1;
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <USART1_IRQHandler+0x38>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	2000043d 	.word	0x2000043d
 8002f54:	2000043c 	.word	0x2000043c

08002f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	static unsigned char cnt = 0; // does not refresh

		  if(LL_USART_IsActiveFlag_RXNE(USART2))
 8002f5c:	4837      	ldr	r0, [pc, #220]	; (800303c <USART2_IRQHandler+0xe4>)
 8002f5e:	f7ff ff7d 	bl	8002e5c <LL_USART_IsActiveFlag_RXNE>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d063      	beq.n	8003030 <USART2_IRQHandler+0xd8>
		  {
		    LL_USART_ClearFlag_RXNE(USART2);
 8002f68:	4834      	ldr	r0, [pc, #208]	; (800303c <USART2_IRQHandler+0xe4>)
 8002f6a:	f7ff ff8a 	bl	8002e82 <LL_USART_ClearFlag_RXNE>
		    uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8002f6e:	4833      	ldr	r0, [pc, #204]	; (800303c <USART2_IRQHandler+0xe4>)
 8002f70:	f7ff ff95 	bl	8002e9e <LL_USART_ReceiveData8>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <USART2_IRQHandler+0xe8>)
 8002f7a:	701a      	strb	r2, [r3, #0]
		    uart2_rx_flag = 1;
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <USART2_IRQHandler+0xec>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]

		    switch (cnt)
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b24      	cmp	r3, #36	; 0x24
 8002f88:	d036      	beq.n	8002ff8 <USART2_IRQHandler+0xa0>
 8002f8a:	2b24      	cmp	r3, #36	; 0x24
 8002f8c:	dc42      	bgt.n	8003014 <USART2_IRQHandler+0xbc>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <USART2_IRQHandler+0x40>
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d012      	beq.n	8002fbc <USART2_IRQHandler+0x64>
 8002f96:	e03d      	b.n	8003014 <USART2_IRQHandler+0xbc>
		    {
		      case 0:
		        if(uart2_rx_data == 0xA8) //graupner vendor id
 8002f98:	4b29      	ldr	r3, [pc, #164]	; (8003040 <USART2_IRQHandler+0xe8>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2ba8      	cmp	r3, #168	; 0xa8
 8002f9e:	d149      	bne.n	8003034 <USART2_IRQHandler+0xdc>
		        {
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8002fa0:	4b29      	ldr	r3, [pc, #164]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <USART2_IRQHandler+0xe8>)
 8002fa8:	7819      	ldrb	r1, [r3, #0]
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <USART2_IRQHandler+0xf4>)
 8002fac:	5499      	strb	r1, [r3, r2]
		          cnt++;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002fb8:	701a      	strb	r2, [r3, #0]
		        }
		        break;
 8002fba:	e03b      	b.n	8003034 <USART2_IRQHandler+0xdc>

		      case 1:
		        if(uart2_rx_data == 0x01) //correct
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <USART2_IRQHandler+0xe8>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10d      	bne.n	8002fe0 <USART2_IRQHandler+0x88>
		        {
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <USART2_IRQHandler+0xe8>)
 8002fcc:	7819      	ldrb	r1, [r3, #0]
 8002fce:	4b1f      	ldr	r3, [pc, #124]	; (800304c <USART2_IRQHandler+0xf4>)
 8002fd0:	5499      	strb	r1, [r3, r2]
		          cnt++;
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002fdc:	701a      	strb	r2, [r3, #0]
		        else //no valid data.
		        {
		          cnt = 0;
		        }

		        break;
 8002fde:	e02a      	b.n	8003036 <USART2_IRQHandler+0xde>
		        else if (uart2_rx_data == 0x81) //Fail Safe mode.
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <USART2_IRQHandler+0xe8>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b81      	cmp	r3, #129	; 0x81
 8002fe6:	d103      	bne.n	8002ff0 <USART2_IRQHandler+0x98>
		         cnt = 0;
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
		        break;
 8002fee:	e022      	b.n	8003036 <USART2_IRQHandler+0xde>
		          cnt = 0;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
		        break;
 8002ff6:	e01e      	b.n	8003036 <USART2_IRQHandler+0xde>

		      case 36:
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <USART2_IRQHandler+0xf0>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <USART2_IRQHandler+0xe8>)
 8003000:	7819      	ldrb	r1, [r3, #0]
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <USART2_IRQHandler+0xf4>)
 8003004:	5499      	strb	r1, [r3, r2]
		          cnt = 0;
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <USART2_IRQHandler+0xf0>)
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
		          sumd_rx_cplt_flag = 1;
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <USART2_IRQHandler+0xf8>)
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]

		        break;
 8003012:	e010      	b.n	8003036 <USART2_IRQHandler+0xde>

		      default:
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <USART2_IRQHandler+0xf0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <USART2_IRQHandler+0xe8>)
 800301c:	7819      	ldrb	r1, [r3, #0]
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <USART2_IRQHandler+0xf4>)
 8003020:	5499      	strb	r1, [r3, r2]
		          cnt++;
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <USART2_IRQHandler+0xf0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <USART2_IRQHandler+0xf0>)
 800302c:	701a      	strb	r2, [r3, #0]
		        break;
 800302e:	e002      	b.n	8003036 <USART2_IRQHandler+0xde>
		    }
		  }
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <USART2_IRQHandler+0xde>
		        break;
 8003034:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40004400 	.word	0x40004400
 8003040:	2000043b 	.word	0x2000043b
 8003044:	2000043a 	.word	0x2000043a
 8003048:	2000043f 	.word	0x2000043f
 800304c:	20000414 	.word	0x20000414
 8003050:	20000439 	.word	0x20000439

08003054 <TIM2_IRQHandler>:

/* USER CODE BEGIN 1 */

void TIM2_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	if(is_UIF(TIM2))
 8003058:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800305c:	f7fe feda 	bl	8001e14 <is_UIF>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d006      	beq.n	8003074 <TIM2_IRQHandler+0x20>
	{                 // Update interrupt
		tim2_1ms_flag = 1;
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <TIM2_IRQHandler+0x24>)
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
		clear_UIF(TIM2);     // clear update interrupt flag
 800306c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003070:	f7fe fede 	bl	8001e30 <clear_UIF>
	}
}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	2000043e 	.word	0x2000043e

0800307c <SUMD_parsing>:
  * @retval none
  */


void SUMD_parsing(uint8_t sumd_rx_buf[], SUMD_channel sumd_ch[])
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	sumd_ch ->  ch1 =  sumd_rx_buf[3]  << 8  |  sumd_rx_buf[4]  >> 3;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3303      	adds	r3, #3
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	b21a      	sxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	08db      	lsrs	r3, r3, #3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	b21b      	sxth	r3, r3
 800309c:	4313      	orrs	r3, r2
 800309e:	b21b      	sxth	r3, r3
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	801a      	strh	r2, [r3, #0]
	sumd_ch ->  ch2 =  sumd_rx_buf[5]  << 8  |  sumd_rx_buf[6]  >> 3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3305      	adds	r3, #5
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3306      	adds	r3, #6
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	08db      	lsrs	r3, r3, #3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	4313      	orrs	r3, r2
 80030be:	b21b      	sxth	r3, r3
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	805a      	strh	r2, [r3, #2]
	sumd_ch ->  ch3 =  sumd_rx_buf[7]  << 8  |  sumd_rx_buf[8]  >> 3;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3307      	adds	r3, #7
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3308      	adds	r3, #8
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	b21b      	sxth	r3, r3
 80030dc:	4313      	orrs	r3, r2
 80030de:	b21b      	sxth	r3, r3
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	809a      	strh	r2, [r3, #4]
	sumd_ch ->  ch4 =  sumd_rx_buf[9]  << 8  |  sumd_rx_buf[10] >> 3;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3309      	adds	r3, #9
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	330a      	adds	r3, #10
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	b21b      	sxth	r3, r3
 80030fc:	4313      	orrs	r3, r2
 80030fe:	b21b      	sxth	r3, r3
 8003100:	b29a      	uxth	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	80da      	strh	r2, [r3, #6]
	sumd_ch ->  ch5 =  sumd_rx_buf[11] << 8  |  sumd_rx_buf[12] >> 3;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	330b      	adds	r3, #11
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	b21a      	sxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	330c      	adds	r3, #12
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	08db      	lsrs	r3, r3, #3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	b21b      	sxth	r3, r3
 800311c:	4313      	orrs	r3, r2
 800311e:	b21b      	sxth	r3, r3
 8003120:	b29a      	uxth	r2, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	811a      	strh	r2, [r3, #8]

	sumd_ch ->  ch6 =  sumd_rx_buf[13] << 8  |  sumd_rx_buf[14] >> 3;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	330d      	adds	r3, #13
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	b21a      	sxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	330e      	adds	r3, #14
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	08db      	lsrs	r3, r3, #3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	b21b      	sxth	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	b21b      	sxth	r3, r3
 8003140:	b29a      	uxth	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	815a      	strh	r2, [r3, #10]
	sumd_ch ->  ch7 =  sumd_rx_buf[15] << 8  |  sumd_rx_buf[16] >> 3;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	330f      	adds	r3, #15
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	b21a      	sxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3310      	adds	r3, #16
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	b21b      	sxth	r3, r3
 800315c:	4313      	orrs	r3, r2
 800315e:	b21b      	sxth	r3, r3
 8003160:	b29a      	uxth	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	819a      	strh	r2, [r3, #12]
	sumd_ch ->  ch8 =  sumd_rx_buf[17] << 8  |  sumd_rx_buf[18] >> 3;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3311      	adds	r3, #17
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	b21a      	sxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3312      	adds	r3, #18
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	08db      	lsrs	r3, r3, #3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	b21b      	sxth	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b21b      	sxth	r3, r3
 8003180:	b29a      	uxth	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	81da      	strh	r2, [r3, #14]
	sumd_ch ->  ch9 =  sumd_rx_buf[19] << 8  |  sumd_rx_buf[20] >> 3;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3313      	adds	r3, #19
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	b21a      	sxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3314      	adds	r3, #20
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	b21b      	sxth	r3, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	b21b      	sxth	r3, r3
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	821a      	strh	r2, [r3, #16]
	sumd_ch ->  ch10 = sumd_rx_buf[21] << 8  |  sumd_rx_buf[22] >> 3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3315      	adds	r3, #21
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	b21a      	sxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3316      	adds	r3, #22
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	08db      	lsrs	r3, r3, #3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	b21b      	sxth	r3, r3
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	825a      	strh	r2, [r3, #18]

	sumd_ch ->  ch11 = sumd_rx_buf[23] << 8  |  sumd_rx_buf[24] >> 3;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3317      	adds	r3, #23
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	b21a      	sxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3318      	adds	r3, #24
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	08db      	lsrs	r3, r3, #3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	b21b      	sxth	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	b21b      	sxth	r3, r3
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	829a      	strh	r2, [r3, #20]
	sumd_ch ->  ch12 = sumd_rx_buf[25] << 8  |  sumd_rx_buf[26] >> 3;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3319      	adds	r3, #25
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	331a      	adds	r3, #26
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	08db      	lsrs	r3, r3, #3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	b21b      	sxth	r3, r3
 80031fc:	4313      	orrs	r3, r2
 80031fe:	b21b      	sxth	r3, r3
 8003200:	b29a      	uxth	r2, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	82da      	strh	r2, [r3, #22]
	sumd_ch ->  ch13 = sumd_rx_buf[27] << 8  |  sumd_rx_buf[28] >> 3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	331b      	adds	r3, #27
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	b21a      	sxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	331c      	adds	r3, #28
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	b21b      	sxth	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b21b      	sxth	r3, r3
 8003220:	b29a      	uxth	r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	831a      	strh	r2, [r3, #24]
	sumd_ch ->  ch14 = sumd_rx_buf[29] << 8  |  sumd_rx_buf[30] >> 3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	331d      	adds	r3, #29
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	b21a      	sxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	331e      	adds	r3, #30
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	08db      	lsrs	r3, r3, #3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	b21b      	sxth	r3, r3
 800323c:	4313      	orrs	r3, r2
 800323e:	b21b      	sxth	r3, r3
 8003240:	b29a      	uxth	r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	835a      	strh	r2, [r3, #26]
	sumd_ch ->  ch15 = sumd_rx_buf[31] << 8  |  sumd_rx_buf[32] >> 3;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	331f      	adds	r3, #31
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	b21a      	sxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3320      	adds	r3, #32
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	08db      	lsrs	r3, r3, #3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	b21b      	sxth	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b21b      	sxth	r3, r3
 8003260:	b29a      	uxth	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	839a      	strh	r2, [r3, #28]

	sumd_ch ->  ch16 = sumd_rx_buf[33] << 8  |  sumd_rx_buf[34] >> 3;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3321      	adds	r3, #33	; 0x21
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	b21a      	sxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3322      	adds	r3, #34	; 0x22
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	08db      	lsrs	r3, r3, #3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	b21b      	sxth	r3, r3
 800327c:	4313      	orrs	r3, r2
 800327e:	b21b      	sxth	r3, r3
 8003280:	b29a      	uxth	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	83da      	strh	r2, [r3, #30]

}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	0000      	movs	r0, r0
 8003294:	0000      	movs	r0, r0
	...

08003298 <ch_data_to_oneShot125>:
  * @param  oneShot125[]: converted 125-250 us values are saved here
  * 		sumd_ch[]: function gets SUMD channel data from here
  * @retval none
  */
void ch_data_to_oneShot125(double oneShot125[], SUMD_channel sumd_ch[])
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]

		oneShot125[0] = (sumd_ch -> ch1)/51.2 - 45.234375;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd f944 	bl	8000534 <__aeabi_i2d>
 80032ac:	a3ce      	add	r3, pc, #824	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f7fd fad3 	bl	800085c <__aeabi_ddiv>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	a3cc      	add	r3, pc, #816	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fc ffe8 	bl	8000298 <__aeabi_dsub>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	e9c1 2300 	strd	r2, r3, [r1]
		oneShot125[1] = (sumd_ch -> ch2)/51.2 - 45.234375;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	885b      	ldrh	r3, [r3, #2]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f92c 	bl	8000534 <__aeabi_i2d>
 80032dc:	a3c2      	add	r3, pc, #776	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f7fd fabb 	bl	800085c <__aeabi_ddiv>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f103 0408 	add.w	r4, r3, #8
 80032f4:	a3be      	add	r3, pc, #760	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fc ffcd 	bl	8000298 <__aeabi_dsub>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[2] = (sumd_ch -> ch3)/51.2 - 45.234375;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	889b      	ldrh	r3, [r3, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f912 	bl	8000534 <__aeabi_i2d>
 8003310:	a3b5      	add	r3, pc, #724	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd faa1 	bl	800085c <__aeabi_ddiv>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f103 0410 	add.w	r4, r3, #16
 8003328:	a3b1      	add	r3, pc, #708	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fc ffb3 	bl	8000298 <__aeabi_dsub>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[3] = (sumd_ch -> ch4)/51.2 - 45.234375;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	88db      	ldrh	r3, [r3, #6]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f8f8 	bl	8000534 <__aeabi_i2d>
 8003344:	a3a8      	add	r3, pc, #672	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f7fd fa87 	bl	800085c <__aeabi_ddiv>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f103 0418 	add.w	r4, r3, #24
 800335c:	a3a4      	add	r3, pc, #656	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f7fc ff99 	bl	8000298 <__aeabi_dsub>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[4] = (sumd_ch -> ch5)/51.2 - 45.234375;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	891b      	ldrh	r3, [r3, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd f8de 	bl	8000534 <__aeabi_i2d>
 8003378:	a39b      	add	r3, pc, #620	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fd fa6d 	bl	800085c <__aeabi_ddiv>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f103 0420 	add.w	r4, r3, #32
 8003390:	a397      	add	r3, pc, #604	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fc ff7f 	bl	8000298 <__aeabi_dsub>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	e9c4 2300 	strd	r2, r3, [r4]

		oneShot125[5] = (sumd_ch -> ch6)/51.2 - 45.234375;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	895b      	ldrh	r3, [r3, #10]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f8c4 	bl	8000534 <__aeabi_i2d>
 80033ac:	a38e      	add	r3, pc, #568	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd fa53 	bl	800085c <__aeabi_ddiv>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80033c4:	a38a      	add	r3, pc, #552	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f7fc ff65 	bl	8000298 <__aeabi_dsub>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[6] = (sumd_ch -> ch7)/51.2 - 45.234375;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	899b      	ldrh	r3, [r3, #12]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8aa 	bl	8000534 <__aeabi_i2d>
 80033e0:	a381      	add	r3, pc, #516	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd fa39 	bl	800085c <__aeabi_ddiv>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80033f8:	a37d      	add	r3, pc, #500	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f7fc ff4b 	bl	8000298 <__aeabi_dsub>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[7] = (sumd_ch -> ch8)/51.2 - 45.234375;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	89db      	ldrh	r3, [r3, #14]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f890 	bl	8000534 <__aeabi_i2d>
 8003414:	a374      	add	r3, pc, #464	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd fa1f 	bl	800085c <__aeabi_ddiv>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800342c:	a370      	add	r3, pc, #448	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fc ff31 	bl	8000298 <__aeabi_dsub>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[8] = (sumd_ch -> ch9)/51.2 - 45.234375;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	8a1b      	ldrh	r3, [r3, #16]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f876 	bl	8000534 <__aeabi_i2d>
 8003448:	a367      	add	r3, pc, #412	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd fa05 	bl	800085c <__aeabi_ddiv>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8003460:	a363      	add	r3, pc, #396	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fc ff17 	bl	8000298 <__aeabi_dsub>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[9] = (sumd_ch -> ch10)/51.2 - 45.234375;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	8a5b      	ldrh	r3, [r3, #18]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f85c 	bl	8000534 <__aeabi_i2d>
 800347c:	a35a      	add	r3, pc, #360	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f9eb 	bl	800085c <__aeabi_ddiv>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8003494:	a356      	add	r3, pc, #344	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f7fc fefd 	bl	8000298 <__aeabi_dsub>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	e9c4 2300 	strd	r2, r3, [r4]

		oneShot125[10] = (sumd_ch -> ch11)/51.2 - 45.234375;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	8a9b      	ldrh	r3, [r3, #20]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd f842 	bl	8000534 <__aeabi_i2d>
 80034b0:	a34d      	add	r3, pc, #308	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f9d1 	bl	800085c <__aeabi_ddiv>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80034c8:	a349      	add	r3, pc, #292	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fc fee3 	bl	8000298 <__aeabi_dsub>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[11] = (sumd_ch -> ch12)/51.2 - 45.234375;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	8adb      	ldrh	r3, [r3, #22]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f828 	bl	8000534 <__aeabi_i2d>
 80034e4:	a340      	add	r3, pc, #256	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fd f9b7 	bl	800085c <__aeabi_ddiv>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f103 0458 	add.w	r4, r3, #88	; 0x58
 80034fc:	a33c      	add	r3, pc, #240	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fc fec9 	bl	8000298 <__aeabi_dsub>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[12] = (sumd_ch -> ch13)/51.2 - 45.234375;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	8b1b      	ldrh	r3, [r3, #24]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f80e 	bl	8000534 <__aeabi_i2d>
 8003518:	a333      	add	r3, pc, #204	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f7fd f99d 	bl	800085c <__aeabi_ddiv>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003530:	a32f      	add	r3, pc, #188	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fc feaf 	bl	8000298 <__aeabi_dsub>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[13] = (sumd_ch -> ch14)/51.2 - 45.234375;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	8b5b      	ldrh	r3, [r3, #26]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fc fff4 	bl	8000534 <__aeabi_i2d>
 800354c:	a326      	add	r3, pc, #152	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fd f983 	bl	800085c <__aeabi_ddiv>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8003564:	a322      	add	r3, pc, #136	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fc fe95 	bl	8000298 <__aeabi_dsub>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[15] = (sumd_ch -> ch15)/51.2 - 45.234375;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	8b9b      	ldrh	r3, [r3, #28]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc ffda 	bl	8000534 <__aeabi_i2d>
 8003580:	a319      	add	r3, pc, #100	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fd f969 	bl	800085c <__aeabi_ddiv>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003598:	a315      	add	r3, pc, #84	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fc fe7b 	bl	8000298 <__aeabi_dsub>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	e9c4 2300 	strd	r2, r3, [r4]

		oneShot125[15] = (sumd_ch -> ch16)/51.2 - 45.234375;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	8bdb      	ldrh	r3, [r3, #30]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fc ffc0 	bl	8000534 <__aeabi_i2d>
 80035b4:	a30c      	add	r3, pc, #48	; (adr r3, 80035e8 <ch_data_to_oneShot125+0x350>)
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f7fd f94f 	bl	800085c <__aeabi_ddiv>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80035cc:	a308      	add	r3, pc, #32	; (adr r3, 80035f0 <ch_data_to_oneShot125+0x358>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fc fe61 	bl	8000298 <__aeabi_dsub>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	e9c4 2300 	strd	r2, r3, [r4]


}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd90      	pop	{r4, r7, pc}
 80035e6:	bf00      	nop
 80035e8:	9999999a 	.word	0x9999999a
 80035ec:	40499999 	.word	0x40499999
 80035f0:	00000000 	.word	0x00000000
 80035f4:	40469e00 	.word	0x40469e00

080035f8 <CRC16_check>:
  * @brief  Check whether CRC16-Sick output is valid
  * @param  sumd received data buffer array, length of the buffer.
  * @retval calculated crc validity. 0 when valid.
  */
uint8_t CRC16_check(uint8_t sumd_rx_buf[], uint8_t len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	73bb      	strb	r3, [r7, #14]
 800360c:	e00d      	b.n	800362a <CRC16_check+0x32>
    {
        crc = CRC16(crc,sumd_rx_buf[i]);
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	b298      	uxth	r0, r3
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	4619      	mov	r1, r3
 800361c:	f000 f80e 	bl	800363c <CRC16>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++)
 8003624:	7bbb      	ldrb	r3, [r7, #14]
 8003626:	3301      	adds	r3, #1
 8003628:	73bb      	strb	r3, [r7, #14]
 800362a:	7bba      	ldrb	r2, [r7, #14]
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	429a      	cmp	r2, r3
 8003630:	d3ed      	bcc.n	800360e <CRC16_check+0x16>
    }

    return crc;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <CRC16>:
  * @brief  calculate CRC16-Sick
  * @param
  * @retval calculated crc.
  */
uint16_t CRC16(uint16_t crc, uint8_t value)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	460a      	mov	r2, r1
 8003646:	80fb      	strh	r3, [r7, #6]
 8003648:	4613      	mov	r3, r2
 800364a:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	crc = crc ^ (int16_t)value<<8;
 800364c:	797b      	ldrb	r3, [r7, #5]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	b21a      	sxth	r2, r3
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	4053      	eors	r3, r2
 8003658:	b21b      	sxth	r3, r3
 800365a:	80fb      	strh	r3, [r7, #6]
	for(i=0; i<8; i++)
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e013      	b.n	800368a <CRC16+0x4e>
		{
		 if (crc & 0x8000)
 8003662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	da09      	bge.n	800367e <CRC16+0x42>
		 crc = (crc << 1) ^ CRC_POLYNOME;
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	b21b      	sxth	r3, r3
 8003670:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b21b      	sxth	r3, r3
 800367a:	80fb      	strh	r3, [r7, #6]
 800367c:	e002      	b.n	8003684 <CRC16+0x48>

		 else
		 crc = (crc << 1);
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	80fb      	strh	r3, [r7, #6]
	for(i=0; i<8; i++)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	3301      	adds	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b07      	cmp	r3, #7
 800368e:	d9e8      	bls.n	8003662 <CRC16+0x26>
		}
	return crc;
 8003690:	88fb      	ldrh	r3, [r7, #6]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  return 1;
 80036a2:	2301      	movs	r3, #1
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_kill>:

int _kill(int pid, int sig)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036b8:	f001 fe86 	bl	80053c8 <__errno>
 80036bc:	4603      	mov	r3, r0
 80036be:	2216      	movs	r2, #22
 80036c0:	601a      	str	r2, [r3, #0]
  return -1;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <_exit>:

void _exit (int status)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036d6:	f04f 31ff 	mov.w	r1, #4294967295
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ffe7 	bl	80036ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80036e0:	e7fe      	b.n	80036e0 <_exit+0x12>

080036e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e00a      	b.n	800370a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036f4:	f3af 8000 	nop.w
 80036f8:	4601      	mov	r1, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	60ba      	str	r2, [r7, #8]
 8003700:	b2ca      	uxtb	r2, r1
 8003702:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	dbf0      	blt.n	80036f4 <_read+0x12>
  }

  return len;
 8003712:	687b      	ldr	r3, [r7, #4]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_close>:
  }
  return len;
}

int _close(int file)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003744:	605a      	str	r2, [r3, #4]
  return 0;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <_isatty>:

int _isatty(int file)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <_sbrk+0x5c>)
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <_sbrk+0x60>)
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <_sbrk+0x64>)
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <_sbrk+0x68>)
 80037a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d207      	bcs.n	80037c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b4:	f001 fe08 	bl	80053c8 <__errno>
 80037b8:	4603      	mov	r3, r0
 80037ba:	220c      	movs	r2, #12
 80037bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
 80037c2:	e009      	b.n	80037d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <_sbrk+0x64>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <_sbrk+0x64>)
 80037d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20020000 	.word	0x20020000
 80037e4:	00000400 	.word	0x00000400
 80037e8:	20000460 	.word	0x20000460
 80037ec:	20000478 	.word	0x20000478

080037f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <SystemInit+0x20>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	4a05      	ldr	r2, [pc, #20]	; (8003810 <SystemInit+0x20>)
 80037fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_GetPriorityGrouping>:
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	; (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	; (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	; (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_USART_Enable>:
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60da      	str	r2, [r3, #12]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_USART_ConfigAsyncMode>:
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <LL_AHB1_GRP1_EnableClock>:
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800397e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4313      	orrs	r3, r2
 8003986:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800398a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4013      	ands	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40023800 	.word	0x40023800

080039a4 <LL_APB1_GRP1_EnableClock>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b0:	4907      	ldr	r1, [pc, #28]	; (80039d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4013      	ands	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40023800 	.word	0x40023800

080039d4 <LL_APB2_GRP1_EnableClock>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4013      	ands	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40023800 	.word	0x40023800

08003a04 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	; 0x38
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003a0a:	f107 031c 	add.w	r3, r7, #28
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	611a      	str	r2, [r3, #16]
 8003a1a:	615a      	str	r2, [r3, #20]
 8003a1c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003a2e:	2010      	movs	r0, #16
 8003a30:	f7ff ffd0 	bl	80039d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7ff ff9d 	bl	8003974 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = SUMD_TX_Pin|SUMD_RX_Pin;
 8003a3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a40:	2302      	movs	r3, #2
 8003a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003a50:	2307      	movs	r3, #7
 8003a52:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4818      	ldr	r0, [pc, #96]	; (8003abc <MX_USART1_UART_Init+0xb8>)
 8003a5a:	f000 ffa2 	bl	80049a2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003a5e:	f7ff fed9 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2200      	movs	r2, #0
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff29 	bl	80038c0 <NVIC_EncodePriority>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4619      	mov	r1, r3
 8003a72:	2025      	movs	r0, #37	; 0x25
 8003a74:	f7ff fefa 	bl	800386c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003a78:	2025      	movs	r0, #37	; 0x25
 8003a7a:	f7ff fed9 	bl	8003830 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003a7e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003a82:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003a90:	230c      	movs	r3, #12
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4807      	ldr	r0, [pc, #28]	; (8003ac0 <MX_USART1_UART_Init+0xbc>)
 8003aa4:	f001 fc06 	bl	80052b4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003aa8:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <MX_USART1_UART_Init+0xbc>)
 8003aaa:	f7ff ff4c 	bl	8003946 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003aae:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <MX_USART1_UART_Init+0xbc>)
 8003ab0:	f7ff ff39 	bl	8003926 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ab4:	bf00      	nop
 8003ab6:	3738      	adds	r7, #56	; 0x38
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40011000 	.word	0x40011000

08003ac4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	611a      	str	r2, [r3, #16]
 8003ada:	615a      	str	r2, [r3, #20]
 8003adc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]
 8003aec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003aee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003af2:	f7ff ff57 	bl	80039a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7ff ff3c 	bl	8003974 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = BLUETOOTH_TX_Pin|BLUETOOTH_RX_Pin;
 8003afc:	230c      	movs	r3, #12
 8003afe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b00:	2302      	movs	r3, #2
 8003b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b04:	2303      	movs	r3, #3
 8003b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003b10:	2307      	movs	r3, #7
 8003b12:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4818      	ldr	r0, [pc, #96]	; (8003b7c <MX_USART2_UART_Init+0xb8>)
 8003b1a:	f000 ff42 	bl	80049a2 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003b1e:	f7ff fe79 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2200      	movs	r2, #0
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fec9 	bl	80038c0 <NVIC_EncodePriority>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4619      	mov	r1, r3
 8003b32:	2026      	movs	r0, #38	; 0x26
 8003b34:	f7ff fe9a 	bl	800386c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003b38:	2026      	movs	r0, #38	; 0x26
 8003b3a:	f7ff fe79 	bl	8003830 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003b3e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003b42:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003b50:	230c      	movs	r3, #12
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003b5c:	f107 031c 	add.w	r3, r7, #28
 8003b60:	4619      	mov	r1, r3
 8003b62:	4807      	ldr	r0, [pc, #28]	; (8003b80 <MX_USART2_UART_Init+0xbc>)
 8003b64:	f001 fba6 	bl	80052b4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <MX_USART2_UART_Init+0xbc>)
 8003b6a:	f7ff feec 	bl	8003946 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003b6e:	4804      	ldr	r0, [pc, #16]	; (8003b80 <MX_USART2_UART_Init+0xbc>)
 8003b70:	f7ff fed9 	bl	8003926 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b74:	bf00      	nop
 8003b76:	3738      	adds	r7, #56	; 0x38
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	40004400 	.word	0x40004400

08003b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b88:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b8a:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b8c:	4a0e      	ldr	r2, [pc, #56]	; (8003bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b90:	e002      	b.n	8003b98 <LoopCopyDataInit>

08003b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b96:	3304      	adds	r3, #4

08003b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b9c:	d3f9      	bcc.n	8003b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ba0:	4c0b      	ldr	r4, [pc, #44]	; (8003bd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba4:	e001      	b.n	8003baa <LoopFillZerobss>

08003ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba8:	3204      	adds	r2, #4

08003baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bac:	d3fb      	bcc.n	8003ba6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bae:	f7ff fe1f 	bl	80037f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bb2:	f001 fc0f 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb6:	f7fe fa1b 	bl	8001ff0 <main>
  bx  lr    
 8003bba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc4:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003bc8:	08009c30 	.word	0x08009c30
  ldr r2, =_sbss
 8003bcc:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003bd0:	20000478 	.word	0x20000478

08003bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd4:	e7fe      	b.n	8003bd4 <ADC_IRQHandler>
	...

08003bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_Init+0x40>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <HAL_Init+0x40>)
 8003be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_Init+0x40>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <HAL_Init+0x40>)
 8003bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_Init+0x40>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <HAL_Init+0x40>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c00:	2003      	movs	r0, #3
 8003c02:	f000 f931 	bl	8003e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c06:	200f      	movs	r0, #15
 8003c08:	f000 f808 	bl	8003c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c0c:	f7ff f8fe 	bl	8002e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00

08003c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_InitTick+0x54>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_InitTick+0x58>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f93b 	bl	8003eb6 <HAL_SYSTICK_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00e      	b.n	8003c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b0f      	cmp	r3, #15
 8003c4e:	d80a      	bhi.n	8003c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c50:	2200      	movs	r2, #0
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f000 f911 	bl	8003e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c5c:	4a06      	ldr	r2, [pc, #24]	; (8003c78 <HAL_InitTick+0x5c>)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000050 	.word	0x20000050
 8003c74:	20000058 	.word	0x20000058
 8003c78:	20000054 	.word	0x20000054

08003c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_IncTick+0x20>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_IncTick+0x24>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_IncTick+0x24>)
 8003c8e:	6013      	str	r3, [r2, #0]
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000058 	.word	0x20000058
 8003ca0:	20000464 	.word	0x20000464

08003ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	; (8003cb8 <HAL_GetTick+0x14>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000464 	.word	0x20000464

08003cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cc4:	f7ff ffee 	bl	8003ca4 <HAL_GetTick>
 8003cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d005      	beq.n	8003ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_Delay+0x44>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ce2:	bf00      	nop
 8003ce4:	f7ff ffde 	bl	8003ca4 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d8f7      	bhi.n	8003ce4 <HAL_Delay+0x28>
  {
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000058 	.word	0x20000058

08003d04 <__NVIC_SetPriorityGrouping>:
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d20:	4013      	ands	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d36:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	60d3      	str	r3, [r2, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <__NVIC_GetPriorityGrouping>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <__NVIC_GetPriorityGrouping+0x18>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	f003 0307 	and.w	r3, r3, #7
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <__NVIC_SetPriority>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db0a      	blt.n	8003d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	490c      	ldr	r1, [pc, #48]	; (8003db4 <__NVIC_SetPriority+0x4c>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	0112      	lsls	r2, r2, #4
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d90:	e00a      	b.n	8003da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4908      	ldr	r1, [pc, #32]	; (8003db8 <__NVIC_SetPriority+0x50>)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	440b      	add	r3, r1
 8003da6:	761a      	strb	r2, [r3, #24]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_EncodePriority>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf28      	it	cs
 8003dda:	2304      	movcs	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d902      	bls.n	8003dec <NVIC_EncodePriority+0x30>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3b03      	subs	r3, #3
 8003dea:	e000      	b.n	8003dee <NVIC_EncodePriority+0x32>
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	401a      	ands	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	4313      	orrs	r3, r2
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	; 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e34:	d301      	bcc.n	8003e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00f      	b.n	8003e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <SysTick_Config+0x40>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e42:	210f      	movs	r1, #15
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	f7ff ff8e 	bl	8003d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <SysTick_Config+0x40>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <SysTick_Config+0x40>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff47 	bl	8003d04 <__NVIC_SetPriorityGrouping>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e90:	f7ff ff5c 	bl	8003d4c <__NVIC_GetPriorityGrouping>
 8003e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff8e 	bl	8003dbc <NVIC_EncodePriority>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff5d 	bl	8003d68 <__NVIC_SetPriority>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ffb0 	bl	8003e24 <SysTick_Config>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e267      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d075      	beq.n	8003fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eee:	4b88      	ldr	r3, [pc, #544]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d00c      	beq.n	8003f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efa:	4b85      	ldr	r3, [pc, #532]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d112      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f06:	4b82      	ldr	r3, [pc, #520]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	4b7e      	ldr	r3, [pc, #504]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d05b      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x108>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d157      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e242      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x74>
 8003f36:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a75      	ldr	r2, [pc, #468]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e01d      	b.n	8003f80 <HAL_RCC_OscConfig+0xb0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x98>
 8003f4e:	4b70      	ldr	r3, [pc, #448]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6f      	ldr	r2, [pc, #444]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6c      	ldr	r2, [pc, #432]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xb0>
 8003f68:	4b69      	ldr	r3, [pc, #420]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a68      	ldr	r2, [pc, #416]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b66      	ldr	r3, [pc, #408]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a65      	ldr	r2, [pc, #404]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7ff fe8c 	bl	8003ca4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f90:	f7ff fe88 	bl	8003ca4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e207      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b5b      	ldr	r3, [pc, #364]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0xc0>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7ff fe78 	bl	8003ca4 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7ff fe74 	bl	8003ca4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1f3      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	4b51      	ldr	r3, [pc, #324]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xe8>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d063      	beq.n	80040ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffe:	4b44      	ldr	r3, [pc, #272]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	4b41      	ldr	r3, [pc, #260]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x152>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e1c7      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4937      	ldr	r1, [pc, #220]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	e03a      	b.n	80040ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_OscConfig+0x244>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7ff fe2d 	bl	8003ca4 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404e:	f7ff fe29 	bl	8003ca4 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1a8      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b28      	ldr	r3, [pc, #160]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4925      	ldr	r1, [pc, #148]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	e015      	b.n	80040ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b24      	ldr	r3, [pc, #144]	; (8004114 <HAL_RCC_OscConfig+0x244>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7ff fe0c 	bl	8003ca4 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004090:	f7ff fe08 	bl	8003ca4 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e187      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d036      	beq.n	8004128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_RCC_OscConfig+0x248>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7ff fdec 	bl	8003ca4 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d0:	f7ff fde8 	bl	8003ca4 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e167      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCC_OscConfig+0x240>)
 80040e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x200>
 80040ee:	e01b      	b.n	8004128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_OscConfig+0x248>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f6:	f7ff fdd5 	bl	8003ca4 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	e00e      	b.n	800411c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fe:	f7ff fdd1 	bl	8003ca4 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d907      	bls.n	800411c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e150      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
 8004110:	40023800 	.word	0x40023800
 8004114:	42470000 	.word	0x42470000
 8004118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	4b88      	ldr	r3, [pc, #544]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 800411e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ea      	bne.n	80040fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8097 	beq.w	8004264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	4b7d      	ldr	r3, [pc, #500]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a7c      	ldr	r2, [pc, #496]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b7a      	ldr	r3, [pc, #488]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b77      	ldr	r3, [pc, #476]	; (8004344 <HAL_RCC_OscConfig+0x474>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b74      	ldr	r3, [pc, #464]	; (8004344 <HAL_RCC_OscConfig+0x474>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a73      	ldr	r2, [pc, #460]	; (8004344 <HAL_RCC_OscConfig+0x474>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7ff fd91 	bl	8003ca4 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7ff fd8d 	bl	8003ca4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e10c      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <HAL_RCC_OscConfig+0x474>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x2ea>
 80041ac:	4b64      	ldr	r3, [pc, #400]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a63      	ldr	r2, [pc, #396]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	e01c      	b.n	80041f4 <HAL_RCC_OscConfig+0x324>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x30c>
 80041c2:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a5e      	ldr	r2, [pc, #376]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
 80041ce:	4b5c      	ldr	r3, [pc, #368]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a5b      	ldr	r2, [pc, #364]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0x324>
 80041dc:	4b58      	ldr	r3, [pc, #352]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	4a57      	ldr	r2, [pc, #348]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70
 80041e8:	4b55      	ldr	r3, [pc, #340]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	4a54      	ldr	r2, [pc, #336]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ee:	f023 0304 	bic.w	r3, r3, #4
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7ff fd52 	bl	8003ca4 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7ff fd4e 	bl	8003ca4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0cb      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	4b49      	ldr	r3, [pc, #292]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ee      	beq.n	8004204 <HAL_RCC_OscConfig+0x334>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004228:	f7ff fd3c 	bl	8003ca4 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7ff fd38 	bl	8003ca4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0b5      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ee      	bne.n	8004230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004258:	4b39      	ldr	r3, [pc, #228]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	4a38      	ldr	r2, [pc, #224]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a1 	beq.w	80043b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800426e:	4b34      	ldr	r3, [pc, #208]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b08      	cmp	r3, #8
 8004278:	d05c      	beq.n	8004334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d141      	bne.n	8004306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCC_OscConfig+0x478>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7ff fd0c 	bl	8003ca4 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004290:	f7ff fd08 	bl	8003ca4 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e087      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b27      	ldr	r3, [pc, #156]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	491b      	ldr	r1, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d8:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_RCC_OscConfig+0x478>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7ff fce1 	bl	8003ca4 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e6:	f7ff fcdd 	bl	8003ca4 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e05c      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x416>
 8004304:	e054      	b.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_RCC_OscConfig+0x478>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7ff fcca 	bl	8003ca4 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7ff fcc6 	bl	8003ca4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e045      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCC_OscConfig+0x470>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x444>
 8004332:	e03d      	b.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e038      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000
 8004348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x4ec>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d028      	beq.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d121      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d11a      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0cc      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d4:	4b68      	ldr	r3, [pc, #416]	; (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d90c      	bls.n	80043fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b65      	ldr	r3, [pc, #404]	; (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b63      	ldr	r3, [pc, #396]	; (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0b8      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a58      	ldr	r2, [pc, #352]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800441e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800442c:	4b53      	ldr	r3, [pc, #332]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a52      	ldr	r2, [pc, #328]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b50      	ldr	r3, [pc, #320]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	494d      	ldr	r1, [pc, #308]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d044      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d119      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d003      	beq.n	800447e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447a:	2b03      	cmp	r3, #3
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447e:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e06f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448e:	4b3b      	ldr	r3, [pc, #236]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e067      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800449e:	4b37      	ldr	r3, [pc, #220]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 0203 	bic.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4934      	ldr	r1, [pc, #208]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b0:	f7ff fbf8 	bl	8003ca4 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b8:	f7ff fbf4 	bl	8003ca4 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e04f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	4b2b      	ldr	r3, [pc, #172]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 020c 	and.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1eb      	bne.n	80044b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d20c      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b22      	ldr	r3, [pc, #136]	; (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b20      	ldr	r3, [pc, #128]	; (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e032      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4916      	ldr	r1, [pc, #88]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	490e      	ldr	r1, [pc, #56]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004546:	f000 f821 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490a      	ldr	r1, [pc, #40]	; (8004580 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fb58 	bl	8003c1c <HAL_InitTick>

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00
 800457c:	40023800 	.word	0x40023800
 8004580:	08009654 	.word	0x08009654
 8004584:	20000050 	.word	0x20000050
 8004588:	20000054 	.word	0x20000054

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b094      	sub	sp, #80	; 0x50
 8004592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	647b      	str	r3, [r7, #68]	; 0x44
 8004598:	2300      	movs	r3, #0
 800459a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800459c:	2300      	movs	r3, #0
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a4:	4b79      	ldr	r3, [pc, #484]	; (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d00d      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x40>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	f200 80e1 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045be:	e0db      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b73      	ldr	r3, [pc, #460]	; (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045c4:	e0db      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045c6:	4b73      	ldr	r3, [pc, #460]	; (8004794 <HAL_RCC_GetSysClockFreq+0x208>)
 80045c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ca:	e0d8      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045cc:	4b6f      	ldr	r3, [pc, #444]	; (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d6:	4b6d      	ldr	r3, [pc, #436]	; (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d063      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b6a      	ldr	r3, [pc, #424]	; (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	633b      	str	r3, [r7, #48]	; 0x30
 80045f6:	2300      	movs	r3, #0
 80045f8:	637b      	str	r3, [r7, #52]	; 0x34
 80045fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4621      	mov	r1, r4
 8004618:	1a51      	subs	r1, r2, r1
 800461a:	6139      	str	r1, [r7, #16]
 800461c:	4629      	mov	r1, r5
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004630:	4659      	mov	r1, fp
 8004632:	018b      	lsls	r3, r1, #6
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463a:	4651      	mov	r1, sl
 800463c:	018a      	lsls	r2, r1, #6
 800463e:	4651      	mov	r1, sl
 8004640:	ebb2 0801 	subs.w	r8, r2, r1
 8004644:	4659      	mov	r1, fp
 8004646:	eb63 0901 	sbc.w	r9, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465e:	4690      	mov	r8, r2
 8004660:	4699      	mov	r9, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb18 0303 	adds.w	r3, r8, r3
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	462b      	mov	r3, r5
 800466c:	eb49 0303 	adc.w	r3, r9, r3
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800467e:	4629      	mov	r1, r5
 8004680:	024b      	lsls	r3, r1, #9
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004688:	4621      	mov	r1, r4
 800468a:	024a      	lsls	r2, r1, #9
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004692:	2200      	movs	r2, #0
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
 8004696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800469c:	f7fc fafc 	bl	8000c98 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a8:	e058      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046aa:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	2200      	movs	r2, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	4611      	mov	r1, r2
 80046b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	2300      	movs	r3, #0
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
 80046c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	f04f 0000 	mov.w	r0, #0
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	0159      	lsls	r1, r3, #5
 80046d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d6:	0150      	lsls	r0, r2, #5
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4641      	mov	r1, r8
 80046de:	ebb2 0a01 	subs.w	sl, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004700:	eb63 050b 	sbc.w	r5, r3, fp
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	00eb      	lsls	r3, r5, #3
 800470e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004712:	00e2      	lsls	r2, r4, #3
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	4643      	mov	r3, r8
 800471a:	18e3      	adds	r3, r4, r3
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	464b      	mov	r3, r9
 8004720:	eb45 0303 	adc.w	r3, r5, r3
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004732:	4629      	mov	r1, r5
 8004734:	028b      	lsls	r3, r1, #10
 8004736:	4621      	mov	r1, r4
 8004738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800473c:	4621      	mov	r1, r4
 800473e:	028a      	lsls	r2, r1, #10
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004746:	2200      	movs	r2, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	61fa      	str	r2, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	f7fc faa2 	bl	8000c98 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800476c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800476e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 800477a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800477c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004780:	4618      	mov	r0, r3
 8004782:	3750      	adds	r7, #80	; 0x50
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200

08004798 <LL_GPIO_SetPinMode>:
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	613b      	str	r3, [r7, #16]
  return result;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	2103      	movs	r1, #3
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	401a      	ands	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	61bb      	str	r3, [r7, #24]
  return result;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_GPIO_SetPinOutputType>:
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_GPIO_SetPinSpeed>:
{
 8004826:	b480      	push	{r7}
 8004828:	b089      	sub	sp, #36	; 0x24
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	613b      	str	r3, [r7, #16]
  return result;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	2103      	movs	r1, #3
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	401a      	ands	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	61bb      	str	r3, [r7, #24]
  return result;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	431a      	orrs	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	3724      	adds	r7, #36	; 0x24
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <LL_GPIO_SetPinPull>:
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	613b      	str	r3, [r7, #16]
  return result;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2103      	movs	r1, #3
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	401a      	ands	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	61bb      	str	r3, [r7, #24]
  return result;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	60da      	str	r2, [r3, #12]
}
 80048d6:	bf00      	nop
 80048d8:	3724      	adds	r7, #36	; 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_GPIO_SetAFPin_0_7>:
{
 80048e2:	b480      	push	{r7}
 80048e4:	b089      	sub	sp, #36	; 0x24
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	613b      	str	r3, [r7, #16]
  return result;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	210f      	movs	r1, #15
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	401a      	ands	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	61bb      	str	r3, [r7, #24]
  return result;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	431a      	orrs	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	3724      	adds	r7, #36	; 0x24
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_GPIO_SetAFPin_8_15>:
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	613b      	str	r3, [r7, #16]
  return result;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	fab3 f383 	clz	r3, r3
 8004964:	b2db      	uxtb	r3, r3
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	210f      	movs	r1, #15
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	401a      	ands	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	61bb      	str	r3, [r7, #24]
  return result;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	; 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b088      	sub	sp, #32
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	613b      	str	r3, [r7, #16]
  return result;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80049cc:	e050      	b.n	8004a70 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	2101      	movs	r1, #1
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d042      	beq.n	8004a6a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d003      	beq.n	80049f4 <LL_GPIO_Init+0x52>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d10d      	bne.n	8004a10 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	461a      	mov	r2, r3
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ff12 	bl	8004826 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	461a      	mov	r2, r3
 8004a08:	69b9      	ldr	r1, [r7, #24]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fef3 	bl	80047f6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	461a      	mov	r2, r3
 8004a16:	69b9      	ldr	r1, [r7, #24]
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff33 	bl	8004884 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d11a      	bne.n	8004a5c <LL_GPIO_Init+0xba>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	60bb      	str	r3, [r7, #8]
  return result;
 8004a32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b07      	cmp	r3, #7
 8004a3c:	d807      	bhi.n	8004a4e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	461a      	mov	r2, r3
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff ff4b 	bl	80048e2 <LL_GPIO_SetAFPin_0_7>
 8004a4c:	e006      	b.n	8004a5c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	461a      	mov	r2, r3
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff72 	bl	8004940 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	461a      	mov	r2, r3
 8004a62:	69b9      	ldr	r1, [r7, #24]
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fe97 	bl	8004798 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1a7      	bne.n	80049ce <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a8c:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <LL_RCC_GetSysClkSource+0x18>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 030c 	and.w	r3, r3, #12
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800

08004aa4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <LL_RCC_GetAHBPrescaler+0x18>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800

08004ac0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800

08004adc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800

08004af8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <LL_RCC_PLL_GetMainSource+0x18>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800

08004b14 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <LL_RCC_PLL_GetN+0x18>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	099b      	lsrs	r3, r3, #6
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40023800 	.word	0x40023800

08004b30 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <LL_RCC_PLL_GetP+0x18>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800

08004b4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <LL_RCC_PLL_GetDivider+0x18>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800

08004b68 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004b70:	f000 f820 	bl	8004bb4 <RCC_GetSystemClockFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f840 	bl	8004c04 <RCC_GetHCLKClockFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f84e 	bl	8004c30 <RCC_GetPCLK1ClockFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f85a 	bl	8004c58 <RCC_GetPCLK2ClockFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004bbe:	f7ff ff63 	bl	8004a88 <LL_RCC_GetSysClkSource>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d00c      	beq.n	8004be2 <RCC_GetSystemClockFreq+0x2e>
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d80f      	bhi.n	8004bec <RCC_GetSystemClockFreq+0x38>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <RCC_GetSystemClockFreq+0x22>
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d003      	beq.n	8004bdc <RCC_GetSystemClockFreq+0x28>
 8004bd4:	e00a      	b.n	8004bec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <RCC_GetSystemClockFreq+0x48>)
 8004bd8:	607b      	str	r3, [r7, #4]
      break;
 8004bda:	e00a      	b.n	8004bf2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <RCC_GetSystemClockFreq+0x4c>)
 8004bde:	607b      	str	r3, [r7, #4]
      break;
 8004be0:	e007      	b.n	8004bf2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004be2:	2008      	movs	r0, #8
 8004be4:	f000 f84c 	bl	8004c80 <RCC_PLL_GetFreqDomain_SYS>
 8004be8:	6078      	str	r0, [r7, #4]
      break;
 8004bea:	e002      	b.n	8004bf2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <RCC_GetSystemClockFreq+0x48>)
 8004bee:	607b      	str	r3, [r7, #4]
      break;
 8004bf0:	bf00      	nop
  }

  return frequency;
 8004bf2:	687b      	ldr	r3, [r7, #4]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004c0c:	f7ff ff4a 	bl	8004aa4 <LL_RCC_GetAHBPrescaler>
 8004c10:	4603      	mov	r3, r0
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <RCC_GetHCLKClockFreq+0x28>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	40d3      	lsrs	r3, r2
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	08009654 	.word	0x08009654

08004c30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c38:	f7ff ff42 	bl	8004ac0 <LL_RCC_GetAPB1Prescaler>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	0a9b      	lsrs	r3, r3, #10
 8004c40:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <RCC_GetPCLK1ClockFreq+0x24>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	461a      	mov	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	40d3      	lsrs	r3, r2
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	08009664 	.word	0x08009664

08004c58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c60:	f7ff ff3c 	bl	8004adc <LL_RCC_GetAPB2Prescaler>
 8004c64:	4603      	mov	r3, r0
 8004c66:	0b5b      	lsrs	r3, r3, #13
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <RCC_GetPCLK2ClockFreq+0x24>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	40d3      	lsrs	r3, r2
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	08009664 	.word	0x08009664

08004c80 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004c80:	b590      	push	{r4, r7, lr}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004c94:	f7ff ff30 	bl	8004af8 <LL_RCC_PLL_GetMainSource>
 8004c98:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca6:	d003      	beq.n	8004cb0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004ca8:	e005      	b.n	8004cb6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004cac:	617b      	str	r3, [r7, #20]
      break;
 8004cae:	e005      	b.n	8004cbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004cb0:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004cb2:	617b      	str	r3, [r7, #20]
      break;
 8004cb4:	e002      	b.n	8004cbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004cb8:	617b      	str	r3, [r7, #20]
      break;
 8004cba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d113      	bne.n	8004cea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004cc2:	f7ff ff43 	bl	8004b4c <LL_RCC_PLL_GetDivider>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fbb3 f4f2 	udiv	r4, r3, r2
 8004cce:	f7ff ff21 	bl	8004b14 <LL_RCC_PLL_GetN>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	fb03 f404 	mul.w	r4, r3, r4
 8004cd8:	f7ff ff2a 	bl	8004b30 <LL_RCC_PLL_GetP>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	0c1b      	lsrs	r3, r3, #16
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ce8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004cea:	693b      	ldr	r3, [r7, #16]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd90      	pop	{r4, r7, pc}
 8004cf4:	00f42400 	.word	0x00f42400
 8004cf8:	007a1200 	.word	0x007a1200

08004cfc <LL_SPI_IsEnabled>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d101      	bne.n	8004d14 <LL_SPI_IsEnabled+0x18>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <LL_SPI_IsEnabled+0x1a>
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_SPI_SetCRCPolynomial>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	611a      	str	r2, [r3, #16]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ffd3 	bl	8004cfc <LL_SPI_IsEnabled>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d139      	bne.n	8004dd0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d64:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	6811      	ldr	r1, [r2, #0]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	6852      	ldr	r2, [r2, #4]
 8004d70:	4311      	orrs	r1, r2
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	4311      	orrs	r1, r2
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	68d2      	ldr	r2, [r2, #12]
 8004d7c:	4311      	orrs	r1, r2
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	6912      	ldr	r2, [r2, #16]
 8004d82:	4311      	orrs	r1, r2
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	6952      	ldr	r2, [r2, #20]
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	6992      	ldr	r2, [r2, #24]
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	69d2      	ldr	r2, [r2, #28]
 8004d94:	4311      	orrs	r1, r2
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	6a12      	ldr	r2, [r2, #32]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f023 0204 	bic.w	r2, r3, #4
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbe:	d105      	bne.n	8004dcc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ffab 	bl	8004d22 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	61da      	str	r2, [r3, #28]
  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <LL_USART_IsEnabled>:
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_USART_SetStopBitsLength>:
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	611a      	str	r2, [r3, #16]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_USART_SetHWFlowCtrl>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	615a      	str	r2, [r3, #20]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <LL_USART_SetBaudRate>:
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b0c0      	sub	sp, #256	; 0x100
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e68:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004e6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004e70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	f040 810c 	bne.w	8005098 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004e80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e92:	4622      	mov	r2, r4
 8004e94:	462b      	mov	r3, r5
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	6639      	str	r1, [r7, #96]	; 0x60
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	eb12 0801 	adds.w	r8, r2, r1
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	eb43 0901 	adc.w	r9, r3, r1
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec2:	4690      	mov	r8, r2
 8004ec4:	4699      	mov	r9, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	eb18 0303 	adds.w	r3, r8, r3
 8004ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	eb49 0303 	adc.w	r3, r9, r3
 8004ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	4693      	mov	fp, r2
 8004ee4:	eb1a 030a 	adds.w	r3, sl, sl
 8004ee8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eea:	eb4b 030b 	adc.w	r3, fp, fp
 8004eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ef8:	f7fb fece 	bl	8000c98 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b64      	ldr	r3, [pc, #400]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	b29c      	uxth	r4, r3
 8004f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f18:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f1c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	1891      	adds	r1, r2, r2
 8004f26:	6539      	str	r1, [r7, #80]	; 0x50
 8004f28:	415b      	adcs	r3, r3
 8004f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f30:	4641      	mov	r1, r8
 8004f32:	1851      	adds	r1, r2, r1
 8004f34:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f36:	4649      	mov	r1, r9
 8004f38:	414b      	adcs	r3, r1
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004f48:	4659      	mov	r1, fp
 8004f4a:	00cb      	lsls	r3, r1, #3
 8004f4c:	4651      	mov	r1, sl
 8004f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f52:	4651      	mov	r1, sl
 8004f54:	00ca      	lsls	r2, r1, #3
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f64:	464b      	mov	r3, r9
 8004f66:	460a      	mov	r2, r1
 8004f68:	eb42 0303 	adc.w	r3, r2, r3
 8004f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f7a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004f7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004f82:	460b      	mov	r3, r1
 8004f84:	18db      	adds	r3, r3, r3
 8004f86:	643b      	str	r3, [r7, #64]	; 0x40
 8004f88:	4613      	mov	r3, r2
 8004f8a:	eb42 0303 	adc.w	r3, r2, r3
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f94:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004f98:	f7fb fe7e 	bl	8000c98 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8004fa4:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	2264      	movs	r2, #100	; 0x64
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	1acb      	subs	r3, r1, r3
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fb8:	4b36      	ldr	r3, [pc, #216]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	4423      	add	r3, r4
 8004fce:	b29c      	uxth	r4, r3
 8004fd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fda:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fde:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	1891      	adds	r1, r2, r2
 8004fe8:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fea:	415b      	adcs	r3, r3
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ff2:	4641      	mov	r1, r8
 8004ff4:	1851      	adds	r1, r2, r1
 8004ff6:	6339      	str	r1, [r7, #48]	; 0x30
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	414b      	adcs	r3, r1
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800500a:	4659      	mov	r1, fp
 800500c:	00cb      	lsls	r3, r1, #3
 800500e:	4651      	mov	r1, sl
 8005010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005014:	4651      	mov	r1, sl
 8005016:	00ca      	lsls	r2, r1, #3
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	4603      	mov	r3, r0
 800501e:	4642      	mov	r2, r8
 8005020:	189b      	adds	r3, r3, r2
 8005022:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005026:	464b      	mov	r3, r9
 8005028:	460a      	mov	r2, r1
 800502a:	eb42 0303 	adc.w	r3, r2, r3
 800502e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005032:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800503c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005040:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005044:	460b      	mov	r3, r1
 8005046:	18db      	adds	r3, r3, r3
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
 800504a:	4613      	mov	r3, r2
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005056:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800505a:	f7fb fe1d 	bl	8000c98 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a07      	ldr	r2, [pc, #28]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	b29b      	uxth	r3, r3
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	b29b      	uxth	r3, r3
 8005086:	4423      	add	r3, r4
 8005088:	b29b      	uxth	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005090:	609a      	str	r2, [r3, #8]
}
 8005092:	e107      	b.n	80052a4 <LL_USART_SetBaudRate+0x448>
 8005094:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005098:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050a2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050a6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80050aa:	4642      	mov	r2, r8
 80050ac:	464b      	mov	r3, r9
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	6239      	str	r1, [r7, #32]
 80050b2:	415b      	adcs	r3, r3
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ba:	4641      	mov	r1, r8
 80050bc:	1854      	adds	r4, r2, r1
 80050be:	4649      	mov	r1, r9
 80050c0:	eb43 0501 	adc.w	r5, r3, r1
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	00eb      	lsls	r3, r5, #3
 80050ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d2:	00e2      	lsls	r2, r4, #3
 80050d4:	4614      	mov	r4, r2
 80050d6:	461d      	mov	r5, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	18e3      	adds	r3, r4, r3
 80050dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050e0:	464b      	mov	r3, r9
 80050e2:	eb45 0303 	adc.w	r3, r5, r3
 80050e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005104:	4629      	mov	r1, r5
 8005106:	008b      	lsls	r3, r1, #2
 8005108:	4621      	mov	r1, r4
 800510a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510e:	4621      	mov	r1, r4
 8005110:	008a      	lsls	r2, r1, #2
 8005112:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005116:	f7fb fdbf 	bl	8000c98 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 8005120:	fba3 2302 	umull	r2, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	b29b      	uxth	r3, r3
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	b29c      	uxth	r4, r3
 800512c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005130:	2200      	movs	r2, #0
 8005132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800513a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800513e:	4642      	mov	r2, r8
 8005140:	464b      	mov	r3, r9
 8005142:	1891      	adds	r1, r2, r2
 8005144:	61b9      	str	r1, [r7, #24]
 8005146:	415b      	adcs	r3, r3
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514e:	4641      	mov	r1, r8
 8005150:	1851      	adds	r1, r2, r1
 8005152:	6139      	str	r1, [r7, #16]
 8005154:	4649      	mov	r1, r9
 8005156:	414b      	adcs	r3, r1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005166:	4659      	mov	r1, fp
 8005168:	00cb      	lsls	r3, r1, #3
 800516a:	4651      	mov	r1, sl
 800516c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005170:	4651      	mov	r1, sl
 8005172:	00ca      	lsls	r2, r1, #3
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	4603      	mov	r3, r0
 800517a:	4642      	mov	r2, r8
 800517c:	189b      	adds	r3, r3, r2
 800517e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005182:	464b      	mov	r3, r9
 8005184:	460a      	mov	r2, r1
 8005186:	eb42 0303 	adc.w	r3, r2, r3
 800518a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800518e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005198:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80051a8:	4649      	mov	r1, r9
 80051aa:	008b      	lsls	r3, r1, #2
 80051ac:	4641      	mov	r1, r8
 80051ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b2:	4641      	mov	r1, r8
 80051b4:	008a      	lsls	r2, r1, #2
 80051b6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051ba:	f7fb fd6d 	bl	8000c98 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a36      	ldr	r2, [pc, #216]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4423      	add	r3, r4
 80051e8:	b29c      	uxth	r4, r3
 80051ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ee:	2200      	movs	r2, #0
 80051f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	415b      	adcs	r3, r3
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005208:	4641      	mov	r1, r8
 800520a:	1851      	adds	r1, r2, r1
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	4649      	mov	r1, r9
 8005210:	414b      	adcs	r3, r1
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005220:	4659      	mov	r1, fp
 8005222:	00cb      	lsls	r3, r1, #3
 8005224:	4651      	mov	r1, sl
 8005226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522a:	4651      	mov	r1, sl
 800522c:	00ca      	lsls	r2, r1, #3
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	4603      	mov	r3, r0
 8005234:	4642      	mov	r2, r8
 8005236:	189b      	adds	r3, r3, r2
 8005238:	673b      	str	r3, [r7, #112]	; 0x70
 800523a:	464b      	mov	r3, r9
 800523c:	460a      	mov	r2, r1
 800523e:	eb42 0303 	adc.w	r3, r2, r3
 8005242:	677b      	str	r3, [r7, #116]	; 0x74
 8005244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005248:	2200      	movs	r2, #0
 800524a:	66bb      	str	r3, [r7, #104]	; 0x68
 800524c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800525a:	4649      	mov	r1, r9
 800525c:	008b      	lsls	r3, r1, #2
 800525e:	4641      	mov	r1, r8
 8005260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005264:	4641      	mov	r1, r8
 8005266:	008a      	lsls	r2, r1, #2
 8005268:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800526c:	f7fb fd14 	bl	8000c98 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 8005276:	fba3 1302 	umull	r1, r3, r3, r2
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2164      	movs	r1, #100	; 0x64
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	3332      	adds	r3, #50	; 0x32
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	b29b      	uxth	r3, r3
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	b29b      	uxth	r3, r3
 8005298:	4423      	add	r3, r4
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052aa:	46bd      	mov	sp, r7
 80052ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b0:	51eb851f 	.word	0x51eb851f

080052b4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fd8d 	bl	8004de6 <LL_USART_IsEnabled>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d149      	bne.n	8005366 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052da:	f023 030c 	bic.w	r3, r3, #12
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	6851      	ldr	r1, [r2, #4]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68d2      	ldr	r2, [r2, #12]
 80052e6:	4311      	orrs	r1, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	6912      	ldr	r2, [r2, #16]
 80052ec:	4311      	orrs	r1, r2
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	6992      	ldr	r2, [r2, #24]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fd84 	bl	8004e0e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fd91 	bl	8004e34 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005312:	f107 0308 	add.w	r3, r7, #8
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fc26 	bl	8004b68 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a14      	ldr	r2, [pc, #80]	; (8005370 <LL_USART_Init+0xbc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d102      	bne.n	800532a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e00c      	b.n	8005344 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a11      	ldr	r2, [pc, #68]	; (8005374 <LL_USART_Init+0xc0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d102      	bne.n	8005338 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e005      	b.n	8005344 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0f      	ldr	r2, [pc, #60]	; (8005378 <LL_USART_Init+0xc4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d101      	bne.n	8005344 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8005352:	2300      	movs	r3, #0
 8005354:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69b9      	ldr	r1, [r7, #24]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fd7b 	bl	8004e5c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005366:	7ffb      	ldrb	r3, [r7, #31]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40011000 	.word	0x40011000
 8005374:	40004400 	.word	0x40004400
 8005378:	40011400 	.word	0x40011400

0800537c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <LL_mDelay+0x48>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800538a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d00c      	beq.n	80053ae <LL_mDelay+0x32>
  {
    Delay++;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3301      	adds	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800539a:	e008      	b.n	80053ae <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <LL_mDelay+0x48>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <LL_mDelay+0x32>
    {
      Delay--;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	607b      	str	r3, [r7, #4]
  while (Delay)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f3      	bne.n	800539c <LL_mDelay+0x20>
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	e000e010 	.word	0xe000e010

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	; (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	2000005c 	.word	0x2000005c

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	; (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	; (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	; (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	; (8005418 <__libc_init_array+0x44>)
 80053e8:	f004 f8cc 	bl	8009584 <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	08009c28 	.word	0x08009c28
 8005410:	08009c28 	.word	0x08009c28
 8005414:	08009c28 	.word	0x08009c28
 8005418:	08009c2c 	.word	0x08009c2c

0800541c <memcpy>:
 800541c:	440a      	add	r2, r1
 800541e:	4291      	cmp	r1, r2
 8005420:	f100 33ff 	add.w	r3, r0, #4294967295
 8005424:	d100      	bne.n	8005428 <memcpy+0xc>
 8005426:	4770      	bx	lr
 8005428:	b510      	push	{r4, lr}
 800542a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800542e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005432:	4291      	cmp	r1, r2
 8005434:	d1f9      	bne.n	800542a <memcpy+0xe>
 8005436:	bd10      	pop	{r4, pc}

08005438 <memset>:
 8005438:	4402      	add	r2, r0
 800543a:	4603      	mov	r3, r0
 800543c:	4293      	cmp	r3, r2
 800543e:	d100      	bne.n	8005442 <memset+0xa>
 8005440:	4770      	bx	lr
 8005442:	f803 1b01 	strb.w	r1, [r3], #1
 8005446:	e7f9      	b.n	800543c <memset+0x4>

08005448 <__cvt>:
 8005448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	ec55 4b10 	vmov	r4, r5, d0
 8005450:	2d00      	cmp	r5, #0
 8005452:	460e      	mov	r6, r1
 8005454:	4619      	mov	r1, r3
 8005456:	462b      	mov	r3, r5
 8005458:	bfbb      	ittet	lt
 800545a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800545e:	461d      	movlt	r5, r3
 8005460:	2300      	movge	r3, #0
 8005462:	232d      	movlt	r3, #45	; 0x2d
 8005464:	700b      	strb	r3, [r1, #0]
 8005466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005468:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800546c:	4691      	mov	r9, r2
 800546e:	f023 0820 	bic.w	r8, r3, #32
 8005472:	bfbc      	itt	lt
 8005474:	4622      	movlt	r2, r4
 8005476:	4614      	movlt	r4, r2
 8005478:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800547c:	d005      	beq.n	800548a <__cvt+0x42>
 800547e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005482:	d100      	bne.n	8005486 <__cvt+0x3e>
 8005484:	3601      	adds	r6, #1
 8005486:	2102      	movs	r1, #2
 8005488:	e000      	b.n	800548c <__cvt+0x44>
 800548a:	2103      	movs	r1, #3
 800548c:	ab03      	add	r3, sp, #12
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	ab02      	add	r3, sp, #8
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	ec45 4b10 	vmov	d0, r4, r5
 8005498:	4653      	mov	r3, sl
 800549a:	4632      	mov	r2, r6
 800549c:	f000 fce4 	bl	8005e68 <_dtoa_r>
 80054a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054a4:	4607      	mov	r7, r0
 80054a6:	d102      	bne.n	80054ae <__cvt+0x66>
 80054a8:	f019 0f01 	tst.w	r9, #1
 80054ac:	d022      	beq.n	80054f4 <__cvt+0xac>
 80054ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054b2:	eb07 0906 	add.w	r9, r7, r6
 80054b6:	d110      	bne.n	80054da <__cvt+0x92>
 80054b8:	783b      	ldrb	r3, [r7, #0]
 80054ba:	2b30      	cmp	r3, #48	; 0x30
 80054bc:	d10a      	bne.n	80054d4 <__cvt+0x8c>
 80054be:	2200      	movs	r2, #0
 80054c0:	2300      	movs	r3, #0
 80054c2:	4620      	mov	r0, r4
 80054c4:	4629      	mov	r1, r5
 80054c6:	f7fb fb07 	bl	8000ad8 <__aeabi_dcmpeq>
 80054ca:	b918      	cbnz	r0, 80054d4 <__cvt+0x8c>
 80054cc:	f1c6 0601 	rsb	r6, r6, #1
 80054d0:	f8ca 6000 	str.w	r6, [sl]
 80054d4:	f8da 3000 	ldr.w	r3, [sl]
 80054d8:	4499      	add	r9, r3
 80054da:	2200      	movs	r2, #0
 80054dc:	2300      	movs	r3, #0
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fb faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80054e6:	b108      	cbz	r0, 80054ec <__cvt+0xa4>
 80054e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80054ec:	2230      	movs	r2, #48	; 0x30
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	454b      	cmp	r3, r9
 80054f2:	d307      	bcc.n	8005504 <__cvt+0xbc>
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054f8:	1bdb      	subs	r3, r3, r7
 80054fa:	4638      	mov	r0, r7
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	b004      	add	sp, #16
 8005500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005504:	1c59      	adds	r1, r3, #1
 8005506:	9103      	str	r1, [sp, #12]
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e7f0      	b.n	80054ee <__cvt+0xa6>

0800550c <__exponent>:
 800550c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800550e:	4603      	mov	r3, r0
 8005510:	2900      	cmp	r1, #0
 8005512:	bfb8      	it	lt
 8005514:	4249      	neglt	r1, r1
 8005516:	f803 2b02 	strb.w	r2, [r3], #2
 800551a:	bfb4      	ite	lt
 800551c:	222d      	movlt	r2, #45	; 0x2d
 800551e:	222b      	movge	r2, #43	; 0x2b
 8005520:	2909      	cmp	r1, #9
 8005522:	7042      	strb	r2, [r0, #1]
 8005524:	dd2a      	ble.n	800557c <__exponent+0x70>
 8005526:	f10d 0407 	add.w	r4, sp, #7
 800552a:	46a4      	mov	ip, r4
 800552c:	270a      	movs	r7, #10
 800552e:	46a6      	mov	lr, r4
 8005530:	460a      	mov	r2, r1
 8005532:	fb91 f6f7 	sdiv	r6, r1, r7
 8005536:	fb07 1516 	mls	r5, r7, r6, r1
 800553a:	3530      	adds	r5, #48	; 0x30
 800553c:	2a63      	cmp	r2, #99	; 0x63
 800553e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005542:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005546:	4631      	mov	r1, r6
 8005548:	dcf1      	bgt.n	800552e <__exponent+0x22>
 800554a:	3130      	adds	r1, #48	; 0x30
 800554c:	f1ae 0502 	sub.w	r5, lr, #2
 8005550:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005554:	1c44      	adds	r4, r0, #1
 8005556:	4629      	mov	r1, r5
 8005558:	4561      	cmp	r1, ip
 800555a:	d30a      	bcc.n	8005572 <__exponent+0x66>
 800555c:	f10d 0209 	add.w	r2, sp, #9
 8005560:	eba2 020e 	sub.w	r2, r2, lr
 8005564:	4565      	cmp	r5, ip
 8005566:	bf88      	it	hi
 8005568:	2200      	movhi	r2, #0
 800556a:	4413      	add	r3, r2
 800556c:	1a18      	subs	r0, r3, r0
 800556e:	b003      	add	sp, #12
 8005570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005576:	f804 2f01 	strb.w	r2, [r4, #1]!
 800557a:	e7ed      	b.n	8005558 <__exponent+0x4c>
 800557c:	2330      	movs	r3, #48	; 0x30
 800557e:	3130      	adds	r1, #48	; 0x30
 8005580:	7083      	strb	r3, [r0, #2]
 8005582:	70c1      	strb	r1, [r0, #3]
 8005584:	1d03      	adds	r3, r0, #4
 8005586:	e7f1      	b.n	800556c <__exponent+0x60>

08005588 <_printf_float>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	ed2d 8b02 	vpush	{d8}
 8005590:	b08d      	sub	sp, #52	; 0x34
 8005592:	460c      	mov	r4, r1
 8005594:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005598:	4616      	mov	r6, r2
 800559a:	461f      	mov	r7, r3
 800559c:	4605      	mov	r5, r0
 800559e:	f001 fb47 	bl	8006c30 <_localeconv_r>
 80055a2:	f8d0 a000 	ldr.w	sl, [r0]
 80055a6:	4650      	mov	r0, sl
 80055a8:	f7fa fe1a 	bl	80001e0 <strlen>
 80055ac:	2300      	movs	r3, #0
 80055ae:	930a      	str	r3, [sp, #40]	; 0x28
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	9305      	str	r3, [sp, #20]
 80055b4:	f8d8 3000 	ldr.w	r3, [r8]
 80055b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055bc:	3307      	adds	r3, #7
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	f103 0208 	add.w	r2, r3, #8
 80055c6:	f8c8 2000 	str.w	r2, [r8]
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055da:	9307      	str	r3, [sp, #28]
 80055dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80055e0:	ee08 0a10 	vmov	s16, r0
 80055e4:	4b9f      	ldr	r3, [pc, #636]	; (8005864 <_printf_float+0x2dc>)
 80055e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295
 80055ee:	f7fb faa5 	bl	8000b3c <__aeabi_dcmpun>
 80055f2:	bb88      	cbnz	r0, 8005658 <_printf_float+0xd0>
 80055f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055f8:	4b9a      	ldr	r3, [pc, #616]	; (8005864 <_printf_float+0x2dc>)
 80055fa:	f04f 32ff 	mov.w	r2, #4294967295
 80055fe:	f7fb fa7f 	bl	8000b00 <__aeabi_dcmple>
 8005602:	bb48      	cbnz	r0, 8005658 <_printf_float+0xd0>
 8005604:	2200      	movs	r2, #0
 8005606:	2300      	movs	r3, #0
 8005608:	4640      	mov	r0, r8
 800560a:	4649      	mov	r1, r9
 800560c:	f7fb fa6e 	bl	8000aec <__aeabi_dcmplt>
 8005610:	b110      	cbz	r0, 8005618 <_printf_float+0x90>
 8005612:	232d      	movs	r3, #45	; 0x2d
 8005614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005618:	4b93      	ldr	r3, [pc, #588]	; (8005868 <_printf_float+0x2e0>)
 800561a:	4894      	ldr	r0, [pc, #592]	; (800586c <_printf_float+0x2e4>)
 800561c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005620:	bf94      	ite	ls
 8005622:	4698      	movls	r8, r3
 8005624:	4680      	movhi	r8, r0
 8005626:	2303      	movs	r3, #3
 8005628:	6123      	str	r3, [r4, #16]
 800562a:	9b05      	ldr	r3, [sp, #20]
 800562c:	f023 0204 	bic.w	r2, r3, #4
 8005630:	6022      	str	r2, [r4, #0]
 8005632:	f04f 0900 	mov.w	r9, #0
 8005636:	9700      	str	r7, [sp, #0]
 8005638:	4633      	mov	r3, r6
 800563a:	aa0b      	add	r2, sp, #44	; 0x2c
 800563c:	4621      	mov	r1, r4
 800563e:	4628      	mov	r0, r5
 8005640:	f000 f9d8 	bl	80059f4 <_printf_common>
 8005644:	3001      	adds	r0, #1
 8005646:	f040 8090 	bne.w	800576a <_printf_float+0x1e2>
 800564a:	f04f 30ff 	mov.w	r0, #4294967295
 800564e:	b00d      	add	sp, #52	; 0x34
 8005650:	ecbd 8b02 	vpop	{d8}
 8005654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	4640      	mov	r0, r8
 800565e:	4649      	mov	r1, r9
 8005660:	f7fb fa6c 	bl	8000b3c <__aeabi_dcmpun>
 8005664:	b140      	cbz	r0, 8005678 <_printf_float+0xf0>
 8005666:	464b      	mov	r3, r9
 8005668:	2b00      	cmp	r3, #0
 800566a:	bfbc      	itt	lt
 800566c:	232d      	movlt	r3, #45	; 0x2d
 800566e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005672:	487f      	ldr	r0, [pc, #508]	; (8005870 <_printf_float+0x2e8>)
 8005674:	4b7f      	ldr	r3, [pc, #508]	; (8005874 <_printf_float+0x2ec>)
 8005676:	e7d1      	b.n	800561c <_printf_float+0x94>
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800567e:	9206      	str	r2, [sp, #24]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	d13f      	bne.n	8005704 <_printf_float+0x17c>
 8005684:	2306      	movs	r3, #6
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	6861      	ldr	r1, [r4, #4]
 800568c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005690:	2300      	movs	r3, #0
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	ab0a      	add	r3, sp, #40	; 0x28
 8005696:	e9cd b301 	strd	fp, r3, [sp, #4]
 800569a:	ab09      	add	r3, sp, #36	; 0x24
 800569c:	ec49 8b10 	vmov	d0, r8, r9
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	6022      	str	r2, [r4, #0]
 80056a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056a8:	4628      	mov	r0, r5
 80056aa:	f7ff fecd 	bl	8005448 <__cvt>
 80056ae:	9b06      	ldr	r3, [sp, #24]
 80056b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056b2:	2b47      	cmp	r3, #71	; 0x47
 80056b4:	4680      	mov	r8, r0
 80056b6:	d108      	bne.n	80056ca <_printf_float+0x142>
 80056b8:	1cc8      	adds	r0, r1, #3
 80056ba:	db02      	blt.n	80056c2 <_printf_float+0x13a>
 80056bc:	6863      	ldr	r3, [r4, #4]
 80056be:	4299      	cmp	r1, r3
 80056c0:	dd41      	ble.n	8005746 <_printf_float+0x1be>
 80056c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80056c6:	fa5f fb8b 	uxtb.w	fp, fp
 80056ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056ce:	d820      	bhi.n	8005712 <_printf_float+0x18a>
 80056d0:	3901      	subs	r1, #1
 80056d2:	465a      	mov	r2, fp
 80056d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056d8:	9109      	str	r1, [sp, #36]	; 0x24
 80056da:	f7ff ff17 	bl	800550c <__exponent>
 80056de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056e0:	1813      	adds	r3, r2, r0
 80056e2:	2a01      	cmp	r2, #1
 80056e4:	4681      	mov	r9, r0
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	dc02      	bgt.n	80056f0 <_printf_float+0x168>
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	07d2      	lsls	r2, r2, #31
 80056ee:	d501      	bpl.n	80056f4 <_printf_float+0x16c>
 80056f0:	3301      	adds	r3, #1
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d09c      	beq.n	8005636 <_printf_float+0xae>
 80056fc:	232d      	movs	r3, #45	; 0x2d
 80056fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005702:	e798      	b.n	8005636 <_printf_float+0xae>
 8005704:	9a06      	ldr	r2, [sp, #24]
 8005706:	2a47      	cmp	r2, #71	; 0x47
 8005708:	d1be      	bne.n	8005688 <_printf_float+0x100>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1bc      	bne.n	8005688 <_printf_float+0x100>
 800570e:	2301      	movs	r3, #1
 8005710:	e7b9      	b.n	8005686 <_printf_float+0xfe>
 8005712:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005716:	d118      	bne.n	800574a <_printf_float+0x1c2>
 8005718:	2900      	cmp	r1, #0
 800571a:	6863      	ldr	r3, [r4, #4]
 800571c:	dd0b      	ble.n	8005736 <_printf_float+0x1ae>
 800571e:	6121      	str	r1, [r4, #16]
 8005720:	b913      	cbnz	r3, 8005728 <_printf_float+0x1a0>
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	07d0      	lsls	r0, r2, #31
 8005726:	d502      	bpl.n	800572e <_printf_float+0x1a6>
 8005728:	3301      	adds	r3, #1
 800572a:	440b      	add	r3, r1
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005730:	f04f 0900 	mov.w	r9, #0
 8005734:	e7de      	b.n	80056f4 <_printf_float+0x16c>
 8005736:	b913      	cbnz	r3, 800573e <_printf_float+0x1b6>
 8005738:	6822      	ldr	r2, [r4, #0]
 800573a:	07d2      	lsls	r2, r2, #31
 800573c:	d501      	bpl.n	8005742 <_printf_float+0x1ba>
 800573e:	3302      	adds	r3, #2
 8005740:	e7f4      	b.n	800572c <_printf_float+0x1a4>
 8005742:	2301      	movs	r3, #1
 8005744:	e7f2      	b.n	800572c <_printf_float+0x1a4>
 8005746:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800574a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574c:	4299      	cmp	r1, r3
 800574e:	db05      	blt.n	800575c <_printf_float+0x1d4>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	6121      	str	r1, [r4, #16]
 8005754:	07d8      	lsls	r0, r3, #31
 8005756:	d5ea      	bpl.n	800572e <_printf_float+0x1a6>
 8005758:	1c4b      	adds	r3, r1, #1
 800575a:	e7e7      	b.n	800572c <_printf_float+0x1a4>
 800575c:	2900      	cmp	r1, #0
 800575e:	bfd4      	ite	le
 8005760:	f1c1 0202 	rsble	r2, r1, #2
 8005764:	2201      	movgt	r2, #1
 8005766:	4413      	add	r3, r2
 8005768:	e7e0      	b.n	800572c <_printf_float+0x1a4>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	055a      	lsls	r2, r3, #21
 800576e:	d407      	bmi.n	8005780 <_printf_float+0x1f8>
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	4642      	mov	r2, r8
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	d12c      	bne.n	80057d8 <_printf_float+0x250>
 800577e:	e764      	b.n	800564a <_printf_float+0xc2>
 8005780:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005784:	f240 80e0 	bls.w	8005948 <_printf_float+0x3c0>
 8005788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800578c:	2200      	movs	r2, #0
 800578e:	2300      	movs	r3, #0
 8005790:	f7fb f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005794:	2800      	cmp	r0, #0
 8005796:	d034      	beq.n	8005802 <_printf_float+0x27a>
 8005798:	4a37      	ldr	r2, [pc, #220]	; (8005878 <_printf_float+0x2f0>)
 800579a:	2301      	movs	r3, #1
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	f43f af51 	beq.w	800564a <_printf_float+0xc2>
 80057a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ac:	429a      	cmp	r2, r3
 80057ae:	db02      	blt.n	80057b6 <_printf_float+0x22e>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	07d8      	lsls	r0, r3, #31
 80057b4:	d510      	bpl.n	80057d8 <_printf_float+0x250>
 80057b6:	ee18 3a10 	vmov	r3, s16
 80057ba:	4652      	mov	r2, sl
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	47b8      	blx	r7
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f af41 	beq.w	800564a <_printf_float+0xc2>
 80057c8:	f04f 0800 	mov.w	r8, #0
 80057cc:	f104 091a 	add.w	r9, r4, #26
 80057d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	4543      	cmp	r3, r8
 80057d6:	dc09      	bgt.n	80057ec <_printf_float+0x264>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	079b      	lsls	r3, r3, #30
 80057dc:	f100 8105 	bmi.w	80059ea <_printf_float+0x462>
 80057e0:	68e0      	ldr	r0, [r4, #12]
 80057e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e4:	4298      	cmp	r0, r3
 80057e6:	bfb8      	it	lt
 80057e8:	4618      	movlt	r0, r3
 80057ea:	e730      	b.n	800564e <_printf_float+0xc6>
 80057ec:	2301      	movs	r3, #1
 80057ee:	464a      	mov	r2, r9
 80057f0:	4631      	mov	r1, r6
 80057f2:	4628      	mov	r0, r5
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	f43f af27 	beq.w	800564a <_printf_float+0xc2>
 80057fc:	f108 0801 	add.w	r8, r8, #1
 8005800:	e7e6      	b.n	80057d0 <_printf_float+0x248>
 8005802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	dc39      	bgt.n	800587c <_printf_float+0x2f4>
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <_printf_float+0x2f0>)
 800580a:	2301      	movs	r3, #1
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f af19 	beq.w	800564a <_printf_float+0xc2>
 8005818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800581c:	4313      	orrs	r3, r2
 800581e:	d102      	bne.n	8005826 <_printf_float+0x29e>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	07d9      	lsls	r1, r3, #31
 8005824:	d5d8      	bpl.n	80057d8 <_printf_float+0x250>
 8005826:	ee18 3a10 	vmov	r3, s16
 800582a:	4652      	mov	r2, sl
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f af09 	beq.w	800564a <_printf_float+0xc2>
 8005838:	f04f 0900 	mov.w	r9, #0
 800583c:	f104 0a1a 	add.w	sl, r4, #26
 8005840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005842:	425b      	negs	r3, r3
 8005844:	454b      	cmp	r3, r9
 8005846:	dc01      	bgt.n	800584c <_printf_float+0x2c4>
 8005848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800584a:	e792      	b.n	8005772 <_printf_float+0x1ea>
 800584c:	2301      	movs	r3, #1
 800584e:	4652      	mov	r2, sl
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f aef7 	beq.w	800564a <_printf_float+0xc2>
 800585c:	f109 0901 	add.w	r9, r9, #1
 8005860:	e7ee      	b.n	8005840 <_printf_float+0x2b8>
 8005862:	bf00      	nop
 8005864:	7fefffff 	.word	0x7fefffff
 8005868:	08009670 	.word	0x08009670
 800586c:	08009674 	.word	0x08009674
 8005870:	0800967c 	.word	0x0800967c
 8005874:	08009678 	.word	0x08009678
 8005878:	08009680 	.word	0x08009680
 800587c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005880:	429a      	cmp	r2, r3
 8005882:	bfa8      	it	ge
 8005884:	461a      	movge	r2, r3
 8005886:	2a00      	cmp	r2, #0
 8005888:	4691      	mov	r9, r2
 800588a:	dc37      	bgt.n	80058fc <_printf_float+0x374>
 800588c:	f04f 0b00 	mov.w	fp, #0
 8005890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005894:	f104 021a 	add.w	r2, r4, #26
 8005898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	eba3 0309 	sub.w	r3, r3, r9
 80058a0:	455b      	cmp	r3, fp
 80058a2:	dc33      	bgt.n	800590c <_printf_float+0x384>
 80058a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a8:	429a      	cmp	r2, r3
 80058aa:	db3b      	blt.n	8005924 <_printf_float+0x39c>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	07da      	lsls	r2, r3, #31
 80058b0:	d438      	bmi.n	8005924 <_printf_float+0x39c>
 80058b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b4:	9a05      	ldr	r2, [sp, #20]
 80058b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b8:	1a9a      	subs	r2, r3, r2
 80058ba:	eba3 0901 	sub.w	r9, r3, r1
 80058be:	4591      	cmp	r9, r2
 80058c0:	bfa8      	it	ge
 80058c2:	4691      	movge	r9, r2
 80058c4:	f1b9 0f00 	cmp.w	r9, #0
 80058c8:	dc35      	bgt.n	8005936 <_printf_float+0x3ae>
 80058ca:	f04f 0800 	mov.w	r8, #0
 80058ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058d2:	f104 0a1a 	add.w	sl, r4, #26
 80058d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	eba3 0309 	sub.w	r3, r3, r9
 80058e0:	4543      	cmp	r3, r8
 80058e2:	f77f af79 	ble.w	80057d8 <_printf_float+0x250>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4652      	mov	r2, sl
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	f43f aeaa 	beq.w	800564a <_printf_float+0xc2>
 80058f6:	f108 0801 	add.w	r8, r8, #1
 80058fa:	e7ec      	b.n	80058d6 <_printf_float+0x34e>
 80058fc:	4613      	mov	r3, r2
 80058fe:	4631      	mov	r1, r6
 8005900:	4642      	mov	r2, r8
 8005902:	4628      	mov	r0, r5
 8005904:	47b8      	blx	r7
 8005906:	3001      	adds	r0, #1
 8005908:	d1c0      	bne.n	800588c <_printf_float+0x304>
 800590a:	e69e      	b.n	800564a <_printf_float+0xc2>
 800590c:	2301      	movs	r3, #1
 800590e:	4631      	mov	r1, r6
 8005910:	4628      	mov	r0, r5
 8005912:	9205      	str	r2, [sp, #20]
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	f43f ae97 	beq.w	800564a <_printf_float+0xc2>
 800591c:	9a05      	ldr	r2, [sp, #20]
 800591e:	f10b 0b01 	add.w	fp, fp, #1
 8005922:	e7b9      	b.n	8005898 <_printf_float+0x310>
 8005924:	ee18 3a10 	vmov	r3, s16
 8005928:	4652      	mov	r2, sl
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	d1be      	bne.n	80058b2 <_printf_float+0x32a>
 8005934:	e689      	b.n	800564a <_printf_float+0xc2>
 8005936:	9a05      	ldr	r2, [sp, #20]
 8005938:	464b      	mov	r3, r9
 800593a:	4442      	add	r2, r8
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	d1c1      	bne.n	80058ca <_printf_float+0x342>
 8005946:	e680      	b.n	800564a <_printf_float+0xc2>
 8005948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800594a:	2a01      	cmp	r2, #1
 800594c:	dc01      	bgt.n	8005952 <_printf_float+0x3ca>
 800594e:	07db      	lsls	r3, r3, #31
 8005950:	d538      	bpl.n	80059c4 <_printf_float+0x43c>
 8005952:	2301      	movs	r3, #1
 8005954:	4642      	mov	r2, r8
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f ae74 	beq.w	800564a <_printf_float+0xc2>
 8005962:	ee18 3a10 	vmov	r3, s16
 8005966:	4652      	mov	r2, sl
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	f43f ae6b 	beq.w	800564a <_printf_float+0xc2>
 8005974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005978:	2200      	movs	r2, #0
 800597a:	2300      	movs	r3, #0
 800597c:	f7fb f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8005980:	b9d8      	cbnz	r0, 80059ba <_printf_float+0x432>
 8005982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005984:	f108 0201 	add.w	r2, r8, #1
 8005988:	3b01      	subs	r3, #1
 800598a:	4631      	mov	r1, r6
 800598c:	4628      	mov	r0, r5
 800598e:	47b8      	blx	r7
 8005990:	3001      	adds	r0, #1
 8005992:	d10e      	bne.n	80059b2 <_printf_float+0x42a>
 8005994:	e659      	b.n	800564a <_printf_float+0xc2>
 8005996:	2301      	movs	r3, #1
 8005998:	4652      	mov	r2, sl
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	f43f ae52 	beq.w	800564a <_printf_float+0xc2>
 80059a6:	f108 0801 	add.w	r8, r8, #1
 80059aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ac:	3b01      	subs	r3, #1
 80059ae:	4543      	cmp	r3, r8
 80059b0:	dcf1      	bgt.n	8005996 <_printf_float+0x40e>
 80059b2:	464b      	mov	r3, r9
 80059b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059b8:	e6dc      	b.n	8005774 <_printf_float+0x1ec>
 80059ba:	f04f 0800 	mov.w	r8, #0
 80059be:	f104 0a1a 	add.w	sl, r4, #26
 80059c2:	e7f2      	b.n	80059aa <_printf_float+0x422>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4642      	mov	r2, r8
 80059c8:	e7df      	b.n	800598a <_printf_float+0x402>
 80059ca:	2301      	movs	r3, #1
 80059cc:	464a      	mov	r2, r9
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	f43f ae38 	beq.w	800564a <_printf_float+0xc2>
 80059da:	f108 0801 	add.w	r8, r8, #1
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059e2:	1a5b      	subs	r3, r3, r1
 80059e4:	4543      	cmp	r3, r8
 80059e6:	dcf0      	bgt.n	80059ca <_printf_float+0x442>
 80059e8:	e6fa      	b.n	80057e0 <_printf_float+0x258>
 80059ea:	f04f 0800 	mov.w	r8, #0
 80059ee:	f104 0919 	add.w	r9, r4, #25
 80059f2:	e7f4      	b.n	80059de <_printf_float+0x456>

080059f4 <_printf_common>:
 80059f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	4616      	mov	r6, r2
 80059fa:	4699      	mov	r9, r3
 80059fc:	688a      	ldr	r2, [r1, #8]
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	bfb8      	it	lt
 8005a08:	4613      	movlt	r3, r2
 8005a0a:	6033      	str	r3, [r6, #0]
 8005a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a10:	4607      	mov	r7, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	b10a      	cbz	r2, 8005a1a <_printf_common+0x26>
 8005a16:	3301      	adds	r3, #1
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	0699      	lsls	r1, r3, #26
 8005a1e:	bf42      	ittt	mi
 8005a20:	6833      	ldrmi	r3, [r6, #0]
 8005a22:	3302      	addmi	r3, #2
 8005a24:	6033      	strmi	r3, [r6, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	f015 0506 	ands.w	r5, r5, #6
 8005a2c:	d106      	bne.n	8005a3c <_printf_common+0x48>
 8005a2e:	f104 0a19 	add.w	sl, r4, #25
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	6832      	ldr	r2, [r6, #0]
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dc26      	bgt.n	8005a8a <_printf_common+0x96>
 8005a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a40:	1e13      	subs	r3, r2, #0
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	bf18      	it	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	0692      	lsls	r2, r2, #26
 8005a4a:	d42b      	bmi.n	8005aa4 <_printf_common+0xb0>
 8005a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a50:	4649      	mov	r1, r9
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d01e      	beq.n	8005a98 <_printf_common+0xa4>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	68e5      	ldr	r5, [r4, #12]
 8005a5e:	6832      	ldr	r2, [r6, #0]
 8005a60:	f003 0306 	and.w	r3, r3, #6
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	bf08      	it	eq
 8005a68:	1aad      	subeq	r5, r5, r2
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	bf0c      	ite	eq
 8005a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a74:	2500      	movne	r5, #0
 8005a76:	4293      	cmp	r3, r2
 8005a78:	bfc4      	itt	gt
 8005a7a:	1a9b      	subgt	r3, r3, r2
 8005a7c:	18ed      	addgt	r5, r5, r3
 8005a7e:	2600      	movs	r6, #0
 8005a80:	341a      	adds	r4, #26
 8005a82:	42b5      	cmp	r5, r6
 8005a84:	d11a      	bne.n	8005abc <_printf_common+0xc8>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e008      	b.n	8005a9c <_printf_common+0xa8>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d103      	bne.n	8005aa0 <_printf_common+0xac>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	e7c6      	b.n	8005a32 <_printf_common+0x3e>
 8005aa4:	18e1      	adds	r1, r4, r3
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	2030      	movs	r0, #48	; 0x30
 8005aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aae:	4422      	add	r2, r4
 8005ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ab8:	3302      	adds	r3, #2
 8005aba:	e7c7      	b.n	8005a4c <_printf_common+0x58>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0e6      	beq.n	8005a98 <_printf_common+0xa4>
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7d9      	b.n	8005a82 <_printf_common+0x8e>
	...

08005ad0 <_printf_i>:
 8005ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	7e0f      	ldrb	r7, [r1, #24]
 8005ad6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad8:	2f78      	cmp	r7, #120	; 0x78
 8005ada:	4691      	mov	r9, r2
 8005adc:	4680      	mov	r8, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ae6:	d807      	bhi.n	8005af8 <_printf_i+0x28>
 8005ae8:	2f62      	cmp	r7, #98	; 0x62
 8005aea:	d80a      	bhi.n	8005b02 <_printf_i+0x32>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 80d8 	beq.w	8005ca2 <_printf_i+0x1d2>
 8005af2:	2f58      	cmp	r7, #88	; 0x58
 8005af4:	f000 80a3 	beq.w	8005c3e <_printf_i+0x16e>
 8005af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b00:	e03a      	b.n	8005b78 <_printf_i+0xa8>
 8005b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b06:	2b15      	cmp	r3, #21
 8005b08:	d8f6      	bhi.n	8005af8 <_printf_i+0x28>
 8005b0a:	a101      	add	r1, pc, #4	; (adr r1, 8005b10 <_printf_i+0x40>)
 8005b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005af9 	.word	0x08005af9
 8005b1c:	08005af9 	.word	0x08005af9
 8005b20:	08005af9 	.word	0x08005af9
 8005b24:	08005af9 	.word	0x08005af9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005af9 	.word	0x08005af9
 8005b30:	08005af9 	.word	0x08005af9
 8005b34:	08005af9 	.word	0x08005af9
 8005b38:	08005af9 	.word	0x08005af9
 8005b3c:	08005c89 	.word	0x08005c89
 8005b40:	08005bad 	.word	0x08005bad
 8005b44:	08005c6b 	.word	0x08005c6b
 8005b48:	08005af9 	.word	0x08005af9
 8005b4c:	08005af9 	.word	0x08005af9
 8005b50:	08005cab 	.word	0x08005cab
 8005b54:	08005af9 	.word	0x08005af9
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005af9 	.word	0x08005af9
 8005b60:	08005af9 	.word	0x08005af9
 8005b64:	08005c73 	.word	0x08005c73
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	602a      	str	r2, [r5, #0]
 8005b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0a3      	b.n	8005cc4 <_printf_i+0x1f4>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	6829      	ldr	r1, [r5, #0]
 8005b80:	0606      	lsls	r6, r0, #24
 8005b82:	f101 0304 	add.w	r3, r1, #4
 8005b86:	d50a      	bpl.n	8005b9e <_printf_i+0xce>
 8005b88:	680e      	ldr	r6, [r1, #0]
 8005b8a:	602b      	str	r3, [r5, #0]
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	da03      	bge.n	8005b98 <_printf_i+0xc8>
 8005b90:	232d      	movs	r3, #45	; 0x2d
 8005b92:	4276      	negs	r6, r6
 8005b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b98:	485e      	ldr	r0, [pc, #376]	; (8005d14 <_printf_i+0x244>)
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	e019      	b.n	8005bd2 <_printf_i+0x102>
 8005b9e:	680e      	ldr	r6, [r1, #0]
 8005ba0:	602b      	str	r3, [r5, #0]
 8005ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ba6:	bf18      	it	ne
 8005ba8:	b236      	sxthne	r6, r6
 8005baa:	e7ef      	b.n	8005b8c <_printf_i+0xbc>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	1d19      	adds	r1, r3, #4
 8005bb2:	6029      	str	r1, [r5, #0]
 8005bb4:	0601      	lsls	r1, r0, #24
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0xec>
 8005bb8:	681e      	ldr	r6, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0xf2>
 8005bbc:	0646      	lsls	r6, r0, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0xe8>
 8005bc0:	881e      	ldrh	r6, [r3, #0]
 8005bc2:	4854      	ldr	r0, [pc, #336]	; (8005d14 <_printf_i+0x244>)
 8005bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2308      	moveq	r3, #8
 8005bca:	230a      	movne	r3, #10
 8005bcc:	2100      	movs	r1, #0
 8005bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bd2:	6865      	ldr	r5, [r4, #4]
 8005bd4:	60a5      	str	r5, [r4, #8]
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	bfa2      	ittt	ge
 8005bda:	6821      	ldrge	r1, [r4, #0]
 8005bdc:	f021 0104 	bicge.w	r1, r1, #4
 8005be0:	6021      	strge	r1, [r4, #0]
 8005be2:	b90e      	cbnz	r6, 8005be8 <_printf_i+0x118>
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	d04d      	beq.n	8005c84 <_printf_i+0x1b4>
 8005be8:	4615      	mov	r5, r2
 8005bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bee:	fb03 6711 	mls	r7, r3, r1, r6
 8005bf2:	5dc7      	ldrb	r7, [r0, r7]
 8005bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bf8:	4637      	mov	r7, r6
 8005bfa:	42bb      	cmp	r3, r7
 8005bfc:	460e      	mov	r6, r1
 8005bfe:	d9f4      	bls.n	8005bea <_printf_i+0x11a>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d10b      	bne.n	8005c1c <_printf_i+0x14c>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07de      	lsls	r6, r3, #31
 8005c08:	d508      	bpl.n	8005c1c <_printf_i+0x14c>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	6861      	ldr	r1, [r4, #4]
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	bfde      	ittt	le
 8005c12:	2330      	movle	r3, #48	; 0x30
 8005c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c1c:	1b52      	subs	r2, r2, r5
 8005c1e:	6122      	str	r2, [r4, #16]
 8005c20:	f8cd a000 	str.w	sl, [sp]
 8005c24:	464b      	mov	r3, r9
 8005c26:	aa03      	add	r2, sp, #12
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f7ff fee2 	bl	80059f4 <_printf_common>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d14c      	bne.n	8005cce <_printf_i+0x1fe>
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295
 8005c38:	b004      	add	sp, #16
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	4835      	ldr	r0, [pc, #212]	; (8005d14 <_printf_i+0x244>)
 8005c40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c44:	6829      	ldr	r1, [r5, #0]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c4c:	6029      	str	r1, [r5, #0]
 8005c4e:	061d      	lsls	r5, r3, #24
 8005c50:	d514      	bpl.n	8005c7c <_printf_i+0x1ac>
 8005c52:	07df      	lsls	r7, r3, #31
 8005c54:	bf44      	itt	mi
 8005c56:	f043 0320 	orrmi.w	r3, r3, #32
 8005c5a:	6023      	strmi	r3, [r4, #0]
 8005c5c:	b91e      	cbnz	r6, 8005c66 <_printf_i+0x196>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f023 0320 	bic.w	r3, r3, #32
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	2310      	movs	r3, #16
 8005c68:	e7b0      	b.n	8005bcc <_printf_i+0xfc>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f043 0320 	orr.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2378      	movs	r3, #120	; 0x78
 8005c74:	4828      	ldr	r0, [pc, #160]	; (8005d18 <_printf_i+0x248>)
 8005c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c7a:	e7e3      	b.n	8005c44 <_printf_i+0x174>
 8005c7c:	0659      	lsls	r1, r3, #25
 8005c7e:	bf48      	it	mi
 8005c80:	b2b6      	uxthmi	r6, r6
 8005c82:	e7e6      	b.n	8005c52 <_printf_i+0x182>
 8005c84:	4615      	mov	r5, r2
 8005c86:	e7bb      	b.n	8005c00 <_printf_i+0x130>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	6826      	ldr	r6, [r4, #0]
 8005c8c:	6961      	ldr	r1, [r4, #20]
 8005c8e:	1d18      	adds	r0, r3, #4
 8005c90:	6028      	str	r0, [r5, #0]
 8005c92:	0635      	lsls	r5, r6, #24
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	d501      	bpl.n	8005c9c <_printf_i+0x1cc>
 8005c98:	6019      	str	r1, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <_printf_i+0x1d2>
 8005c9c:	0670      	lsls	r0, r6, #25
 8005c9e:	d5fb      	bpl.n	8005c98 <_printf_i+0x1c8>
 8005ca0:	8019      	strh	r1, [r3, #0]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	4615      	mov	r5, r2
 8005ca8:	e7ba      	b.n	8005c20 <_printf_i+0x150>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	602a      	str	r2, [r5, #0]
 8005cb0:	681d      	ldr	r5, [r3, #0]
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7fa fa9a 	bl	80001f0 <memchr>
 8005cbc:	b108      	cbz	r0, 8005cc2 <_printf_i+0x1f2>
 8005cbe:	1b40      	subs	r0, r0, r5
 8005cc0:	6060      	str	r0, [r4, #4]
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	e7a8      	b.n	8005c20 <_printf_i+0x150>
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	462a      	mov	r2, r5
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d0ab      	beq.n	8005c34 <_printf_i+0x164>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	079b      	lsls	r3, r3, #30
 8005ce0:	d413      	bmi.n	8005d0a <_printf_i+0x23a>
 8005ce2:	68e0      	ldr	r0, [r4, #12]
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	bfb8      	it	lt
 8005cea:	4618      	movlt	r0, r3
 8005cec:	e7a4      	b.n	8005c38 <_printf_i+0x168>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	47d0      	blx	sl
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d09b      	beq.n	8005c34 <_printf_i+0x164>
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	9903      	ldr	r1, [sp, #12]
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dcf2      	bgt.n	8005cee <_printf_i+0x21e>
 8005d08:	e7eb      	b.n	8005ce2 <_printf_i+0x212>
 8005d0a:	2500      	movs	r5, #0
 8005d0c:	f104 0619 	add.w	r6, r4, #25
 8005d10:	e7f5      	b.n	8005cfe <_printf_i+0x22e>
 8005d12:	bf00      	nop
 8005d14:	08009682 	.word	0x08009682
 8005d18:	08009693 	.word	0x08009693

08005d1c <iprintf>:
 8005d1c:	b40f      	push	{r0, r1, r2, r3}
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <iprintf+0x2c>)
 8005d20:	b513      	push	{r0, r1, r4, lr}
 8005d22:	681c      	ldr	r4, [r3, #0]
 8005d24:	b124      	cbz	r4, 8005d30 <iprintf+0x14>
 8005d26:	69a3      	ldr	r3, [r4, #24]
 8005d28:	b913      	cbnz	r3, 8005d30 <iprintf+0x14>
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 fee2 	bl	8006af4 <__sinit>
 8005d30:	ab05      	add	r3, sp, #20
 8005d32:	9a04      	ldr	r2, [sp, #16]
 8005d34:	68a1      	ldr	r1, [r4, #8]
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f001 fc2d 	bl	8007598 <_vfiprintf_r>
 8005d3e:	b002      	add	sp, #8
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	b004      	add	sp, #16
 8005d46:	4770      	bx	lr
 8005d48:	2000005c 	.word	0x2000005c

08005d4c <quorem>:
 8005d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	6903      	ldr	r3, [r0, #16]
 8005d52:	690c      	ldr	r4, [r1, #16]
 8005d54:	42a3      	cmp	r3, r4
 8005d56:	4607      	mov	r7, r0
 8005d58:	f2c0 8081 	blt.w	8005e5e <quorem+0x112>
 8005d5c:	3c01      	subs	r4, #1
 8005d5e:	f101 0814 	add.w	r8, r1, #20
 8005d62:	f100 0514 	add.w	r5, r0, #20
 8005d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d74:	3301      	adds	r3, #1
 8005d76:	429a      	cmp	r2, r3
 8005d78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d80:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d84:	d331      	bcc.n	8005dea <quorem+0x9e>
 8005d86:	f04f 0e00 	mov.w	lr, #0
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	46ac      	mov	ip, r5
 8005d8e:	46f2      	mov	sl, lr
 8005d90:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d94:	b293      	uxth	r3, r2
 8005d96:	fb06 e303 	mla	r3, r6, r3, lr
 8005d9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ebaa 0303 	sub.w	r3, sl, r3
 8005da4:	f8dc a000 	ldr.w	sl, [ip]
 8005da8:	0c12      	lsrs	r2, r2, #16
 8005daa:	fa13 f38a 	uxtah	r3, r3, sl
 8005dae:	fb06 e202 	mla	r2, r6, r2, lr
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	9b00      	ldr	r3, [sp, #0]
 8005db6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dba:	b292      	uxth	r2, r2
 8005dbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005dc8:	4581      	cmp	r9, r0
 8005dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dce:	f84c 3b04 	str.w	r3, [ip], #4
 8005dd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005dd6:	d2db      	bcs.n	8005d90 <quorem+0x44>
 8005dd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ddc:	b92b      	cbnz	r3, 8005dea <quorem+0x9e>
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	3b04      	subs	r3, #4
 8005de2:	429d      	cmp	r5, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	d32e      	bcc.n	8005e46 <quorem+0xfa>
 8005de8:	613c      	str	r4, [r7, #16]
 8005dea:	4638      	mov	r0, r7
 8005dec:	f001 f9b2 	bl	8007154 <__mcmp>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	db24      	blt.n	8005e3e <quorem+0xf2>
 8005df4:	3601      	adds	r6, #1
 8005df6:	4628      	mov	r0, r5
 8005df8:	f04f 0c00 	mov.w	ip, #0
 8005dfc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e00:	f8d0 e000 	ldr.w	lr, [r0]
 8005e04:	b293      	uxth	r3, r2
 8005e06:	ebac 0303 	sub.w	r3, ip, r3
 8005e0a:	0c12      	lsrs	r2, r2, #16
 8005e0c:	fa13 f38e 	uxtah	r3, r3, lr
 8005e10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e1e:	45c1      	cmp	r9, r8
 8005e20:	f840 3b04 	str.w	r3, [r0], #4
 8005e24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e28:	d2e8      	bcs.n	8005dfc <quorem+0xb0>
 8005e2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e32:	b922      	cbnz	r2, 8005e3e <quorem+0xf2>
 8005e34:	3b04      	subs	r3, #4
 8005e36:	429d      	cmp	r5, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	d30a      	bcc.n	8005e52 <quorem+0x106>
 8005e3c:	613c      	str	r4, [r7, #16]
 8005e3e:	4630      	mov	r0, r6
 8005e40:	b003      	add	sp, #12
 8005e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e46:	6812      	ldr	r2, [r2, #0]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d1cc      	bne.n	8005de8 <quorem+0x9c>
 8005e4e:	3c01      	subs	r4, #1
 8005e50:	e7c7      	b.n	8005de2 <quorem+0x96>
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	3b04      	subs	r3, #4
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	d1f0      	bne.n	8005e3c <quorem+0xf0>
 8005e5a:	3c01      	subs	r4, #1
 8005e5c:	e7eb      	b.n	8005e36 <quorem+0xea>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e7ee      	b.n	8005e40 <quorem+0xf4>
 8005e62:	0000      	movs	r0, r0
 8005e64:	0000      	movs	r0, r0
	...

08005e68 <_dtoa_r>:
 8005e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	ed2d 8b04 	vpush	{d8-d9}
 8005e70:	ec57 6b10 	vmov	r6, r7, d0
 8005e74:	b093      	sub	sp, #76	; 0x4c
 8005e76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e7c:	9106      	str	r1, [sp, #24]
 8005e7e:	ee10 aa10 	vmov	sl, s0
 8005e82:	4604      	mov	r4, r0
 8005e84:	9209      	str	r2, [sp, #36]	; 0x24
 8005e86:	930c      	str	r3, [sp, #48]	; 0x30
 8005e88:	46bb      	mov	fp, r7
 8005e8a:	b975      	cbnz	r5, 8005eaa <_dtoa_r+0x42>
 8005e8c:	2010      	movs	r0, #16
 8005e8e:	f000 fed7 	bl	8006c40 <malloc>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6260      	str	r0, [r4, #36]	; 0x24
 8005e96:	b920      	cbnz	r0, 8005ea2 <_dtoa_r+0x3a>
 8005e98:	4ba7      	ldr	r3, [pc, #668]	; (8006138 <_dtoa_r+0x2d0>)
 8005e9a:	21ea      	movs	r1, #234	; 0xea
 8005e9c:	48a7      	ldr	r0, [pc, #668]	; (800613c <_dtoa_r+0x2d4>)
 8005e9e:	f001 fdd1 	bl	8007a44 <__assert_func>
 8005ea2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ea6:	6005      	str	r5, [r0, #0]
 8005ea8:	60c5      	str	r5, [r0, #12]
 8005eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	b151      	cbz	r1, 8005ec6 <_dtoa_r+0x5e>
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	604a      	str	r2, [r1, #4]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4093      	lsls	r3, r2
 8005eb8:	608b      	str	r3, [r1, #8]
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 ff08 	bl	8006cd0 <_Bfree>
 8005ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	1e3b      	subs	r3, r7, #0
 8005ec8:	bfaa      	itet	ge
 8005eca:	2300      	movge	r3, #0
 8005ecc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ed0:	f8c8 3000 	strge.w	r3, [r8]
 8005ed4:	4b9a      	ldr	r3, [pc, #616]	; (8006140 <_dtoa_r+0x2d8>)
 8005ed6:	bfbc      	itt	lt
 8005ed8:	2201      	movlt	r2, #1
 8005eda:	f8c8 2000 	strlt.w	r2, [r8]
 8005ede:	ea33 030b 	bics.w	r3, r3, fp
 8005ee2:	d11b      	bne.n	8005f1c <_dtoa_r+0xb4>
 8005ee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ee6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ef0:	4333      	orrs	r3, r6
 8005ef2:	f000 8592 	beq.w	8006a1a <_dtoa_r+0xbb2>
 8005ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ef8:	b963      	cbnz	r3, 8005f14 <_dtoa_r+0xac>
 8005efa:	4b92      	ldr	r3, [pc, #584]	; (8006144 <_dtoa_r+0x2dc>)
 8005efc:	e022      	b.n	8005f44 <_dtoa_r+0xdc>
 8005efe:	4b92      	ldr	r3, [pc, #584]	; (8006148 <_dtoa_r+0x2e0>)
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	3308      	adds	r3, #8
 8005f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	9801      	ldr	r0, [sp, #4]
 8005f0a:	b013      	add	sp, #76	; 0x4c
 8005f0c:	ecbd 8b04 	vpop	{d8-d9}
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	4b8b      	ldr	r3, [pc, #556]	; (8006144 <_dtoa_r+0x2dc>)
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	3303      	adds	r3, #3
 8005f1a:	e7f3      	b.n	8005f04 <_dtoa_r+0x9c>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2300      	movs	r3, #0
 8005f20:	4650      	mov	r0, sl
 8005f22:	4659      	mov	r1, fp
 8005f24:	f7fa fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f28:	ec4b ab19 	vmov	d9, sl, fp
 8005f2c:	4680      	mov	r8, r0
 8005f2e:	b158      	cbz	r0, 8005f48 <_dtoa_r+0xe0>
 8005f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f32:	2301      	movs	r3, #1
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 856b 	beq.w	8006a14 <_dtoa_r+0xbac>
 8005f3e:	4883      	ldr	r0, [pc, #524]	; (800614c <_dtoa_r+0x2e4>)
 8005f40:	6018      	str	r0, [r3, #0]
 8005f42:	1e43      	subs	r3, r0, #1
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	e7df      	b.n	8005f08 <_dtoa_r+0xa0>
 8005f48:	ec4b ab10 	vmov	d0, sl, fp
 8005f4c:	aa10      	add	r2, sp, #64	; 0x40
 8005f4e:	a911      	add	r1, sp, #68	; 0x44
 8005f50:	4620      	mov	r0, r4
 8005f52:	f001 f9a5 	bl	80072a0 <__d2b>
 8005f56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f5a:	ee08 0a10 	vmov	s16, r0
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	f000 8084 	beq.w	800606c <_dtoa_r+0x204>
 8005f64:	ee19 3a90 	vmov	r3, s19
 8005f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f70:	4656      	mov	r6, sl
 8005f72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f7e:	4b74      	ldr	r3, [pc, #464]	; (8006150 <_dtoa_r+0x2e8>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa f987 	bl	8000298 <__aeabi_dsub>
 8005f8a:	a365      	add	r3, pc, #404	; (adr r3, 8006120 <_dtoa_r+0x2b8>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f7fa fb3a 	bl	8000608 <__aeabi_dmul>
 8005f94:	a364      	add	r3, pc, #400	; (adr r3, 8006128 <_dtoa_r+0x2c0>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f97f 	bl	800029c <__adddf3>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	460f      	mov	r7, r1
 8005fa4:	f7fa fac6 	bl	8000534 <__aeabi_i2d>
 8005fa8:	a361      	add	r3, pc, #388	; (adr r3, 8006130 <_dtoa_r+0x2c8>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f7fa fb2b 	bl	8000608 <__aeabi_dmul>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f7fa f96f 	bl	800029c <__adddf3>
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	f7fa fdd1 	bl	8000b68 <__aeabi_d2iz>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	9000      	str	r0, [sp, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa fd8c 	bl	8000aec <__aeabi_dcmplt>
 8005fd4:	b150      	cbz	r0, 8005fec <_dtoa_r+0x184>
 8005fd6:	9800      	ldr	r0, [sp, #0]
 8005fd8:	f7fa faac 	bl	8000534 <__aeabi_i2d>
 8005fdc:	4632      	mov	r2, r6
 8005fde:	463b      	mov	r3, r7
 8005fe0:	f7fa fd7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fe4:	b910      	cbnz	r0, 8005fec <_dtoa_r+0x184>
 8005fe6:	9b00      	ldr	r3, [sp, #0]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	9b00      	ldr	r3, [sp, #0]
 8005fee:	2b16      	cmp	r3, #22
 8005ff0:	d85a      	bhi.n	80060a8 <_dtoa_r+0x240>
 8005ff2:	9a00      	ldr	r2, [sp, #0]
 8005ff4:	4b57      	ldr	r3, [pc, #348]	; (8006154 <_dtoa_r+0x2ec>)
 8005ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	ec51 0b19 	vmov	r0, r1, d9
 8006002:	f7fa fd73 	bl	8000aec <__aeabi_dcmplt>
 8006006:	2800      	cmp	r0, #0
 8006008:	d050      	beq.n	80060ac <_dtoa_r+0x244>
 800600a:	9b00      	ldr	r3, [sp, #0]
 800600c:	3b01      	subs	r3, #1
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	2300      	movs	r3, #0
 8006012:	930b      	str	r3, [sp, #44]	; 0x2c
 8006014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006016:	1b5d      	subs	r5, r3, r5
 8006018:	1e6b      	subs	r3, r5, #1
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	bf45      	ittet	mi
 800601e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006022:	9304      	strmi	r3, [sp, #16]
 8006024:	2300      	movpl	r3, #0
 8006026:	2300      	movmi	r3, #0
 8006028:	bf4c      	ite	mi
 800602a:	9305      	strmi	r3, [sp, #20]
 800602c:	9304      	strpl	r3, [sp, #16]
 800602e:	9b00      	ldr	r3, [sp, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	db3d      	blt.n	80060b0 <_dtoa_r+0x248>
 8006034:	9b05      	ldr	r3, [sp, #20]
 8006036:	9a00      	ldr	r2, [sp, #0]
 8006038:	920a      	str	r2, [sp, #40]	; 0x28
 800603a:	4413      	add	r3, r2
 800603c:	9305      	str	r3, [sp, #20]
 800603e:	2300      	movs	r3, #0
 8006040:	9307      	str	r3, [sp, #28]
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	2b09      	cmp	r3, #9
 8006046:	f200 8089 	bhi.w	800615c <_dtoa_r+0x2f4>
 800604a:	2b05      	cmp	r3, #5
 800604c:	bfc4      	itt	gt
 800604e:	3b04      	subgt	r3, #4
 8006050:	9306      	strgt	r3, [sp, #24]
 8006052:	9b06      	ldr	r3, [sp, #24]
 8006054:	f1a3 0302 	sub.w	r3, r3, #2
 8006058:	bfcc      	ite	gt
 800605a:	2500      	movgt	r5, #0
 800605c:	2501      	movle	r5, #1
 800605e:	2b03      	cmp	r3, #3
 8006060:	f200 8087 	bhi.w	8006172 <_dtoa_r+0x30a>
 8006064:	e8df f003 	tbb	[pc, r3]
 8006068:	59383a2d 	.word	0x59383a2d
 800606c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006070:	441d      	add	r5, r3
 8006072:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006076:	2b20      	cmp	r3, #32
 8006078:	bfc1      	itttt	gt
 800607a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800607e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006082:	fa0b f303 	lslgt.w	r3, fp, r3
 8006086:	fa26 f000 	lsrgt.w	r0, r6, r0
 800608a:	bfda      	itte	le
 800608c:	f1c3 0320 	rsble	r3, r3, #32
 8006090:	fa06 f003 	lslle.w	r0, r6, r3
 8006094:	4318      	orrgt	r0, r3
 8006096:	f7fa fa3d 	bl	8000514 <__aeabi_ui2d>
 800609a:	2301      	movs	r3, #1
 800609c:	4606      	mov	r6, r0
 800609e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060a2:	3d01      	subs	r5, #1
 80060a4:	930e      	str	r3, [sp, #56]	; 0x38
 80060a6:	e76a      	b.n	8005f7e <_dtoa_r+0x116>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e7b2      	b.n	8006012 <_dtoa_r+0x1aa>
 80060ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80060ae:	e7b1      	b.n	8006014 <_dtoa_r+0x1ac>
 80060b0:	9b04      	ldr	r3, [sp, #16]
 80060b2:	9a00      	ldr	r2, [sp, #0]
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	9304      	str	r3, [sp, #16]
 80060b8:	4253      	negs	r3, r2
 80060ba:	9307      	str	r3, [sp, #28]
 80060bc:	2300      	movs	r3, #0
 80060be:	930a      	str	r3, [sp, #40]	; 0x28
 80060c0:	e7bf      	b.n	8006042 <_dtoa_r+0x1da>
 80060c2:	2300      	movs	r3, #0
 80060c4:	9308      	str	r3, [sp, #32]
 80060c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dc55      	bgt.n	8006178 <_dtoa_r+0x310>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060d2:	461a      	mov	r2, r3
 80060d4:	9209      	str	r2, [sp, #36]	; 0x24
 80060d6:	e00c      	b.n	80060f2 <_dtoa_r+0x28a>
 80060d8:	2301      	movs	r3, #1
 80060da:	e7f3      	b.n	80060c4 <_dtoa_r+0x25c>
 80060dc:	2300      	movs	r3, #0
 80060de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e0:	9308      	str	r3, [sp, #32]
 80060e2:	9b00      	ldr	r3, [sp, #0]
 80060e4:	4413      	add	r3, r2
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	3301      	adds	r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	9303      	str	r3, [sp, #12]
 80060ee:	bfb8      	it	lt
 80060f0:	2301      	movlt	r3, #1
 80060f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80060f4:	2200      	movs	r2, #0
 80060f6:	6042      	str	r2, [r0, #4]
 80060f8:	2204      	movs	r2, #4
 80060fa:	f102 0614 	add.w	r6, r2, #20
 80060fe:	429e      	cmp	r6, r3
 8006100:	6841      	ldr	r1, [r0, #4]
 8006102:	d93d      	bls.n	8006180 <_dtoa_r+0x318>
 8006104:	4620      	mov	r0, r4
 8006106:	f000 fda3 	bl	8006c50 <_Balloc>
 800610a:	9001      	str	r0, [sp, #4]
 800610c:	2800      	cmp	r0, #0
 800610e:	d13b      	bne.n	8006188 <_dtoa_r+0x320>
 8006110:	4b11      	ldr	r3, [pc, #68]	; (8006158 <_dtoa_r+0x2f0>)
 8006112:	4602      	mov	r2, r0
 8006114:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006118:	e6c0      	b.n	8005e9c <_dtoa_r+0x34>
 800611a:	2301      	movs	r3, #1
 800611c:	e7df      	b.n	80060de <_dtoa_r+0x276>
 800611e:	bf00      	nop
 8006120:	636f4361 	.word	0x636f4361
 8006124:	3fd287a7 	.word	0x3fd287a7
 8006128:	8b60c8b3 	.word	0x8b60c8b3
 800612c:	3fc68a28 	.word	0x3fc68a28
 8006130:	509f79fb 	.word	0x509f79fb
 8006134:	3fd34413 	.word	0x3fd34413
 8006138:	080096b1 	.word	0x080096b1
 800613c:	080096c8 	.word	0x080096c8
 8006140:	7ff00000 	.word	0x7ff00000
 8006144:	080096ad 	.word	0x080096ad
 8006148:	080096a4 	.word	0x080096a4
 800614c:	08009681 	.word	0x08009681
 8006150:	3ff80000 	.word	0x3ff80000
 8006154:	08009818 	.word	0x08009818
 8006158:	08009723 	.word	0x08009723
 800615c:	2501      	movs	r5, #1
 800615e:	2300      	movs	r3, #0
 8006160:	9306      	str	r3, [sp, #24]
 8006162:	9508      	str	r5, [sp, #32]
 8006164:	f04f 33ff 	mov.w	r3, #4294967295
 8006168:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	2312      	movs	r3, #18
 8006170:	e7b0      	b.n	80060d4 <_dtoa_r+0x26c>
 8006172:	2301      	movs	r3, #1
 8006174:	9308      	str	r3, [sp, #32]
 8006176:	e7f5      	b.n	8006164 <_dtoa_r+0x2fc>
 8006178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800617e:	e7b8      	b.n	80060f2 <_dtoa_r+0x28a>
 8006180:	3101      	adds	r1, #1
 8006182:	6041      	str	r1, [r0, #4]
 8006184:	0052      	lsls	r2, r2, #1
 8006186:	e7b8      	b.n	80060fa <_dtoa_r+0x292>
 8006188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800618a:	9a01      	ldr	r2, [sp, #4]
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	9b03      	ldr	r3, [sp, #12]
 8006190:	2b0e      	cmp	r3, #14
 8006192:	f200 809d 	bhi.w	80062d0 <_dtoa_r+0x468>
 8006196:	2d00      	cmp	r5, #0
 8006198:	f000 809a 	beq.w	80062d0 <_dtoa_r+0x468>
 800619c:	9b00      	ldr	r3, [sp, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dd32      	ble.n	8006208 <_dtoa_r+0x3a0>
 80061a2:	4ab7      	ldr	r2, [pc, #732]	; (8006480 <_dtoa_r+0x618>)
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061b0:	9b00      	ldr	r3, [sp, #0]
 80061b2:	05d8      	lsls	r0, r3, #23
 80061b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061b8:	d516      	bpl.n	80061e8 <_dtoa_r+0x380>
 80061ba:	4bb2      	ldr	r3, [pc, #712]	; (8006484 <_dtoa_r+0x61c>)
 80061bc:	ec51 0b19 	vmov	r0, r1, d9
 80061c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061c4:	f7fa fb4a 	bl	800085c <__aeabi_ddiv>
 80061c8:	f007 070f 	and.w	r7, r7, #15
 80061cc:	4682      	mov	sl, r0
 80061ce:	468b      	mov	fp, r1
 80061d0:	2503      	movs	r5, #3
 80061d2:	4eac      	ldr	r6, [pc, #688]	; (8006484 <_dtoa_r+0x61c>)
 80061d4:	b957      	cbnz	r7, 80061ec <_dtoa_r+0x384>
 80061d6:	4642      	mov	r2, r8
 80061d8:	464b      	mov	r3, r9
 80061da:	4650      	mov	r0, sl
 80061dc:	4659      	mov	r1, fp
 80061de:	f7fa fb3d 	bl	800085c <__aeabi_ddiv>
 80061e2:	4682      	mov	sl, r0
 80061e4:	468b      	mov	fp, r1
 80061e6:	e028      	b.n	800623a <_dtoa_r+0x3d2>
 80061e8:	2502      	movs	r5, #2
 80061ea:	e7f2      	b.n	80061d2 <_dtoa_r+0x36a>
 80061ec:	07f9      	lsls	r1, r7, #31
 80061ee:	d508      	bpl.n	8006202 <_dtoa_r+0x39a>
 80061f0:	4640      	mov	r0, r8
 80061f2:	4649      	mov	r1, r9
 80061f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061f8:	f7fa fa06 	bl	8000608 <__aeabi_dmul>
 80061fc:	3501      	adds	r5, #1
 80061fe:	4680      	mov	r8, r0
 8006200:	4689      	mov	r9, r1
 8006202:	107f      	asrs	r7, r7, #1
 8006204:	3608      	adds	r6, #8
 8006206:	e7e5      	b.n	80061d4 <_dtoa_r+0x36c>
 8006208:	f000 809b 	beq.w	8006342 <_dtoa_r+0x4da>
 800620c:	9b00      	ldr	r3, [sp, #0]
 800620e:	4f9d      	ldr	r7, [pc, #628]	; (8006484 <_dtoa_r+0x61c>)
 8006210:	425e      	negs	r6, r3
 8006212:	4b9b      	ldr	r3, [pc, #620]	; (8006480 <_dtoa_r+0x618>)
 8006214:	f006 020f 	and.w	r2, r6, #15
 8006218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	ec51 0b19 	vmov	r0, r1, d9
 8006224:	f7fa f9f0 	bl	8000608 <__aeabi_dmul>
 8006228:	1136      	asrs	r6, r6, #4
 800622a:	4682      	mov	sl, r0
 800622c:	468b      	mov	fp, r1
 800622e:	2300      	movs	r3, #0
 8006230:	2502      	movs	r5, #2
 8006232:	2e00      	cmp	r6, #0
 8006234:	d17a      	bne.n	800632c <_dtoa_r+0x4c4>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1d3      	bne.n	80061e2 <_dtoa_r+0x37a>
 800623a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8082 	beq.w	8006346 <_dtoa_r+0x4de>
 8006242:	4b91      	ldr	r3, [pc, #580]	; (8006488 <_dtoa_r+0x620>)
 8006244:	2200      	movs	r2, #0
 8006246:	4650      	mov	r0, sl
 8006248:	4659      	mov	r1, fp
 800624a:	f7fa fc4f 	bl	8000aec <__aeabi_dcmplt>
 800624e:	2800      	cmp	r0, #0
 8006250:	d079      	beq.n	8006346 <_dtoa_r+0x4de>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d076      	beq.n	8006346 <_dtoa_r+0x4de>
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	dd36      	ble.n	80062cc <_dtoa_r+0x464>
 800625e:	9b00      	ldr	r3, [sp, #0]
 8006260:	4650      	mov	r0, sl
 8006262:	4659      	mov	r1, fp
 8006264:	1e5f      	subs	r7, r3, #1
 8006266:	2200      	movs	r2, #0
 8006268:	4b88      	ldr	r3, [pc, #544]	; (800648c <_dtoa_r+0x624>)
 800626a:	f7fa f9cd 	bl	8000608 <__aeabi_dmul>
 800626e:	9e02      	ldr	r6, [sp, #8]
 8006270:	4682      	mov	sl, r0
 8006272:	468b      	mov	fp, r1
 8006274:	3501      	adds	r5, #1
 8006276:	4628      	mov	r0, r5
 8006278:	f7fa f95c 	bl	8000534 <__aeabi_i2d>
 800627c:	4652      	mov	r2, sl
 800627e:	465b      	mov	r3, fp
 8006280:	f7fa f9c2 	bl	8000608 <__aeabi_dmul>
 8006284:	4b82      	ldr	r3, [pc, #520]	; (8006490 <_dtoa_r+0x628>)
 8006286:	2200      	movs	r2, #0
 8006288:	f7fa f808 	bl	800029c <__adddf3>
 800628c:	46d0      	mov	r8, sl
 800628e:	46d9      	mov	r9, fp
 8006290:	4682      	mov	sl, r0
 8006292:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006296:	2e00      	cmp	r6, #0
 8006298:	d158      	bne.n	800634c <_dtoa_r+0x4e4>
 800629a:	4b7e      	ldr	r3, [pc, #504]	; (8006494 <_dtoa_r+0x62c>)
 800629c:	2200      	movs	r2, #0
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	f7f9 fff9 	bl	8000298 <__aeabi_dsub>
 80062a6:	4652      	mov	r2, sl
 80062a8:	465b      	mov	r3, fp
 80062aa:	4680      	mov	r8, r0
 80062ac:	4689      	mov	r9, r1
 80062ae:	f7fa fc3b 	bl	8000b28 <__aeabi_dcmpgt>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f040 8295 	bne.w	80067e2 <_dtoa_r+0x97a>
 80062b8:	4652      	mov	r2, sl
 80062ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7fa fc13 	bl	8000aec <__aeabi_dcmplt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 8289 	bne.w	80067de <_dtoa_r+0x976>
 80062cc:	ec5b ab19 	vmov	sl, fp, d9
 80062d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f2c0 8148 	blt.w	8006568 <_dtoa_r+0x700>
 80062d8:	9a00      	ldr	r2, [sp, #0]
 80062da:	2a0e      	cmp	r2, #14
 80062dc:	f300 8144 	bgt.w	8006568 <_dtoa_r+0x700>
 80062e0:	4b67      	ldr	r3, [pc, #412]	; (8006480 <_dtoa_r+0x618>)
 80062e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f280 80d5 	bge.w	800649c <_dtoa_r+0x634>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f300 80d1 	bgt.w	800649c <_dtoa_r+0x634>
 80062fa:	f040 826f 	bne.w	80067dc <_dtoa_r+0x974>
 80062fe:	4b65      	ldr	r3, [pc, #404]	; (8006494 <_dtoa_r+0x62c>)
 8006300:	2200      	movs	r2, #0
 8006302:	4640      	mov	r0, r8
 8006304:	4649      	mov	r1, r9
 8006306:	f7fa f97f 	bl	8000608 <__aeabi_dmul>
 800630a:	4652      	mov	r2, sl
 800630c:	465b      	mov	r3, fp
 800630e:	f7fa fc01 	bl	8000b14 <__aeabi_dcmpge>
 8006312:	9e03      	ldr	r6, [sp, #12]
 8006314:	4637      	mov	r7, r6
 8006316:	2800      	cmp	r0, #0
 8006318:	f040 8245 	bne.w	80067a6 <_dtoa_r+0x93e>
 800631c:	9d01      	ldr	r5, [sp, #4]
 800631e:	2331      	movs	r3, #49	; 0x31
 8006320:	f805 3b01 	strb.w	r3, [r5], #1
 8006324:	9b00      	ldr	r3, [sp, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	e240      	b.n	80067ae <_dtoa_r+0x946>
 800632c:	07f2      	lsls	r2, r6, #31
 800632e:	d505      	bpl.n	800633c <_dtoa_r+0x4d4>
 8006330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006334:	f7fa f968 	bl	8000608 <__aeabi_dmul>
 8006338:	3501      	adds	r5, #1
 800633a:	2301      	movs	r3, #1
 800633c:	1076      	asrs	r6, r6, #1
 800633e:	3708      	adds	r7, #8
 8006340:	e777      	b.n	8006232 <_dtoa_r+0x3ca>
 8006342:	2502      	movs	r5, #2
 8006344:	e779      	b.n	800623a <_dtoa_r+0x3d2>
 8006346:	9f00      	ldr	r7, [sp, #0]
 8006348:	9e03      	ldr	r6, [sp, #12]
 800634a:	e794      	b.n	8006276 <_dtoa_r+0x40e>
 800634c:	9901      	ldr	r1, [sp, #4]
 800634e:	4b4c      	ldr	r3, [pc, #304]	; (8006480 <_dtoa_r+0x618>)
 8006350:	4431      	add	r1, r6
 8006352:	910d      	str	r1, [sp, #52]	; 0x34
 8006354:	9908      	ldr	r1, [sp, #32]
 8006356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800635a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800635e:	2900      	cmp	r1, #0
 8006360:	d043      	beq.n	80063ea <_dtoa_r+0x582>
 8006362:	494d      	ldr	r1, [pc, #308]	; (8006498 <_dtoa_r+0x630>)
 8006364:	2000      	movs	r0, #0
 8006366:	f7fa fa79 	bl	800085c <__aeabi_ddiv>
 800636a:	4652      	mov	r2, sl
 800636c:	465b      	mov	r3, fp
 800636e:	f7f9 ff93 	bl	8000298 <__aeabi_dsub>
 8006372:	9d01      	ldr	r5, [sp, #4]
 8006374:	4682      	mov	sl, r0
 8006376:	468b      	mov	fp, r1
 8006378:	4649      	mov	r1, r9
 800637a:	4640      	mov	r0, r8
 800637c:	f7fa fbf4 	bl	8000b68 <__aeabi_d2iz>
 8006380:	4606      	mov	r6, r0
 8006382:	f7fa f8d7 	bl	8000534 <__aeabi_i2d>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7f9 ff83 	bl	8000298 <__aeabi_dsub>
 8006392:	3630      	adds	r6, #48	; 0x30
 8006394:	f805 6b01 	strb.w	r6, [r5], #1
 8006398:	4652      	mov	r2, sl
 800639a:	465b      	mov	r3, fp
 800639c:	4680      	mov	r8, r0
 800639e:	4689      	mov	r9, r1
 80063a0:	f7fa fba4 	bl	8000aec <__aeabi_dcmplt>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d163      	bne.n	8006470 <_dtoa_r+0x608>
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	4936      	ldr	r1, [pc, #216]	; (8006488 <_dtoa_r+0x620>)
 80063ae:	2000      	movs	r0, #0
 80063b0:	f7f9 ff72 	bl	8000298 <__aeabi_dsub>
 80063b4:	4652      	mov	r2, sl
 80063b6:	465b      	mov	r3, fp
 80063b8:	f7fa fb98 	bl	8000aec <__aeabi_dcmplt>
 80063bc:	2800      	cmp	r0, #0
 80063be:	f040 80b5 	bne.w	800652c <_dtoa_r+0x6c4>
 80063c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063c4:	429d      	cmp	r5, r3
 80063c6:	d081      	beq.n	80062cc <_dtoa_r+0x464>
 80063c8:	4b30      	ldr	r3, [pc, #192]	; (800648c <_dtoa_r+0x624>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7fa f91a 	bl	8000608 <__aeabi_dmul>
 80063d4:	4b2d      	ldr	r3, [pc, #180]	; (800648c <_dtoa_r+0x624>)
 80063d6:	4682      	mov	sl, r0
 80063d8:	468b      	mov	fp, r1
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	2200      	movs	r2, #0
 80063e0:	f7fa f912 	bl	8000608 <__aeabi_dmul>
 80063e4:	4680      	mov	r8, r0
 80063e6:	4689      	mov	r9, r1
 80063e8:	e7c6      	b.n	8006378 <_dtoa_r+0x510>
 80063ea:	4650      	mov	r0, sl
 80063ec:	4659      	mov	r1, fp
 80063ee:	f7fa f90b 	bl	8000608 <__aeabi_dmul>
 80063f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f4:	9d01      	ldr	r5, [sp, #4]
 80063f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063f8:	4682      	mov	sl, r0
 80063fa:	468b      	mov	fp, r1
 80063fc:	4649      	mov	r1, r9
 80063fe:	4640      	mov	r0, r8
 8006400:	f7fa fbb2 	bl	8000b68 <__aeabi_d2iz>
 8006404:	4606      	mov	r6, r0
 8006406:	f7fa f895 	bl	8000534 <__aeabi_i2d>
 800640a:	3630      	adds	r6, #48	; 0x30
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	f7f9 ff40 	bl	8000298 <__aeabi_dsub>
 8006418:	f805 6b01 	strb.w	r6, [r5], #1
 800641c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800641e:	429d      	cmp	r5, r3
 8006420:	4680      	mov	r8, r0
 8006422:	4689      	mov	r9, r1
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	d124      	bne.n	8006474 <_dtoa_r+0x60c>
 800642a:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <_dtoa_r+0x630>)
 800642c:	4650      	mov	r0, sl
 800642e:	4659      	mov	r1, fp
 8006430:	f7f9 ff34 	bl	800029c <__adddf3>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7fa fb74 	bl	8000b28 <__aeabi_dcmpgt>
 8006440:	2800      	cmp	r0, #0
 8006442:	d173      	bne.n	800652c <_dtoa_r+0x6c4>
 8006444:	4652      	mov	r2, sl
 8006446:	465b      	mov	r3, fp
 8006448:	4913      	ldr	r1, [pc, #76]	; (8006498 <_dtoa_r+0x630>)
 800644a:	2000      	movs	r0, #0
 800644c:	f7f9 ff24 	bl	8000298 <__aeabi_dsub>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4640      	mov	r0, r8
 8006456:	4649      	mov	r1, r9
 8006458:	f7fa fb48 	bl	8000aec <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f43f af35 	beq.w	80062cc <_dtoa_r+0x464>
 8006462:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006464:	1e6b      	subs	r3, r5, #1
 8006466:	930f      	str	r3, [sp, #60]	; 0x3c
 8006468:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800646c:	2b30      	cmp	r3, #48	; 0x30
 800646e:	d0f8      	beq.n	8006462 <_dtoa_r+0x5fa>
 8006470:	9700      	str	r7, [sp, #0]
 8006472:	e049      	b.n	8006508 <_dtoa_r+0x6a0>
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <_dtoa_r+0x624>)
 8006476:	f7fa f8c7 	bl	8000608 <__aeabi_dmul>
 800647a:	4680      	mov	r8, r0
 800647c:	4689      	mov	r9, r1
 800647e:	e7bd      	b.n	80063fc <_dtoa_r+0x594>
 8006480:	08009818 	.word	0x08009818
 8006484:	080097f0 	.word	0x080097f0
 8006488:	3ff00000 	.word	0x3ff00000
 800648c:	40240000 	.word	0x40240000
 8006490:	401c0000 	.word	0x401c0000
 8006494:	40140000 	.word	0x40140000
 8006498:	3fe00000 	.word	0x3fe00000
 800649c:	9d01      	ldr	r5, [sp, #4]
 800649e:	4656      	mov	r6, sl
 80064a0:	465f      	mov	r7, fp
 80064a2:	4642      	mov	r2, r8
 80064a4:	464b      	mov	r3, r9
 80064a6:	4630      	mov	r0, r6
 80064a8:	4639      	mov	r1, r7
 80064aa:	f7fa f9d7 	bl	800085c <__aeabi_ddiv>
 80064ae:	f7fa fb5b 	bl	8000b68 <__aeabi_d2iz>
 80064b2:	4682      	mov	sl, r0
 80064b4:	f7fa f83e 	bl	8000534 <__aeabi_i2d>
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	f7fa f8a4 	bl	8000608 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064cc:	f7f9 fee4 	bl	8000298 <__aeabi_dsub>
 80064d0:	f805 6b01 	strb.w	r6, [r5], #1
 80064d4:	9e01      	ldr	r6, [sp, #4]
 80064d6:	9f03      	ldr	r7, [sp, #12]
 80064d8:	1bae      	subs	r6, r5, r6
 80064da:	42b7      	cmp	r7, r6
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	d135      	bne.n	800654e <_dtoa_r+0x6e6>
 80064e2:	f7f9 fedb 	bl	800029c <__adddf3>
 80064e6:	4642      	mov	r2, r8
 80064e8:	464b      	mov	r3, r9
 80064ea:	4606      	mov	r6, r0
 80064ec:	460f      	mov	r7, r1
 80064ee:	f7fa fb1b 	bl	8000b28 <__aeabi_dcmpgt>
 80064f2:	b9d0      	cbnz	r0, 800652a <_dtoa_r+0x6c2>
 80064f4:	4642      	mov	r2, r8
 80064f6:	464b      	mov	r3, r9
 80064f8:	4630      	mov	r0, r6
 80064fa:	4639      	mov	r1, r7
 80064fc:	f7fa faec 	bl	8000ad8 <__aeabi_dcmpeq>
 8006500:	b110      	cbz	r0, 8006508 <_dtoa_r+0x6a0>
 8006502:	f01a 0f01 	tst.w	sl, #1
 8006506:	d110      	bne.n	800652a <_dtoa_r+0x6c2>
 8006508:	4620      	mov	r0, r4
 800650a:	ee18 1a10 	vmov	r1, s16
 800650e:	f000 fbdf 	bl	8006cd0 <_Bfree>
 8006512:	2300      	movs	r3, #0
 8006514:	9800      	ldr	r0, [sp, #0]
 8006516:	702b      	strb	r3, [r5, #0]
 8006518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800651a:	3001      	adds	r0, #1
 800651c:	6018      	str	r0, [r3, #0]
 800651e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006520:	2b00      	cmp	r3, #0
 8006522:	f43f acf1 	beq.w	8005f08 <_dtoa_r+0xa0>
 8006526:	601d      	str	r5, [r3, #0]
 8006528:	e4ee      	b.n	8005f08 <_dtoa_r+0xa0>
 800652a:	9f00      	ldr	r7, [sp, #0]
 800652c:	462b      	mov	r3, r5
 800652e:	461d      	mov	r5, r3
 8006530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006534:	2a39      	cmp	r2, #57	; 0x39
 8006536:	d106      	bne.n	8006546 <_dtoa_r+0x6de>
 8006538:	9a01      	ldr	r2, [sp, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d1f7      	bne.n	800652e <_dtoa_r+0x6c6>
 800653e:	9901      	ldr	r1, [sp, #4]
 8006540:	2230      	movs	r2, #48	; 0x30
 8006542:	3701      	adds	r7, #1
 8006544:	700a      	strb	r2, [r1, #0]
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	3201      	adds	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	e790      	b.n	8006470 <_dtoa_r+0x608>
 800654e:	4ba6      	ldr	r3, [pc, #664]	; (80067e8 <_dtoa_r+0x980>)
 8006550:	2200      	movs	r2, #0
 8006552:	f7fa f859 	bl	8000608 <__aeabi_dmul>
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4606      	mov	r6, r0
 800655c:	460f      	mov	r7, r1
 800655e:	f7fa fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006562:	2800      	cmp	r0, #0
 8006564:	d09d      	beq.n	80064a2 <_dtoa_r+0x63a>
 8006566:	e7cf      	b.n	8006508 <_dtoa_r+0x6a0>
 8006568:	9a08      	ldr	r2, [sp, #32]
 800656a:	2a00      	cmp	r2, #0
 800656c:	f000 80d7 	beq.w	800671e <_dtoa_r+0x8b6>
 8006570:	9a06      	ldr	r2, [sp, #24]
 8006572:	2a01      	cmp	r2, #1
 8006574:	f300 80ba 	bgt.w	80066ec <_dtoa_r+0x884>
 8006578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800657a:	2a00      	cmp	r2, #0
 800657c:	f000 80b2 	beq.w	80066e4 <_dtoa_r+0x87c>
 8006580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006584:	9e07      	ldr	r6, [sp, #28]
 8006586:	9d04      	ldr	r5, [sp, #16]
 8006588:	9a04      	ldr	r2, [sp, #16]
 800658a:	441a      	add	r2, r3
 800658c:	9204      	str	r2, [sp, #16]
 800658e:	9a05      	ldr	r2, [sp, #20]
 8006590:	2101      	movs	r1, #1
 8006592:	441a      	add	r2, r3
 8006594:	4620      	mov	r0, r4
 8006596:	9205      	str	r2, [sp, #20]
 8006598:	f000 fc52 	bl	8006e40 <__i2b>
 800659c:	4607      	mov	r7, r0
 800659e:	2d00      	cmp	r5, #0
 80065a0:	dd0c      	ble.n	80065bc <_dtoa_r+0x754>
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dd09      	ble.n	80065bc <_dtoa_r+0x754>
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	9a04      	ldr	r2, [sp, #16]
 80065ac:	bfa8      	it	ge
 80065ae:	462b      	movge	r3, r5
 80065b0:	1ad2      	subs	r2, r2, r3
 80065b2:	9204      	str	r2, [sp, #16]
 80065b4:	9a05      	ldr	r2, [sp, #20]
 80065b6:	1aed      	subs	r5, r5, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	b31b      	cbz	r3, 8006608 <_dtoa_r+0x7a0>
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80af 	beq.w	8006726 <_dtoa_r+0x8be>
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	dd13      	ble.n	80065f4 <_dtoa_r+0x78c>
 80065cc:	4639      	mov	r1, r7
 80065ce:	4632      	mov	r2, r6
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fcf5 	bl	8006fc0 <__pow5mult>
 80065d6:	ee18 2a10 	vmov	r2, s16
 80065da:	4601      	mov	r1, r0
 80065dc:	4607      	mov	r7, r0
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fc44 	bl	8006e6c <__multiply>
 80065e4:	ee18 1a10 	vmov	r1, s16
 80065e8:	4680      	mov	r8, r0
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 fb70 	bl	8006cd0 <_Bfree>
 80065f0:	ee08 8a10 	vmov	s16, r8
 80065f4:	9b07      	ldr	r3, [sp, #28]
 80065f6:	1b9a      	subs	r2, r3, r6
 80065f8:	d006      	beq.n	8006608 <_dtoa_r+0x7a0>
 80065fa:	ee18 1a10 	vmov	r1, s16
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 fcde 	bl	8006fc0 <__pow5mult>
 8006604:	ee08 0a10 	vmov	s16, r0
 8006608:	2101      	movs	r1, #1
 800660a:	4620      	mov	r0, r4
 800660c:	f000 fc18 	bl	8006e40 <__i2b>
 8006610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	4606      	mov	r6, r0
 8006616:	f340 8088 	ble.w	800672a <_dtoa_r+0x8c2>
 800661a:	461a      	mov	r2, r3
 800661c:	4601      	mov	r1, r0
 800661e:	4620      	mov	r0, r4
 8006620:	f000 fcce 	bl	8006fc0 <__pow5mult>
 8006624:	9b06      	ldr	r3, [sp, #24]
 8006626:	2b01      	cmp	r3, #1
 8006628:	4606      	mov	r6, r0
 800662a:	f340 8081 	ble.w	8006730 <_dtoa_r+0x8c8>
 800662e:	f04f 0800 	mov.w	r8, #0
 8006632:	6933      	ldr	r3, [r6, #16]
 8006634:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006638:	6918      	ldr	r0, [r3, #16]
 800663a:	f000 fbb1 	bl	8006da0 <__hi0bits>
 800663e:	f1c0 0020 	rsb	r0, r0, #32
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	4418      	add	r0, r3
 8006646:	f010 001f 	ands.w	r0, r0, #31
 800664a:	f000 8092 	beq.w	8006772 <_dtoa_r+0x90a>
 800664e:	f1c0 0320 	rsb	r3, r0, #32
 8006652:	2b04      	cmp	r3, #4
 8006654:	f340 808a 	ble.w	800676c <_dtoa_r+0x904>
 8006658:	f1c0 001c 	rsb	r0, r0, #28
 800665c:	9b04      	ldr	r3, [sp, #16]
 800665e:	4403      	add	r3, r0
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	9b05      	ldr	r3, [sp, #20]
 8006664:	4403      	add	r3, r0
 8006666:	4405      	add	r5, r0
 8006668:	9305      	str	r3, [sp, #20]
 800666a:	9b04      	ldr	r3, [sp, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd07      	ble.n	8006680 <_dtoa_r+0x818>
 8006670:	ee18 1a10 	vmov	r1, s16
 8006674:	461a      	mov	r2, r3
 8006676:	4620      	mov	r0, r4
 8006678:	f000 fcfc 	bl	8007074 <__lshift>
 800667c:	ee08 0a10 	vmov	s16, r0
 8006680:	9b05      	ldr	r3, [sp, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	dd05      	ble.n	8006692 <_dtoa_r+0x82a>
 8006686:	4631      	mov	r1, r6
 8006688:	461a      	mov	r2, r3
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fcf2 	bl	8007074 <__lshift>
 8006690:	4606      	mov	r6, r0
 8006692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d06e      	beq.n	8006776 <_dtoa_r+0x90e>
 8006698:	ee18 0a10 	vmov	r0, s16
 800669c:	4631      	mov	r1, r6
 800669e:	f000 fd59 	bl	8007154 <__mcmp>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	da67      	bge.n	8006776 <_dtoa_r+0x90e>
 80066a6:	9b00      	ldr	r3, [sp, #0]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	ee18 1a10 	vmov	r1, s16
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	220a      	movs	r2, #10
 80066b2:	2300      	movs	r3, #0
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 fb2d 	bl	8006d14 <__multadd>
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	ee08 0a10 	vmov	s16, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 81b1 	beq.w	8006a28 <_dtoa_r+0xbc0>
 80066c6:	2300      	movs	r3, #0
 80066c8:	4639      	mov	r1, r7
 80066ca:	220a      	movs	r2, #10
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 fb21 	bl	8006d14 <__multadd>
 80066d2:	9b02      	ldr	r3, [sp, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	4607      	mov	r7, r0
 80066d8:	f300 808e 	bgt.w	80067f8 <_dtoa_r+0x990>
 80066dc:	9b06      	ldr	r3, [sp, #24]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	dc51      	bgt.n	8006786 <_dtoa_r+0x91e>
 80066e2:	e089      	b.n	80067f8 <_dtoa_r+0x990>
 80066e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066ea:	e74b      	b.n	8006584 <_dtoa_r+0x71c>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	1e5e      	subs	r6, r3, #1
 80066f0:	9b07      	ldr	r3, [sp, #28]
 80066f2:	42b3      	cmp	r3, r6
 80066f4:	bfbf      	itttt	lt
 80066f6:	9b07      	ldrlt	r3, [sp, #28]
 80066f8:	9607      	strlt	r6, [sp, #28]
 80066fa:	1af2      	sublt	r2, r6, r3
 80066fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80066fe:	bfb6      	itet	lt
 8006700:	189b      	addlt	r3, r3, r2
 8006702:	1b9e      	subge	r6, r3, r6
 8006704:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	bfb8      	it	lt
 800670a:	2600      	movlt	r6, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfb7      	itett	lt
 8006710:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006714:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006718:	1a9d      	sublt	r5, r3, r2
 800671a:	2300      	movlt	r3, #0
 800671c:	e734      	b.n	8006588 <_dtoa_r+0x720>
 800671e:	9e07      	ldr	r6, [sp, #28]
 8006720:	9d04      	ldr	r5, [sp, #16]
 8006722:	9f08      	ldr	r7, [sp, #32]
 8006724:	e73b      	b.n	800659e <_dtoa_r+0x736>
 8006726:	9a07      	ldr	r2, [sp, #28]
 8006728:	e767      	b.n	80065fa <_dtoa_r+0x792>
 800672a:	9b06      	ldr	r3, [sp, #24]
 800672c:	2b01      	cmp	r3, #1
 800672e:	dc18      	bgt.n	8006762 <_dtoa_r+0x8fa>
 8006730:	f1ba 0f00 	cmp.w	sl, #0
 8006734:	d115      	bne.n	8006762 <_dtoa_r+0x8fa>
 8006736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800673a:	b993      	cbnz	r3, 8006762 <_dtoa_r+0x8fa>
 800673c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006740:	0d1b      	lsrs	r3, r3, #20
 8006742:	051b      	lsls	r3, r3, #20
 8006744:	b183      	cbz	r3, 8006768 <_dtoa_r+0x900>
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	3301      	adds	r3, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	9b05      	ldr	r3, [sp, #20]
 800674e:	3301      	adds	r3, #1
 8006750:	9305      	str	r3, [sp, #20]
 8006752:	f04f 0801 	mov.w	r8, #1
 8006756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006758:	2b00      	cmp	r3, #0
 800675a:	f47f af6a 	bne.w	8006632 <_dtoa_r+0x7ca>
 800675e:	2001      	movs	r0, #1
 8006760:	e76f      	b.n	8006642 <_dtoa_r+0x7da>
 8006762:	f04f 0800 	mov.w	r8, #0
 8006766:	e7f6      	b.n	8006756 <_dtoa_r+0x8ee>
 8006768:	4698      	mov	r8, r3
 800676a:	e7f4      	b.n	8006756 <_dtoa_r+0x8ee>
 800676c:	f43f af7d 	beq.w	800666a <_dtoa_r+0x802>
 8006770:	4618      	mov	r0, r3
 8006772:	301c      	adds	r0, #28
 8006774:	e772      	b.n	800665c <_dtoa_r+0x7f4>
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	dc37      	bgt.n	80067ec <_dtoa_r+0x984>
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	2b02      	cmp	r3, #2
 8006780:	dd34      	ble.n	80067ec <_dtoa_r+0x984>
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	9b02      	ldr	r3, [sp, #8]
 8006788:	b96b      	cbnz	r3, 80067a6 <_dtoa_r+0x93e>
 800678a:	4631      	mov	r1, r6
 800678c:	2205      	movs	r2, #5
 800678e:	4620      	mov	r0, r4
 8006790:	f000 fac0 	bl	8006d14 <__multadd>
 8006794:	4601      	mov	r1, r0
 8006796:	4606      	mov	r6, r0
 8006798:	ee18 0a10 	vmov	r0, s16
 800679c:	f000 fcda 	bl	8007154 <__mcmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	f73f adbb 	bgt.w	800631c <_dtoa_r+0x4b4>
 80067a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a8:	9d01      	ldr	r5, [sp, #4]
 80067aa:	43db      	mvns	r3, r3
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	f04f 0800 	mov.w	r8, #0
 80067b2:	4631      	mov	r1, r6
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 fa8b 	bl	8006cd0 <_Bfree>
 80067ba:	2f00      	cmp	r7, #0
 80067bc:	f43f aea4 	beq.w	8006508 <_dtoa_r+0x6a0>
 80067c0:	f1b8 0f00 	cmp.w	r8, #0
 80067c4:	d005      	beq.n	80067d2 <_dtoa_r+0x96a>
 80067c6:	45b8      	cmp	r8, r7
 80067c8:	d003      	beq.n	80067d2 <_dtoa_r+0x96a>
 80067ca:	4641      	mov	r1, r8
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fa7f 	bl	8006cd0 <_Bfree>
 80067d2:	4639      	mov	r1, r7
 80067d4:	4620      	mov	r0, r4
 80067d6:	f000 fa7b 	bl	8006cd0 <_Bfree>
 80067da:	e695      	b.n	8006508 <_dtoa_r+0x6a0>
 80067dc:	2600      	movs	r6, #0
 80067de:	4637      	mov	r7, r6
 80067e0:	e7e1      	b.n	80067a6 <_dtoa_r+0x93e>
 80067e2:	9700      	str	r7, [sp, #0]
 80067e4:	4637      	mov	r7, r6
 80067e6:	e599      	b.n	800631c <_dtoa_r+0x4b4>
 80067e8:	40240000 	.word	0x40240000
 80067ec:	9b08      	ldr	r3, [sp, #32]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80ca 	beq.w	8006988 <_dtoa_r+0xb20>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	2d00      	cmp	r5, #0
 80067fa:	dd05      	ble.n	8006808 <_dtoa_r+0x9a0>
 80067fc:	4639      	mov	r1, r7
 80067fe:	462a      	mov	r2, r5
 8006800:	4620      	mov	r0, r4
 8006802:	f000 fc37 	bl	8007074 <__lshift>
 8006806:	4607      	mov	r7, r0
 8006808:	f1b8 0f00 	cmp.w	r8, #0
 800680c:	d05b      	beq.n	80068c6 <_dtoa_r+0xa5e>
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fa1d 	bl	8006c50 <_Balloc>
 8006816:	4605      	mov	r5, r0
 8006818:	b928      	cbnz	r0, 8006826 <_dtoa_r+0x9be>
 800681a:	4b87      	ldr	r3, [pc, #540]	; (8006a38 <_dtoa_r+0xbd0>)
 800681c:	4602      	mov	r2, r0
 800681e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006822:	f7ff bb3b 	b.w	8005e9c <_dtoa_r+0x34>
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	3202      	adds	r2, #2
 800682a:	0092      	lsls	r2, r2, #2
 800682c:	f107 010c 	add.w	r1, r7, #12
 8006830:	300c      	adds	r0, #12
 8006832:	f7fe fdf3 	bl	800541c <memcpy>
 8006836:	2201      	movs	r2, #1
 8006838:	4629      	mov	r1, r5
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fc1a 	bl	8007074 <__lshift>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	f103 0901 	add.w	r9, r3, #1
 8006846:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800684a:	4413      	add	r3, r2
 800684c:	9305      	str	r3, [sp, #20]
 800684e:	f00a 0301 	and.w	r3, sl, #1
 8006852:	46b8      	mov	r8, r7
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	4607      	mov	r7, r0
 8006858:	4631      	mov	r1, r6
 800685a:	ee18 0a10 	vmov	r0, s16
 800685e:	f7ff fa75 	bl	8005d4c <quorem>
 8006862:	4641      	mov	r1, r8
 8006864:	9002      	str	r0, [sp, #8]
 8006866:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800686a:	ee18 0a10 	vmov	r0, s16
 800686e:	f000 fc71 	bl	8007154 <__mcmp>
 8006872:	463a      	mov	r2, r7
 8006874:	9003      	str	r0, [sp, #12]
 8006876:	4631      	mov	r1, r6
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fc87 	bl	800718c <__mdiff>
 800687e:	68c2      	ldr	r2, [r0, #12]
 8006880:	f109 3bff 	add.w	fp, r9, #4294967295
 8006884:	4605      	mov	r5, r0
 8006886:	bb02      	cbnz	r2, 80068ca <_dtoa_r+0xa62>
 8006888:	4601      	mov	r1, r0
 800688a:	ee18 0a10 	vmov	r0, s16
 800688e:	f000 fc61 	bl	8007154 <__mcmp>
 8006892:	4602      	mov	r2, r0
 8006894:	4629      	mov	r1, r5
 8006896:	4620      	mov	r0, r4
 8006898:	9207      	str	r2, [sp, #28]
 800689a:	f000 fa19 	bl	8006cd0 <_Bfree>
 800689e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068a2:	ea43 0102 	orr.w	r1, r3, r2
 80068a6:	9b04      	ldr	r3, [sp, #16]
 80068a8:	430b      	orrs	r3, r1
 80068aa:	464d      	mov	r5, r9
 80068ac:	d10f      	bne.n	80068ce <_dtoa_r+0xa66>
 80068ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068b2:	d02a      	beq.n	800690a <_dtoa_r+0xaa2>
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd02      	ble.n	80068c0 <_dtoa_r+0xa58>
 80068ba:	9b02      	ldr	r3, [sp, #8]
 80068bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068c0:	f88b a000 	strb.w	sl, [fp]
 80068c4:	e775      	b.n	80067b2 <_dtoa_r+0x94a>
 80068c6:	4638      	mov	r0, r7
 80068c8:	e7ba      	b.n	8006840 <_dtoa_r+0x9d8>
 80068ca:	2201      	movs	r2, #1
 80068cc:	e7e2      	b.n	8006894 <_dtoa_r+0xa2c>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	db04      	blt.n	80068de <_dtoa_r+0xa76>
 80068d4:	9906      	ldr	r1, [sp, #24]
 80068d6:	430b      	orrs	r3, r1
 80068d8:	9904      	ldr	r1, [sp, #16]
 80068da:	430b      	orrs	r3, r1
 80068dc:	d122      	bne.n	8006924 <_dtoa_r+0xabc>
 80068de:	2a00      	cmp	r2, #0
 80068e0:	ddee      	ble.n	80068c0 <_dtoa_r+0xa58>
 80068e2:	ee18 1a10 	vmov	r1, s16
 80068e6:	2201      	movs	r2, #1
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fbc3 	bl	8007074 <__lshift>
 80068ee:	4631      	mov	r1, r6
 80068f0:	ee08 0a10 	vmov	s16, r0
 80068f4:	f000 fc2e 	bl	8007154 <__mcmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	dc03      	bgt.n	8006904 <_dtoa_r+0xa9c>
 80068fc:	d1e0      	bne.n	80068c0 <_dtoa_r+0xa58>
 80068fe:	f01a 0f01 	tst.w	sl, #1
 8006902:	d0dd      	beq.n	80068c0 <_dtoa_r+0xa58>
 8006904:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006908:	d1d7      	bne.n	80068ba <_dtoa_r+0xa52>
 800690a:	2339      	movs	r3, #57	; 0x39
 800690c:	f88b 3000 	strb.w	r3, [fp]
 8006910:	462b      	mov	r3, r5
 8006912:	461d      	mov	r5, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800691a:	2a39      	cmp	r2, #57	; 0x39
 800691c:	d071      	beq.n	8006a02 <_dtoa_r+0xb9a>
 800691e:	3201      	adds	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	e746      	b.n	80067b2 <_dtoa_r+0x94a>
 8006924:	2a00      	cmp	r2, #0
 8006926:	dd07      	ble.n	8006938 <_dtoa_r+0xad0>
 8006928:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800692c:	d0ed      	beq.n	800690a <_dtoa_r+0xaa2>
 800692e:	f10a 0301 	add.w	r3, sl, #1
 8006932:	f88b 3000 	strb.w	r3, [fp]
 8006936:	e73c      	b.n	80067b2 <_dtoa_r+0x94a>
 8006938:	9b05      	ldr	r3, [sp, #20]
 800693a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800693e:	4599      	cmp	r9, r3
 8006940:	d047      	beq.n	80069d2 <_dtoa_r+0xb6a>
 8006942:	ee18 1a10 	vmov	r1, s16
 8006946:	2300      	movs	r3, #0
 8006948:	220a      	movs	r2, #10
 800694a:	4620      	mov	r0, r4
 800694c:	f000 f9e2 	bl	8006d14 <__multadd>
 8006950:	45b8      	cmp	r8, r7
 8006952:	ee08 0a10 	vmov	s16, r0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	f04f 020a 	mov.w	r2, #10
 800695e:	4641      	mov	r1, r8
 8006960:	4620      	mov	r0, r4
 8006962:	d106      	bne.n	8006972 <_dtoa_r+0xb0a>
 8006964:	f000 f9d6 	bl	8006d14 <__multadd>
 8006968:	4680      	mov	r8, r0
 800696a:	4607      	mov	r7, r0
 800696c:	f109 0901 	add.w	r9, r9, #1
 8006970:	e772      	b.n	8006858 <_dtoa_r+0x9f0>
 8006972:	f000 f9cf 	bl	8006d14 <__multadd>
 8006976:	4639      	mov	r1, r7
 8006978:	4680      	mov	r8, r0
 800697a:	2300      	movs	r3, #0
 800697c:	220a      	movs	r2, #10
 800697e:	4620      	mov	r0, r4
 8006980:	f000 f9c8 	bl	8006d14 <__multadd>
 8006984:	4607      	mov	r7, r0
 8006986:	e7f1      	b.n	800696c <_dtoa_r+0xb04>
 8006988:	9b03      	ldr	r3, [sp, #12]
 800698a:	9302      	str	r3, [sp, #8]
 800698c:	9d01      	ldr	r5, [sp, #4]
 800698e:	ee18 0a10 	vmov	r0, s16
 8006992:	4631      	mov	r1, r6
 8006994:	f7ff f9da 	bl	8005d4c <quorem>
 8006998:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	f805 ab01 	strb.w	sl, [r5], #1
 80069a2:	1aea      	subs	r2, r5, r3
 80069a4:	9b02      	ldr	r3, [sp, #8]
 80069a6:	4293      	cmp	r3, r2
 80069a8:	dd09      	ble.n	80069be <_dtoa_r+0xb56>
 80069aa:	ee18 1a10 	vmov	r1, s16
 80069ae:	2300      	movs	r3, #0
 80069b0:	220a      	movs	r2, #10
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 f9ae 	bl	8006d14 <__multadd>
 80069b8:	ee08 0a10 	vmov	s16, r0
 80069bc:	e7e7      	b.n	800698e <_dtoa_r+0xb26>
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	bfc8      	it	gt
 80069c4:	461d      	movgt	r5, r3
 80069c6:	9b01      	ldr	r3, [sp, #4]
 80069c8:	bfd8      	it	le
 80069ca:	2501      	movle	r5, #1
 80069cc:	441d      	add	r5, r3
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	ee18 1a10 	vmov	r1, s16
 80069d6:	2201      	movs	r2, #1
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 fb4b 	bl	8007074 <__lshift>
 80069de:	4631      	mov	r1, r6
 80069e0:	ee08 0a10 	vmov	s16, r0
 80069e4:	f000 fbb6 	bl	8007154 <__mcmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	dc91      	bgt.n	8006910 <_dtoa_r+0xaa8>
 80069ec:	d102      	bne.n	80069f4 <_dtoa_r+0xb8c>
 80069ee:	f01a 0f01 	tst.w	sl, #1
 80069f2:	d18d      	bne.n	8006910 <_dtoa_r+0xaa8>
 80069f4:	462b      	mov	r3, r5
 80069f6:	461d      	mov	r5, r3
 80069f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069fc:	2a30      	cmp	r2, #48	; 0x30
 80069fe:	d0fa      	beq.n	80069f6 <_dtoa_r+0xb8e>
 8006a00:	e6d7      	b.n	80067b2 <_dtoa_r+0x94a>
 8006a02:	9a01      	ldr	r2, [sp, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d184      	bne.n	8006912 <_dtoa_r+0xaaa>
 8006a08:	9b00      	ldr	r3, [sp, #0]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	2331      	movs	r3, #49	; 0x31
 8006a10:	7013      	strb	r3, [r2, #0]
 8006a12:	e6ce      	b.n	80067b2 <_dtoa_r+0x94a>
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <_dtoa_r+0xbd4>)
 8006a16:	f7ff ba95 	b.w	8005f44 <_dtoa_r+0xdc>
 8006a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f47f aa6e 	bne.w	8005efe <_dtoa_r+0x96>
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <_dtoa_r+0xbd8>)
 8006a24:	f7ff ba8e 	b.w	8005f44 <_dtoa_r+0xdc>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dcae      	bgt.n	800698c <_dtoa_r+0xb24>
 8006a2e:	9b06      	ldr	r3, [sp, #24]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	f73f aea8 	bgt.w	8006786 <_dtoa_r+0x91e>
 8006a36:	e7a9      	b.n	800698c <_dtoa_r+0xb24>
 8006a38:	08009723 	.word	0x08009723
 8006a3c:	08009680 	.word	0x08009680
 8006a40:	080096a4 	.word	0x080096a4

08006a44 <std>:
 8006a44:	2300      	movs	r3, #0
 8006a46:	b510      	push	{r4, lr}
 8006a48:	4604      	mov	r4, r0
 8006a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a52:	6083      	str	r3, [r0, #8]
 8006a54:	8181      	strh	r1, [r0, #12]
 8006a56:	6643      	str	r3, [r0, #100]	; 0x64
 8006a58:	81c2      	strh	r2, [r0, #14]
 8006a5a:	6183      	str	r3, [r0, #24]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	2208      	movs	r2, #8
 8006a60:	305c      	adds	r0, #92	; 0x5c
 8006a62:	f7fe fce9 	bl	8005438 <memset>
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <std+0x38>)
 8006a68:	6263      	str	r3, [r4, #36]	; 0x24
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <std+0x3c>)
 8006a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <std+0x40>)
 8006a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <std+0x44>)
 8006a74:	6224      	str	r4, [r4, #32]
 8006a76:	6323      	str	r3, [r4, #48]	; 0x30
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08007819 	.word	0x08007819
 8006a80:	0800783b 	.word	0x0800783b
 8006a84:	08007873 	.word	0x08007873
 8006a88:	08007897 	.word	0x08007897

08006a8c <_cleanup_r>:
 8006a8c:	4901      	ldr	r1, [pc, #4]	; (8006a94 <_cleanup_r+0x8>)
 8006a8e:	f000 b8af 	b.w	8006bf0 <_fwalk_reent>
 8006a92:	bf00      	nop
 8006a94:	08007bad 	.word	0x08007bad

08006a98 <__sfmoreglue>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	2268      	movs	r2, #104	; 0x68
 8006a9c:	1e4d      	subs	r5, r1, #1
 8006a9e:	4355      	muls	r5, r2
 8006aa0:	460e      	mov	r6, r1
 8006aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aa6:	f000 fcd9 	bl	800745c <_malloc_r>
 8006aaa:	4604      	mov	r4, r0
 8006aac:	b140      	cbz	r0, 8006ac0 <__sfmoreglue+0x28>
 8006aae:	2100      	movs	r1, #0
 8006ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ab4:	300c      	adds	r0, #12
 8006ab6:	60a0      	str	r0, [r4, #8]
 8006ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006abc:	f7fe fcbc 	bl	8005438 <memset>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}

08006ac4 <__sfp_lock_acquire>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__sfp_lock_acquire+0x8>)
 8006ac6:	f000 b8b8 	b.w	8006c3a <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	20000469 	.word	0x20000469

08006ad0 <__sfp_lock_release>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__sfp_lock_release+0x8>)
 8006ad2:	f000 b8b3 	b.w	8006c3c <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	20000469 	.word	0x20000469

08006adc <__sinit_lock_acquire>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__sinit_lock_acquire+0x8>)
 8006ade:	f000 b8ac 	b.w	8006c3a <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	2000046a 	.word	0x2000046a

08006ae8 <__sinit_lock_release>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__sinit_lock_release+0x8>)
 8006aea:	f000 b8a7 	b.w	8006c3c <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	2000046a 	.word	0x2000046a

08006af4 <__sinit>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	4604      	mov	r4, r0
 8006af8:	f7ff fff0 	bl	8006adc <__sinit_lock_acquire>
 8006afc:	69a3      	ldr	r3, [r4, #24]
 8006afe:	b11b      	cbz	r3, 8006b08 <__sinit+0x14>
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	f7ff bff0 	b.w	8006ae8 <__sinit_lock_release>
 8006b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <__sinit+0x68>)
 8006b10:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <__sinit+0x6c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b16:	42a3      	cmp	r3, r4
 8006b18:	bf04      	itt	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	61a3      	streq	r3, [r4, #24]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 f820 	bl	8006b64 <__sfp>
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f81c 	bl	8006b64 <__sfp>
 8006b2c:	60a0      	str	r0, [r4, #8]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f818 	bl	8006b64 <__sfp>
 8006b34:	2200      	movs	r2, #0
 8006b36:	60e0      	str	r0, [r4, #12]
 8006b38:	2104      	movs	r1, #4
 8006b3a:	6860      	ldr	r0, [r4, #4]
 8006b3c:	f7ff ff82 	bl	8006a44 <std>
 8006b40:	68a0      	ldr	r0, [r4, #8]
 8006b42:	2201      	movs	r2, #1
 8006b44:	2109      	movs	r1, #9
 8006b46:	f7ff ff7d 	bl	8006a44 <std>
 8006b4a:	68e0      	ldr	r0, [r4, #12]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	2112      	movs	r1, #18
 8006b50:	f7ff ff78 	bl	8006a44 <std>
 8006b54:	2301      	movs	r3, #1
 8006b56:	61a3      	str	r3, [r4, #24]
 8006b58:	e7d2      	b.n	8006b00 <__sinit+0xc>
 8006b5a:	bf00      	nop
 8006b5c:	0800966c 	.word	0x0800966c
 8006b60:	08006a8d 	.word	0x08006a8d

08006b64 <__sfp>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	4607      	mov	r7, r0
 8006b68:	f7ff ffac 	bl	8006ac4 <__sfp_lock_acquire>
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <__sfp+0x84>)
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	69b3      	ldr	r3, [r6, #24]
 8006b72:	b913      	cbnz	r3, 8006b7a <__sfp+0x16>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff ffbd 	bl	8006af4 <__sinit>
 8006b7a:	3648      	adds	r6, #72	; 0x48
 8006b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	d503      	bpl.n	8006b8c <__sfp+0x28>
 8006b84:	6833      	ldr	r3, [r6, #0]
 8006b86:	b30b      	cbz	r3, 8006bcc <__sfp+0x68>
 8006b88:	6836      	ldr	r6, [r6, #0]
 8006b8a:	e7f7      	b.n	8006b7c <__sfp+0x18>
 8006b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b90:	b9d5      	cbnz	r5, 8006bc8 <__sfp+0x64>
 8006b92:	4b16      	ldr	r3, [pc, #88]	; (8006bec <__sfp+0x88>)
 8006b94:	60e3      	str	r3, [r4, #12]
 8006b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b9c:	f000 f84c 	bl	8006c38 <__retarget_lock_init_recursive>
 8006ba0:	f7ff ff96 	bl	8006ad0 <__sfp_lock_release>
 8006ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bac:	6025      	str	r5, [r4, #0]
 8006bae:	61a5      	str	r5, [r4, #24]
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bb8:	f7fe fc3e 	bl	8005438 <memset>
 8006bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	3468      	adds	r4, #104	; 0x68
 8006bca:	e7d9      	b.n	8006b80 <__sfp+0x1c>
 8006bcc:	2104      	movs	r1, #4
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f7ff ff62 	bl	8006a98 <__sfmoreglue>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	6030      	str	r0, [r6, #0]
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d1d5      	bne.n	8006b88 <__sfp+0x24>
 8006bdc:	f7ff ff78 	bl	8006ad0 <__sfp_lock_release>
 8006be0:	230c      	movs	r3, #12
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	e7ee      	b.n	8006bc4 <__sfp+0x60>
 8006be6:	bf00      	nop
 8006be8:	0800966c 	.word	0x0800966c
 8006bec:	ffff0001 	.word	0xffff0001

08006bf0 <_fwalk_reent>:
 8006bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	4688      	mov	r8, r1
 8006bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bfc:	2700      	movs	r7, #0
 8006bfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c02:	f1b9 0901 	subs.w	r9, r9, #1
 8006c06:	d505      	bpl.n	8006c14 <_fwalk_reent+0x24>
 8006c08:	6824      	ldr	r4, [r4, #0]
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	d1f7      	bne.n	8006bfe <_fwalk_reent+0xe>
 8006c0e:	4638      	mov	r0, r7
 8006c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c14:	89ab      	ldrh	r3, [r5, #12]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d907      	bls.n	8006c2a <_fwalk_reent+0x3a>
 8006c1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	d003      	beq.n	8006c2a <_fwalk_reent+0x3a>
 8006c22:	4629      	mov	r1, r5
 8006c24:	4630      	mov	r0, r6
 8006c26:	47c0      	blx	r8
 8006c28:	4307      	orrs	r7, r0
 8006c2a:	3568      	adds	r5, #104	; 0x68
 8006c2c:	e7e9      	b.n	8006c02 <_fwalk_reent+0x12>
	...

08006c30 <_localeconv_r>:
 8006c30:	4800      	ldr	r0, [pc, #0]	; (8006c34 <_localeconv_r+0x4>)
 8006c32:	4770      	bx	lr
 8006c34:	200001b0 	.word	0x200001b0

08006c38 <__retarget_lock_init_recursive>:
 8006c38:	4770      	bx	lr

08006c3a <__retarget_lock_acquire_recursive>:
 8006c3a:	4770      	bx	lr

08006c3c <__retarget_lock_release_recursive>:
 8006c3c:	4770      	bx	lr
	...

08006c40 <malloc>:
 8006c40:	4b02      	ldr	r3, [pc, #8]	; (8006c4c <malloc+0xc>)
 8006c42:	4601      	mov	r1, r0
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	f000 bc09 	b.w	800745c <_malloc_r>
 8006c4a:	bf00      	nop
 8006c4c:	2000005c 	.word	0x2000005c

08006c50 <_Balloc>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c54:	4604      	mov	r4, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	b976      	cbnz	r6, 8006c78 <_Balloc+0x28>
 8006c5a:	2010      	movs	r0, #16
 8006c5c:	f7ff fff0 	bl	8006c40 <malloc>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6260      	str	r0, [r4, #36]	; 0x24
 8006c64:	b920      	cbnz	r0, 8006c70 <_Balloc+0x20>
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <_Balloc+0x78>)
 8006c68:	4818      	ldr	r0, [pc, #96]	; (8006ccc <_Balloc+0x7c>)
 8006c6a:	2166      	movs	r1, #102	; 0x66
 8006c6c:	f000 feea 	bl	8007a44 <__assert_func>
 8006c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c74:	6006      	str	r6, [r0, #0]
 8006c76:	60c6      	str	r6, [r0, #12]
 8006c78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c7a:	68f3      	ldr	r3, [r6, #12]
 8006c7c:	b183      	cbz	r3, 8006ca0 <_Balloc+0x50>
 8006c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c86:	b9b8      	cbnz	r0, 8006cb8 <_Balloc+0x68>
 8006c88:	2101      	movs	r1, #1
 8006c8a:	fa01 f605 	lsl.w	r6, r1, r5
 8006c8e:	1d72      	adds	r2, r6, #5
 8006c90:	0092      	lsls	r2, r2, #2
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fb60 	bl	8007358 <_calloc_r>
 8006c98:	b160      	cbz	r0, 8006cb4 <_Balloc+0x64>
 8006c9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c9e:	e00e      	b.n	8006cbe <_Balloc+0x6e>
 8006ca0:	2221      	movs	r2, #33	; 0x21
 8006ca2:	2104      	movs	r1, #4
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 fb57 	bl	8007358 <_calloc_r>
 8006caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cac:	60f0      	str	r0, [r6, #12]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e4      	bne.n	8006c7e <_Balloc+0x2e>
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	6802      	ldr	r2, [r0, #0]
 8006cba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cc4:	e7f7      	b.n	8006cb6 <_Balloc+0x66>
 8006cc6:	bf00      	nop
 8006cc8:	080096b1 	.word	0x080096b1
 8006ccc:	08009794 	.word	0x08009794

08006cd0 <_Bfree>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	b976      	cbnz	r6, 8006cf8 <_Bfree+0x28>
 8006cda:	2010      	movs	r0, #16
 8006cdc:	f7ff ffb0 	bl	8006c40 <malloc>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6268      	str	r0, [r5, #36]	; 0x24
 8006ce4:	b920      	cbnz	r0, 8006cf0 <_Bfree+0x20>
 8006ce6:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <_Bfree+0x3c>)
 8006ce8:	4809      	ldr	r0, [pc, #36]	; (8006d10 <_Bfree+0x40>)
 8006cea:	218a      	movs	r1, #138	; 0x8a
 8006cec:	f000 feaa 	bl	8007a44 <__assert_func>
 8006cf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cf4:	6006      	str	r6, [r0, #0]
 8006cf6:	60c6      	str	r6, [r0, #12]
 8006cf8:	b13c      	cbz	r4, 8006d0a <_Bfree+0x3a>
 8006cfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cfc:	6862      	ldr	r2, [r4, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d04:	6021      	str	r1, [r4, #0]
 8006d06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	080096b1 	.word	0x080096b1
 8006d10:	08009794 	.word	0x08009794

08006d14 <__multadd>:
 8006d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d18:	690d      	ldr	r5, [r1, #16]
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	461e      	mov	r6, r3
 8006d20:	f101 0c14 	add.w	ip, r1, #20
 8006d24:	2000      	movs	r0, #0
 8006d26:	f8dc 3000 	ldr.w	r3, [ip]
 8006d2a:	b299      	uxth	r1, r3
 8006d2c:	fb02 6101 	mla	r1, r2, r1, r6
 8006d30:	0c1e      	lsrs	r6, r3, #16
 8006d32:	0c0b      	lsrs	r3, r1, #16
 8006d34:	fb02 3306 	mla	r3, r2, r6, r3
 8006d38:	b289      	uxth	r1, r1
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d40:	4285      	cmp	r5, r0
 8006d42:	f84c 1b04 	str.w	r1, [ip], #4
 8006d46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d4a:	dcec      	bgt.n	8006d26 <__multadd+0x12>
 8006d4c:	b30e      	cbz	r6, 8006d92 <__multadd+0x7e>
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dc19      	bgt.n	8006d88 <__multadd+0x74>
 8006d54:	6861      	ldr	r1, [r4, #4]
 8006d56:	4638      	mov	r0, r7
 8006d58:	3101      	adds	r1, #1
 8006d5a:	f7ff ff79 	bl	8006c50 <_Balloc>
 8006d5e:	4680      	mov	r8, r0
 8006d60:	b928      	cbnz	r0, 8006d6e <__multadd+0x5a>
 8006d62:	4602      	mov	r2, r0
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <__multadd+0x84>)
 8006d66:	480d      	ldr	r0, [pc, #52]	; (8006d9c <__multadd+0x88>)
 8006d68:	21b5      	movs	r1, #181	; 0xb5
 8006d6a:	f000 fe6b 	bl	8007a44 <__assert_func>
 8006d6e:	6922      	ldr	r2, [r4, #16]
 8006d70:	3202      	adds	r2, #2
 8006d72:	f104 010c 	add.w	r1, r4, #12
 8006d76:	0092      	lsls	r2, r2, #2
 8006d78:	300c      	adds	r0, #12
 8006d7a:	f7fe fb4f 	bl	800541c <memcpy>
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff ffa5 	bl	8006cd0 <_Bfree>
 8006d86:	4644      	mov	r4, r8
 8006d88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	615e      	str	r6, [r3, #20]
 8006d90:	6125      	str	r5, [r4, #16]
 8006d92:	4620      	mov	r0, r4
 8006d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d98:	08009723 	.word	0x08009723
 8006d9c:	08009794 	.word	0x08009794

08006da0 <__hi0bits>:
 8006da0:	0c03      	lsrs	r3, r0, #16
 8006da2:	041b      	lsls	r3, r3, #16
 8006da4:	b9d3      	cbnz	r3, 8006ddc <__hi0bits+0x3c>
 8006da6:	0400      	lsls	r0, r0, #16
 8006da8:	2310      	movs	r3, #16
 8006daa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dae:	bf04      	itt	eq
 8006db0:	0200      	lsleq	r0, r0, #8
 8006db2:	3308      	addeq	r3, #8
 8006db4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006db8:	bf04      	itt	eq
 8006dba:	0100      	lsleq	r0, r0, #4
 8006dbc:	3304      	addeq	r3, #4
 8006dbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006dc2:	bf04      	itt	eq
 8006dc4:	0080      	lsleq	r0, r0, #2
 8006dc6:	3302      	addeq	r3, #2
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	db05      	blt.n	8006dd8 <__hi0bits+0x38>
 8006dcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006dd0:	f103 0301 	add.w	r3, r3, #1
 8006dd4:	bf08      	it	eq
 8006dd6:	2320      	moveq	r3, #32
 8006dd8:	4618      	mov	r0, r3
 8006dda:	4770      	bx	lr
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e7e4      	b.n	8006daa <__hi0bits+0xa>

08006de0 <__lo0bits>:
 8006de0:	6803      	ldr	r3, [r0, #0]
 8006de2:	f013 0207 	ands.w	r2, r3, #7
 8006de6:	4601      	mov	r1, r0
 8006de8:	d00b      	beq.n	8006e02 <__lo0bits+0x22>
 8006dea:	07da      	lsls	r2, r3, #31
 8006dec:	d423      	bmi.n	8006e36 <__lo0bits+0x56>
 8006dee:	0798      	lsls	r0, r3, #30
 8006df0:	bf49      	itett	mi
 8006df2:	085b      	lsrmi	r3, r3, #1
 8006df4:	089b      	lsrpl	r3, r3, #2
 8006df6:	2001      	movmi	r0, #1
 8006df8:	600b      	strmi	r3, [r1, #0]
 8006dfa:	bf5c      	itt	pl
 8006dfc:	600b      	strpl	r3, [r1, #0]
 8006dfe:	2002      	movpl	r0, #2
 8006e00:	4770      	bx	lr
 8006e02:	b298      	uxth	r0, r3
 8006e04:	b9a8      	cbnz	r0, 8006e32 <__lo0bits+0x52>
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	2010      	movs	r0, #16
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	b90a      	cbnz	r2, 8006e12 <__lo0bits+0x32>
 8006e0e:	3008      	adds	r0, #8
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	071a      	lsls	r2, r3, #28
 8006e14:	bf04      	itt	eq
 8006e16:	091b      	lsreq	r3, r3, #4
 8006e18:	3004      	addeq	r0, #4
 8006e1a:	079a      	lsls	r2, r3, #30
 8006e1c:	bf04      	itt	eq
 8006e1e:	089b      	lsreq	r3, r3, #2
 8006e20:	3002      	addeq	r0, #2
 8006e22:	07da      	lsls	r2, r3, #31
 8006e24:	d403      	bmi.n	8006e2e <__lo0bits+0x4e>
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	f100 0001 	add.w	r0, r0, #1
 8006e2c:	d005      	beq.n	8006e3a <__lo0bits+0x5a>
 8006e2e:	600b      	str	r3, [r1, #0]
 8006e30:	4770      	bx	lr
 8006e32:	4610      	mov	r0, r2
 8006e34:	e7e9      	b.n	8006e0a <__lo0bits+0x2a>
 8006e36:	2000      	movs	r0, #0
 8006e38:	4770      	bx	lr
 8006e3a:	2020      	movs	r0, #32
 8006e3c:	4770      	bx	lr
	...

08006e40 <__i2b>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	460c      	mov	r4, r1
 8006e44:	2101      	movs	r1, #1
 8006e46:	f7ff ff03 	bl	8006c50 <_Balloc>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	b928      	cbnz	r0, 8006e5a <__i2b+0x1a>
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <__i2b+0x24>)
 8006e50:	4805      	ldr	r0, [pc, #20]	; (8006e68 <__i2b+0x28>)
 8006e52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e56:	f000 fdf5 	bl	8007a44 <__assert_func>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	6144      	str	r4, [r0, #20]
 8006e5e:	6103      	str	r3, [r0, #16]
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	bf00      	nop
 8006e64:	08009723 	.word	0x08009723
 8006e68:	08009794 	.word	0x08009794

08006e6c <__multiply>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	4691      	mov	r9, r2
 8006e72:	690a      	ldr	r2, [r1, #16]
 8006e74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	bfb8      	it	lt
 8006e7c:	460b      	movlt	r3, r1
 8006e7e:	460c      	mov	r4, r1
 8006e80:	bfbc      	itt	lt
 8006e82:	464c      	movlt	r4, r9
 8006e84:	4699      	movlt	r9, r3
 8006e86:	6927      	ldr	r7, [r4, #16]
 8006e88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e8c:	68a3      	ldr	r3, [r4, #8]
 8006e8e:	6861      	ldr	r1, [r4, #4]
 8006e90:	eb07 060a 	add.w	r6, r7, sl
 8006e94:	42b3      	cmp	r3, r6
 8006e96:	b085      	sub	sp, #20
 8006e98:	bfb8      	it	lt
 8006e9a:	3101      	addlt	r1, #1
 8006e9c:	f7ff fed8 	bl	8006c50 <_Balloc>
 8006ea0:	b930      	cbnz	r0, 8006eb0 <__multiply+0x44>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	4b44      	ldr	r3, [pc, #272]	; (8006fb8 <__multiply+0x14c>)
 8006ea6:	4845      	ldr	r0, [pc, #276]	; (8006fbc <__multiply+0x150>)
 8006ea8:	f240 115d 	movw	r1, #349	; 0x15d
 8006eac:	f000 fdca 	bl	8007a44 <__assert_func>
 8006eb0:	f100 0514 	add.w	r5, r0, #20
 8006eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006eb8:	462b      	mov	r3, r5
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4543      	cmp	r3, r8
 8006ebe:	d321      	bcc.n	8006f04 <__multiply+0x98>
 8006ec0:	f104 0314 	add.w	r3, r4, #20
 8006ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ec8:	f109 0314 	add.w	r3, r9, #20
 8006ecc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ed0:	9202      	str	r2, [sp, #8]
 8006ed2:	1b3a      	subs	r2, r7, r4
 8006ed4:	3a15      	subs	r2, #21
 8006ed6:	f022 0203 	bic.w	r2, r2, #3
 8006eda:	3204      	adds	r2, #4
 8006edc:	f104 0115 	add.w	r1, r4, #21
 8006ee0:	428f      	cmp	r7, r1
 8006ee2:	bf38      	it	cc
 8006ee4:	2204      	movcc	r2, #4
 8006ee6:	9201      	str	r2, [sp, #4]
 8006ee8:	9a02      	ldr	r2, [sp, #8]
 8006eea:	9303      	str	r3, [sp, #12]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d80c      	bhi.n	8006f0a <__multiply+0x9e>
 8006ef0:	2e00      	cmp	r6, #0
 8006ef2:	dd03      	ble.n	8006efc <__multiply+0x90>
 8006ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d05a      	beq.n	8006fb2 <__multiply+0x146>
 8006efc:	6106      	str	r6, [r0, #16]
 8006efe:	b005      	add	sp, #20
 8006f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f04:	f843 2b04 	str.w	r2, [r3], #4
 8006f08:	e7d8      	b.n	8006ebc <__multiply+0x50>
 8006f0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f0e:	f1ba 0f00 	cmp.w	sl, #0
 8006f12:	d024      	beq.n	8006f5e <__multiply+0xf2>
 8006f14:	f104 0e14 	add.w	lr, r4, #20
 8006f18:	46a9      	mov	r9, r5
 8006f1a:	f04f 0c00 	mov.w	ip, #0
 8006f1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f22:	f8d9 1000 	ldr.w	r1, [r9]
 8006f26:	fa1f fb82 	uxth.w	fp, r2
 8006f2a:	b289      	uxth	r1, r1
 8006f2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f34:	f8d9 2000 	ldr.w	r2, [r9]
 8006f38:	4461      	add	r1, ip
 8006f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f46:	b289      	uxth	r1, r1
 8006f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f4c:	4577      	cmp	r7, lr
 8006f4e:	f849 1b04 	str.w	r1, [r9], #4
 8006f52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f56:	d8e2      	bhi.n	8006f1e <__multiply+0xb2>
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	f845 c002 	str.w	ip, [r5, r2]
 8006f5e:	9a03      	ldr	r2, [sp, #12]
 8006f60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f64:	3304      	adds	r3, #4
 8006f66:	f1b9 0f00 	cmp.w	r9, #0
 8006f6a:	d020      	beq.n	8006fae <__multiply+0x142>
 8006f6c:	6829      	ldr	r1, [r5, #0]
 8006f6e:	f104 0c14 	add.w	ip, r4, #20
 8006f72:	46ae      	mov	lr, r5
 8006f74:	f04f 0a00 	mov.w	sl, #0
 8006f78:	f8bc b000 	ldrh.w	fp, [ip]
 8006f7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f80:	fb09 220b 	mla	r2, r9, fp, r2
 8006f84:	4492      	add	sl, r2
 8006f86:	b289      	uxth	r1, r1
 8006f88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f8c:	f84e 1b04 	str.w	r1, [lr], #4
 8006f90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f94:	f8be 1000 	ldrh.w	r1, [lr]
 8006f98:	0c12      	lsrs	r2, r2, #16
 8006f9a:	fb09 1102 	mla	r1, r9, r2, r1
 8006f9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006fa2:	4567      	cmp	r7, ip
 8006fa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fa8:	d8e6      	bhi.n	8006f78 <__multiply+0x10c>
 8006faa:	9a01      	ldr	r2, [sp, #4]
 8006fac:	50a9      	str	r1, [r5, r2]
 8006fae:	3504      	adds	r5, #4
 8006fb0:	e79a      	b.n	8006ee8 <__multiply+0x7c>
 8006fb2:	3e01      	subs	r6, #1
 8006fb4:	e79c      	b.n	8006ef0 <__multiply+0x84>
 8006fb6:	bf00      	nop
 8006fb8:	08009723 	.word	0x08009723
 8006fbc:	08009794 	.word	0x08009794

08006fc0 <__pow5mult>:
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	4615      	mov	r5, r2
 8006fc6:	f012 0203 	ands.w	r2, r2, #3
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460f      	mov	r7, r1
 8006fce:	d007      	beq.n	8006fe0 <__pow5mult+0x20>
 8006fd0:	4c25      	ldr	r4, [pc, #148]	; (8007068 <__pow5mult+0xa8>)
 8006fd2:	3a01      	subs	r2, #1
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fda:	f7ff fe9b 	bl	8006d14 <__multadd>
 8006fde:	4607      	mov	r7, r0
 8006fe0:	10ad      	asrs	r5, r5, #2
 8006fe2:	d03d      	beq.n	8007060 <__pow5mult+0xa0>
 8006fe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fe6:	b97c      	cbnz	r4, 8007008 <__pow5mult+0x48>
 8006fe8:	2010      	movs	r0, #16
 8006fea:	f7ff fe29 	bl	8006c40 <malloc>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6270      	str	r0, [r6, #36]	; 0x24
 8006ff2:	b928      	cbnz	r0, 8007000 <__pow5mult+0x40>
 8006ff4:	4b1d      	ldr	r3, [pc, #116]	; (800706c <__pow5mult+0xac>)
 8006ff6:	481e      	ldr	r0, [pc, #120]	; (8007070 <__pow5mult+0xb0>)
 8006ff8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ffc:	f000 fd22 	bl	8007a44 <__assert_func>
 8007000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007004:	6004      	str	r4, [r0, #0]
 8007006:	60c4      	str	r4, [r0, #12]
 8007008:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800700c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007010:	b94c      	cbnz	r4, 8007026 <__pow5mult+0x66>
 8007012:	f240 2171 	movw	r1, #625	; 0x271
 8007016:	4630      	mov	r0, r6
 8007018:	f7ff ff12 	bl	8006e40 <__i2b>
 800701c:	2300      	movs	r3, #0
 800701e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007022:	4604      	mov	r4, r0
 8007024:	6003      	str	r3, [r0, #0]
 8007026:	f04f 0900 	mov.w	r9, #0
 800702a:	07eb      	lsls	r3, r5, #31
 800702c:	d50a      	bpl.n	8007044 <__pow5mult+0x84>
 800702e:	4639      	mov	r1, r7
 8007030:	4622      	mov	r2, r4
 8007032:	4630      	mov	r0, r6
 8007034:	f7ff ff1a 	bl	8006e6c <__multiply>
 8007038:	4639      	mov	r1, r7
 800703a:	4680      	mov	r8, r0
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff fe47 	bl	8006cd0 <_Bfree>
 8007042:	4647      	mov	r7, r8
 8007044:	106d      	asrs	r5, r5, #1
 8007046:	d00b      	beq.n	8007060 <__pow5mult+0xa0>
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	b938      	cbnz	r0, 800705c <__pow5mult+0x9c>
 800704c:	4622      	mov	r2, r4
 800704e:	4621      	mov	r1, r4
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff ff0b 	bl	8006e6c <__multiply>
 8007056:	6020      	str	r0, [r4, #0]
 8007058:	f8c0 9000 	str.w	r9, [r0]
 800705c:	4604      	mov	r4, r0
 800705e:	e7e4      	b.n	800702a <__pow5mult+0x6a>
 8007060:	4638      	mov	r0, r7
 8007062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007066:	bf00      	nop
 8007068:	080098e0 	.word	0x080098e0
 800706c:	080096b1 	.word	0x080096b1
 8007070:	08009794 	.word	0x08009794

08007074 <__lshift>:
 8007074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	6849      	ldr	r1, [r1, #4]
 800707c:	6923      	ldr	r3, [r4, #16]
 800707e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	4607      	mov	r7, r0
 8007086:	4691      	mov	r9, r2
 8007088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800708c:	f108 0601 	add.w	r6, r8, #1
 8007090:	42b3      	cmp	r3, r6
 8007092:	db0b      	blt.n	80070ac <__lshift+0x38>
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff fddb 	bl	8006c50 <_Balloc>
 800709a:	4605      	mov	r5, r0
 800709c:	b948      	cbnz	r0, 80070b2 <__lshift+0x3e>
 800709e:	4602      	mov	r2, r0
 80070a0:	4b2a      	ldr	r3, [pc, #168]	; (800714c <__lshift+0xd8>)
 80070a2:	482b      	ldr	r0, [pc, #172]	; (8007150 <__lshift+0xdc>)
 80070a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070a8:	f000 fccc 	bl	8007a44 <__assert_func>
 80070ac:	3101      	adds	r1, #1
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	e7ee      	b.n	8007090 <__lshift+0x1c>
 80070b2:	2300      	movs	r3, #0
 80070b4:	f100 0114 	add.w	r1, r0, #20
 80070b8:	f100 0210 	add.w	r2, r0, #16
 80070bc:	4618      	mov	r0, r3
 80070be:	4553      	cmp	r3, sl
 80070c0:	db37      	blt.n	8007132 <__lshift+0xbe>
 80070c2:	6920      	ldr	r0, [r4, #16]
 80070c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070c8:	f104 0314 	add.w	r3, r4, #20
 80070cc:	f019 091f 	ands.w	r9, r9, #31
 80070d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070d8:	d02f      	beq.n	800713a <__lshift+0xc6>
 80070da:	f1c9 0e20 	rsb	lr, r9, #32
 80070de:	468a      	mov	sl, r1
 80070e0:	f04f 0c00 	mov.w	ip, #0
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	fa02 f209 	lsl.w	r2, r2, r9
 80070ea:	ea42 020c 	orr.w	r2, r2, ip
 80070ee:	f84a 2b04 	str.w	r2, [sl], #4
 80070f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f6:	4298      	cmp	r0, r3
 80070f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80070fc:	d8f2      	bhi.n	80070e4 <__lshift+0x70>
 80070fe:	1b03      	subs	r3, r0, r4
 8007100:	3b15      	subs	r3, #21
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	3304      	adds	r3, #4
 8007108:	f104 0215 	add.w	r2, r4, #21
 800710c:	4290      	cmp	r0, r2
 800710e:	bf38      	it	cc
 8007110:	2304      	movcc	r3, #4
 8007112:	f841 c003 	str.w	ip, [r1, r3]
 8007116:	f1bc 0f00 	cmp.w	ip, #0
 800711a:	d001      	beq.n	8007120 <__lshift+0xac>
 800711c:	f108 0602 	add.w	r6, r8, #2
 8007120:	3e01      	subs	r6, #1
 8007122:	4638      	mov	r0, r7
 8007124:	612e      	str	r6, [r5, #16]
 8007126:	4621      	mov	r1, r4
 8007128:	f7ff fdd2 	bl	8006cd0 <_Bfree>
 800712c:	4628      	mov	r0, r5
 800712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007132:	f842 0f04 	str.w	r0, [r2, #4]!
 8007136:	3301      	adds	r3, #1
 8007138:	e7c1      	b.n	80070be <__lshift+0x4a>
 800713a:	3904      	subs	r1, #4
 800713c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007140:	f841 2f04 	str.w	r2, [r1, #4]!
 8007144:	4298      	cmp	r0, r3
 8007146:	d8f9      	bhi.n	800713c <__lshift+0xc8>
 8007148:	e7ea      	b.n	8007120 <__lshift+0xac>
 800714a:	bf00      	nop
 800714c:	08009723 	.word	0x08009723
 8007150:	08009794 	.word	0x08009794

08007154 <__mcmp>:
 8007154:	b530      	push	{r4, r5, lr}
 8007156:	6902      	ldr	r2, [r0, #16]
 8007158:	690c      	ldr	r4, [r1, #16]
 800715a:	1b12      	subs	r2, r2, r4
 800715c:	d10e      	bne.n	800717c <__mcmp+0x28>
 800715e:	f100 0314 	add.w	r3, r0, #20
 8007162:	3114      	adds	r1, #20
 8007164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800716c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007174:	42a5      	cmp	r5, r4
 8007176:	d003      	beq.n	8007180 <__mcmp+0x2c>
 8007178:	d305      	bcc.n	8007186 <__mcmp+0x32>
 800717a:	2201      	movs	r2, #1
 800717c:	4610      	mov	r0, r2
 800717e:	bd30      	pop	{r4, r5, pc}
 8007180:	4283      	cmp	r3, r0
 8007182:	d3f3      	bcc.n	800716c <__mcmp+0x18>
 8007184:	e7fa      	b.n	800717c <__mcmp+0x28>
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	e7f7      	b.n	800717c <__mcmp+0x28>

0800718c <__mdiff>:
 800718c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	460c      	mov	r4, r1
 8007192:	4606      	mov	r6, r0
 8007194:	4611      	mov	r1, r2
 8007196:	4620      	mov	r0, r4
 8007198:	4690      	mov	r8, r2
 800719a:	f7ff ffdb 	bl	8007154 <__mcmp>
 800719e:	1e05      	subs	r5, r0, #0
 80071a0:	d110      	bne.n	80071c4 <__mdiff+0x38>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff fd53 	bl	8006c50 <_Balloc>
 80071aa:	b930      	cbnz	r0, 80071ba <__mdiff+0x2e>
 80071ac:	4b3a      	ldr	r3, [pc, #232]	; (8007298 <__mdiff+0x10c>)
 80071ae:	4602      	mov	r2, r0
 80071b0:	f240 2132 	movw	r1, #562	; 0x232
 80071b4:	4839      	ldr	r0, [pc, #228]	; (800729c <__mdiff+0x110>)
 80071b6:	f000 fc45 	bl	8007a44 <__assert_func>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	bfa4      	itt	ge
 80071c6:	4643      	movge	r3, r8
 80071c8:	46a0      	movge	r8, r4
 80071ca:	4630      	mov	r0, r6
 80071cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071d0:	bfa6      	itte	ge
 80071d2:	461c      	movge	r4, r3
 80071d4:	2500      	movge	r5, #0
 80071d6:	2501      	movlt	r5, #1
 80071d8:	f7ff fd3a 	bl	8006c50 <_Balloc>
 80071dc:	b920      	cbnz	r0, 80071e8 <__mdiff+0x5c>
 80071de:	4b2e      	ldr	r3, [pc, #184]	; (8007298 <__mdiff+0x10c>)
 80071e0:	4602      	mov	r2, r0
 80071e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071e6:	e7e5      	b.n	80071b4 <__mdiff+0x28>
 80071e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80071ec:	6926      	ldr	r6, [r4, #16]
 80071ee:	60c5      	str	r5, [r0, #12]
 80071f0:	f104 0914 	add.w	r9, r4, #20
 80071f4:	f108 0514 	add.w	r5, r8, #20
 80071f8:	f100 0e14 	add.w	lr, r0, #20
 80071fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007204:	f108 0210 	add.w	r2, r8, #16
 8007208:	46f2      	mov	sl, lr
 800720a:	2100      	movs	r1, #0
 800720c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007210:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007214:	fa1f f883 	uxth.w	r8, r3
 8007218:	fa11 f18b 	uxtah	r1, r1, fp
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	eba1 0808 	sub.w	r8, r1, r8
 8007222:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007226:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800722a:	fa1f f888 	uxth.w	r8, r8
 800722e:	1419      	asrs	r1, r3, #16
 8007230:	454e      	cmp	r6, r9
 8007232:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007236:	f84a 3b04 	str.w	r3, [sl], #4
 800723a:	d8e7      	bhi.n	800720c <__mdiff+0x80>
 800723c:	1b33      	subs	r3, r6, r4
 800723e:	3b15      	subs	r3, #21
 8007240:	f023 0303 	bic.w	r3, r3, #3
 8007244:	3304      	adds	r3, #4
 8007246:	3415      	adds	r4, #21
 8007248:	42a6      	cmp	r6, r4
 800724a:	bf38      	it	cc
 800724c:	2304      	movcc	r3, #4
 800724e:	441d      	add	r5, r3
 8007250:	4473      	add	r3, lr
 8007252:	469e      	mov	lr, r3
 8007254:	462e      	mov	r6, r5
 8007256:	4566      	cmp	r6, ip
 8007258:	d30e      	bcc.n	8007278 <__mdiff+0xec>
 800725a:	f10c 0203 	add.w	r2, ip, #3
 800725e:	1b52      	subs	r2, r2, r5
 8007260:	f022 0203 	bic.w	r2, r2, #3
 8007264:	3d03      	subs	r5, #3
 8007266:	45ac      	cmp	ip, r5
 8007268:	bf38      	it	cc
 800726a:	2200      	movcc	r2, #0
 800726c:	441a      	add	r2, r3
 800726e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007272:	b17b      	cbz	r3, 8007294 <__mdiff+0x108>
 8007274:	6107      	str	r7, [r0, #16]
 8007276:	e7a3      	b.n	80071c0 <__mdiff+0x34>
 8007278:	f856 8b04 	ldr.w	r8, [r6], #4
 800727c:	fa11 f288 	uxtah	r2, r1, r8
 8007280:	1414      	asrs	r4, r2, #16
 8007282:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007286:	b292      	uxth	r2, r2
 8007288:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800728c:	f84e 2b04 	str.w	r2, [lr], #4
 8007290:	1421      	asrs	r1, r4, #16
 8007292:	e7e0      	b.n	8007256 <__mdiff+0xca>
 8007294:	3f01      	subs	r7, #1
 8007296:	e7ea      	b.n	800726e <__mdiff+0xe2>
 8007298:	08009723 	.word	0x08009723
 800729c:	08009794 	.word	0x08009794

080072a0 <__d2b>:
 80072a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072a4:	4689      	mov	r9, r1
 80072a6:	2101      	movs	r1, #1
 80072a8:	ec57 6b10 	vmov	r6, r7, d0
 80072ac:	4690      	mov	r8, r2
 80072ae:	f7ff fccf 	bl	8006c50 <_Balloc>
 80072b2:	4604      	mov	r4, r0
 80072b4:	b930      	cbnz	r0, 80072c4 <__d2b+0x24>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <__d2b+0xb0>)
 80072ba:	4826      	ldr	r0, [pc, #152]	; (8007354 <__d2b+0xb4>)
 80072bc:	f240 310a 	movw	r1, #778	; 0x30a
 80072c0:	f000 fbc0 	bl	8007a44 <__assert_func>
 80072c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072cc:	bb35      	cbnz	r5, 800731c <__d2b+0x7c>
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	d028      	beq.n	8007326 <__d2b+0x86>
 80072d4:	4668      	mov	r0, sp
 80072d6:	9600      	str	r6, [sp, #0]
 80072d8:	f7ff fd82 	bl	8006de0 <__lo0bits>
 80072dc:	9900      	ldr	r1, [sp, #0]
 80072de:	b300      	cbz	r0, 8007322 <__d2b+0x82>
 80072e0:	9a01      	ldr	r2, [sp, #4]
 80072e2:	f1c0 0320 	rsb	r3, r0, #32
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	430b      	orrs	r3, r1
 80072ec:	40c2      	lsrs	r2, r0
 80072ee:	6163      	str	r3, [r4, #20]
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	9b01      	ldr	r3, [sp, #4]
 80072f4:	61a3      	str	r3, [r4, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf14      	ite	ne
 80072fa:	2202      	movne	r2, #2
 80072fc:	2201      	moveq	r2, #1
 80072fe:	6122      	str	r2, [r4, #16]
 8007300:	b1d5      	cbz	r5, 8007338 <__d2b+0x98>
 8007302:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007306:	4405      	add	r5, r0
 8007308:	f8c9 5000 	str.w	r5, [r9]
 800730c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007310:	f8c8 0000 	str.w	r0, [r8]
 8007314:	4620      	mov	r0, r4
 8007316:	b003      	add	sp, #12
 8007318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800731c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007320:	e7d5      	b.n	80072ce <__d2b+0x2e>
 8007322:	6161      	str	r1, [r4, #20]
 8007324:	e7e5      	b.n	80072f2 <__d2b+0x52>
 8007326:	a801      	add	r0, sp, #4
 8007328:	f7ff fd5a 	bl	8006de0 <__lo0bits>
 800732c:	9b01      	ldr	r3, [sp, #4]
 800732e:	6163      	str	r3, [r4, #20]
 8007330:	2201      	movs	r2, #1
 8007332:	6122      	str	r2, [r4, #16]
 8007334:	3020      	adds	r0, #32
 8007336:	e7e3      	b.n	8007300 <__d2b+0x60>
 8007338:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800733c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007340:	f8c9 0000 	str.w	r0, [r9]
 8007344:	6918      	ldr	r0, [r3, #16]
 8007346:	f7ff fd2b 	bl	8006da0 <__hi0bits>
 800734a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800734e:	e7df      	b.n	8007310 <__d2b+0x70>
 8007350:	08009723 	.word	0x08009723
 8007354:	08009794 	.word	0x08009794

08007358 <_calloc_r>:
 8007358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800735a:	fba1 2402 	umull	r2, r4, r1, r2
 800735e:	b94c      	cbnz	r4, 8007374 <_calloc_r+0x1c>
 8007360:	4611      	mov	r1, r2
 8007362:	9201      	str	r2, [sp, #4]
 8007364:	f000 f87a 	bl	800745c <_malloc_r>
 8007368:	9a01      	ldr	r2, [sp, #4]
 800736a:	4605      	mov	r5, r0
 800736c:	b930      	cbnz	r0, 800737c <_calloc_r+0x24>
 800736e:	4628      	mov	r0, r5
 8007370:	b003      	add	sp, #12
 8007372:	bd30      	pop	{r4, r5, pc}
 8007374:	220c      	movs	r2, #12
 8007376:	6002      	str	r2, [r0, #0]
 8007378:	2500      	movs	r5, #0
 800737a:	e7f8      	b.n	800736e <_calloc_r+0x16>
 800737c:	4621      	mov	r1, r4
 800737e:	f7fe f85b 	bl	8005438 <memset>
 8007382:	e7f4      	b.n	800736e <_calloc_r+0x16>

08007384 <_free_r>:
 8007384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007386:	2900      	cmp	r1, #0
 8007388:	d044      	beq.n	8007414 <_free_r+0x90>
 800738a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800738e:	9001      	str	r0, [sp, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f1a1 0404 	sub.w	r4, r1, #4
 8007396:	bfb8      	it	lt
 8007398:	18e4      	addlt	r4, r4, r3
 800739a:	f000 fcdf 	bl	8007d5c <__malloc_lock>
 800739e:	4a1e      	ldr	r2, [pc, #120]	; (8007418 <_free_r+0x94>)
 80073a0:	9801      	ldr	r0, [sp, #4]
 80073a2:	6813      	ldr	r3, [r2, #0]
 80073a4:	b933      	cbnz	r3, 80073b4 <_free_r+0x30>
 80073a6:	6063      	str	r3, [r4, #4]
 80073a8:	6014      	str	r4, [r2, #0]
 80073aa:	b003      	add	sp, #12
 80073ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073b0:	f000 bcda 	b.w	8007d68 <__malloc_unlock>
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	d908      	bls.n	80073ca <_free_r+0x46>
 80073b8:	6825      	ldr	r5, [r4, #0]
 80073ba:	1961      	adds	r1, r4, r5
 80073bc:	428b      	cmp	r3, r1
 80073be:	bf01      	itttt	eq
 80073c0:	6819      	ldreq	r1, [r3, #0]
 80073c2:	685b      	ldreq	r3, [r3, #4]
 80073c4:	1949      	addeq	r1, r1, r5
 80073c6:	6021      	streq	r1, [r4, #0]
 80073c8:	e7ed      	b.n	80073a6 <_free_r+0x22>
 80073ca:	461a      	mov	r2, r3
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b10b      	cbz	r3, 80073d4 <_free_r+0x50>
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	d9fa      	bls.n	80073ca <_free_r+0x46>
 80073d4:	6811      	ldr	r1, [r2, #0]
 80073d6:	1855      	adds	r5, r2, r1
 80073d8:	42a5      	cmp	r5, r4
 80073da:	d10b      	bne.n	80073f4 <_free_r+0x70>
 80073dc:	6824      	ldr	r4, [r4, #0]
 80073de:	4421      	add	r1, r4
 80073e0:	1854      	adds	r4, r2, r1
 80073e2:	42a3      	cmp	r3, r4
 80073e4:	6011      	str	r1, [r2, #0]
 80073e6:	d1e0      	bne.n	80073aa <_free_r+0x26>
 80073e8:	681c      	ldr	r4, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	6053      	str	r3, [r2, #4]
 80073ee:	4421      	add	r1, r4
 80073f0:	6011      	str	r1, [r2, #0]
 80073f2:	e7da      	b.n	80073aa <_free_r+0x26>
 80073f4:	d902      	bls.n	80073fc <_free_r+0x78>
 80073f6:	230c      	movs	r3, #12
 80073f8:	6003      	str	r3, [r0, #0]
 80073fa:	e7d6      	b.n	80073aa <_free_r+0x26>
 80073fc:	6825      	ldr	r5, [r4, #0]
 80073fe:	1961      	adds	r1, r4, r5
 8007400:	428b      	cmp	r3, r1
 8007402:	bf04      	itt	eq
 8007404:	6819      	ldreq	r1, [r3, #0]
 8007406:	685b      	ldreq	r3, [r3, #4]
 8007408:	6063      	str	r3, [r4, #4]
 800740a:	bf04      	itt	eq
 800740c:	1949      	addeq	r1, r1, r5
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	6054      	str	r4, [r2, #4]
 8007412:	e7ca      	b.n	80073aa <_free_r+0x26>
 8007414:	b003      	add	sp, #12
 8007416:	bd30      	pop	{r4, r5, pc}
 8007418:	2000046c 	.word	0x2000046c

0800741c <sbrk_aligned>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	4e0e      	ldr	r6, [pc, #56]	; (8007458 <sbrk_aligned+0x3c>)
 8007420:	460c      	mov	r4, r1
 8007422:	6831      	ldr	r1, [r6, #0]
 8007424:	4605      	mov	r5, r0
 8007426:	b911      	cbnz	r1, 800742e <sbrk_aligned+0x12>
 8007428:	f000 f9e6 	bl	80077f8 <_sbrk_r>
 800742c:	6030      	str	r0, [r6, #0]
 800742e:	4621      	mov	r1, r4
 8007430:	4628      	mov	r0, r5
 8007432:	f000 f9e1 	bl	80077f8 <_sbrk_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	d00a      	beq.n	8007450 <sbrk_aligned+0x34>
 800743a:	1cc4      	adds	r4, r0, #3
 800743c:	f024 0403 	bic.w	r4, r4, #3
 8007440:	42a0      	cmp	r0, r4
 8007442:	d007      	beq.n	8007454 <sbrk_aligned+0x38>
 8007444:	1a21      	subs	r1, r4, r0
 8007446:	4628      	mov	r0, r5
 8007448:	f000 f9d6 	bl	80077f8 <_sbrk_r>
 800744c:	3001      	adds	r0, #1
 800744e:	d101      	bne.n	8007454 <sbrk_aligned+0x38>
 8007450:	f04f 34ff 	mov.w	r4, #4294967295
 8007454:	4620      	mov	r0, r4
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	20000470 	.word	0x20000470

0800745c <_malloc_r>:
 800745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007460:	1ccd      	adds	r5, r1, #3
 8007462:	f025 0503 	bic.w	r5, r5, #3
 8007466:	3508      	adds	r5, #8
 8007468:	2d0c      	cmp	r5, #12
 800746a:	bf38      	it	cc
 800746c:	250c      	movcc	r5, #12
 800746e:	2d00      	cmp	r5, #0
 8007470:	4607      	mov	r7, r0
 8007472:	db01      	blt.n	8007478 <_malloc_r+0x1c>
 8007474:	42a9      	cmp	r1, r5
 8007476:	d905      	bls.n	8007484 <_malloc_r+0x28>
 8007478:	230c      	movs	r3, #12
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	2600      	movs	r6, #0
 800747e:	4630      	mov	r0, r6
 8007480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007484:	4e2e      	ldr	r6, [pc, #184]	; (8007540 <_malloc_r+0xe4>)
 8007486:	f000 fc69 	bl	8007d5c <__malloc_lock>
 800748a:	6833      	ldr	r3, [r6, #0]
 800748c:	461c      	mov	r4, r3
 800748e:	bb34      	cbnz	r4, 80074de <_malloc_r+0x82>
 8007490:	4629      	mov	r1, r5
 8007492:	4638      	mov	r0, r7
 8007494:	f7ff ffc2 	bl	800741c <sbrk_aligned>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	4604      	mov	r4, r0
 800749c:	d14d      	bne.n	800753a <_malloc_r+0xde>
 800749e:	6834      	ldr	r4, [r6, #0]
 80074a0:	4626      	mov	r6, r4
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	d140      	bne.n	8007528 <_malloc_r+0xcc>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	4631      	mov	r1, r6
 80074aa:	4638      	mov	r0, r7
 80074ac:	eb04 0803 	add.w	r8, r4, r3
 80074b0:	f000 f9a2 	bl	80077f8 <_sbrk_r>
 80074b4:	4580      	cmp	r8, r0
 80074b6:	d13a      	bne.n	800752e <_malloc_r+0xd2>
 80074b8:	6821      	ldr	r1, [r4, #0]
 80074ba:	3503      	adds	r5, #3
 80074bc:	1a6d      	subs	r5, r5, r1
 80074be:	f025 0503 	bic.w	r5, r5, #3
 80074c2:	3508      	adds	r5, #8
 80074c4:	2d0c      	cmp	r5, #12
 80074c6:	bf38      	it	cc
 80074c8:	250c      	movcc	r5, #12
 80074ca:	4629      	mov	r1, r5
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff ffa5 	bl	800741c <sbrk_aligned>
 80074d2:	3001      	adds	r0, #1
 80074d4:	d02b      	beq.n	800752e <_malloc_r+0xd2>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	442b      	add	r3, r5
 80074da:	6023      	str	r3, [r4, #0]
 80074dc:	e00e      	b.n	80074fc <_malloc_r+0xa0>
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	1b52      	subs	r2, r2, r5
 80074e2:	d41e      	bmi.n	8007522 <_malloc_r+0xc6>
 80074e4:	2a0b      	cmp	r2, #11
 80074e6:	d916      	bls.n	8007516 <_malloc_r+0xba>
 80074e8:	1961      	adds	r1, r4, r5
 80074ea:	42a3      	cmp	r3, r4
 80074ec:	6025      	str	r5, [r4, #0]
 80074ee:	bf18      	it	ne
 80074f0:	6059      	strne	r1, [r3, #4]
 80074f2:	6863      	ldr	r3, [r4, #4]
 80074f4:	bf08      	it	eq
 80074f6:	6031      	streq	r1, [r6, #0]
 80074f8:	5162      	str	r2, [r4, r5]
 80074fa:	604b      	str	r3, [r1, #4]
 80074fc:	4638      	mov	r0, r7
 80074fe:	f104 060b 	add.w	r6, r4, #11
 8007502:	f000 fc31 	bl	8007d68 <__malloc_unlock>
 8007506:	f026 0607 	bic.w	r6, r6, #7
 800750a:	1d23      	adds	r3, r4, #4
 800750c:	1af2      	subs	r2, r6, r3
 800750e:	d0b6      	beq.n	800747e <_malloc_r+0x22>
 8007510:	1b9b      	subs	r3, r3, r6
 8007512:	50a3      	str	r3, [r4, r2]
 8007514:	e7b3      	b.n	800747e <_malloc_r+0x22>
 8007516:	6862      	ldr	r2, [r4, #4]
 8007518:	42a3      	cmp	r3, r4
 800751a:	bf0c      	ite	eq
 800751c:	6032      	streq	r2, [r6, #0]
 800751e:	605a      	strne	r2, [r3, #4]
 8007520:	e7ec      	b.n	80074fc <_malloc_r+0xa0>
 8007522:	4623      	mov	r3, r4
 8007524:	6864      	ldr	r4, [r4, #4]
 8007526:	e7b2      	b.n	800748e <_malloc_r+0x32>
 8007528:	4634      	mov	r4, r6
 800752a:	6876      	ldr	r6, [r6, #4]
 800752c:	e7b9      	b.n	80074a2 <_malloc_r+0x46>
 800752e:	230c      	movs	r3, #12
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	4638      	mov	r0, r7
 8007534:	f000 fc18 	bl	8007d68 <__malloc_unlock>
 8007538:	e7a1      	b.n	800747e <_malloc_r+0x22>
 800753a:	6025      	str	r5, [r4, #0]
 800753c:	e7de      	b.n	80074fc <_malloc_r+0xa0>
 800753e:	bf00      	nop
 8007540:	2000046c 	.word	0x2000046c

08007544 <__sfputc_r>:
 8007544:	6893      	ldr	r3, [r2, #8]
 8007546:	3b01      	subs	r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	b410      	push	{r4}
 800754c:	6093      	str	r3, [r2, #8]
 800754e:	da08      	bge.n	8007562 <__sfputc_r+0x1e>
 8007550:	6994      	ldr	r4, [r2, #24]
 8007552:	42a3      	cmp	r3, r4
 8007554:	db01      	blt.n	800755a <__sfputc_r+0x16>
 8007556:	290a      	cmp	r1, #10
 8007558:	d103      	bne.n	8007562 <__sfputc_r+0x1e>
 800755a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800755e:	f000 b99f 	b.w	80078a0 <__swbuf_r>
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	1c58      	adds	r0, r3, #1
 8007566:	6010      	str	r0, [r2, #0]
 8007568:	7019      	strb	r1, [r3, #0]
 800756a:	4608      	mov	r0, r1
 800756c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007570:	4770      	bx	lr

08007572 <__sfputs_r>:
 8007572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007574:	4606      	mov	r6, r0
 8007576:	460f      	mov	r7, r1
 8007578:	4614      	mov	r4, r2
 800757a:	18d5      	adds	r5, r2, r3
 800757c:	42ac      	cmp	r4, r5
 800757e:	d101      	bne.n	8007584 <__sfputs_r+0x12>
 8007580:	2000      	movs	r0, #0
 8007582:	e007      	b.n	8007594 <__sfputs_r+0x22>
 8007584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007588:	463a      	mov	r2, r7
 800758a:	4630      	mov	r0, r6
 800758c:	f7ff ffda 	bl	8007544 <__sfputc_r>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d1f3      	bne.n	800757c <__sfputs_r+0xa>
 8007594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007598 <_vfiprintf_r>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	460d      	mov	r5, r1
 800759e:	b09d      	sub	sp, #116	; 0x74
 80075a0:	4614      	mov	r4, r2
 80075a2:	4698      	mov	r8, r3
 80075a4:	4606      	mov	r6, r0
 80075a6:	b118      	cbz	r0, 80075b0 <_vfiprintf_r+0x18>
 80075a8:	6983      	ldr	r3, [r0, #24]
 80075aa:	b90b      	cbnz	r3, 80075b0 <_vfiprintf_r+0x18>
 80075ac:	f7ff faa2 	bl	8006af4 <__sinit>
 80075b0:	4b89      	ldr	r3, [pc, #548]	; (80077d8 <_vfiprintf_r+0x240>)
 80075b2:	429d      	cmp	r5, r3
 80075b4:	d11b      	bne.n	80075ee <_vfiprintf_r+0x56>
 80075b6:	6875      	ldr	r5, [r6, #4]
 80075b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ba:	07d9      	lsls	r1, r3, #31
 80075bc:	d405      	bmi.n	80075ca <_vfiprintf_r+0x32>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	059a      	lsls	r2, r3, #22
 80075c2:	d402      	bmi.n	80075ca <_vfiprintf_r+0x32>
 80075c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075c6:	f7ff fb38 	bl	8006c3a <__retarget_lock_acquire_recursive>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	071b      	lsls	r3, r3, #28
 80075ce:	d501      	bpl.n	80075d4 <_vfiprintf_r+0x3c>
 80075d0:	692b      	ldr	r3, [r5, #16]
 80075d2:	b9eb      	cbnz	r3, 8007610 <_vfiprintf_r+0x78>
 80075d4:	4629      	mov	r1, r5
 80075d6:	4630      	mov	r0, r6
 80075d8:	f000 f9c6 	bl	8007968 <__swsetup_r>
 80075dc:	b1c0      	cbz	r0, 8007610 <_vfiprintf_r+0x78>
 80075de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075e0:	07dc      	lsls	r4, r3, #31
 80075e2:	d50e      	bpl.n	8007602 <_vfiprintf_r+0x6a>
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	b01d      	add	sp, #116	; 0x74
 80075ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	4b7b      	ldr	r3, [pc, #492]	; (80077dc <_vfiprintf_r+0x244>)
 80075f0:	429d      	cmp	r5, r3
 80075f2:	d101      	bne.n	80075f8 <_vfiprintf_r+0x60>
 80075f4:	68b5      	ldr	r5, [r6, #8]
 80075f6:	e7df      	b.n	80075b8 <_vfiprintf_r+0x20>
 80075f8:	4b79      	ldr	r3, [pc, #484]	; (80077e0 <_vfiprintf_r+0x248>)
 80075fa:	429d      	cmp	r5, r3
 80075fc:	bf08      	it	eq
 80075fe:	68f5      	ldreq	r5, [r6, #12]
 8007600:	e7da      	b.n	80075b8 <_vfiprintf_r+0x20>
 8007602:	89ab      	ldrh	r3, [r5, #12]
 8007604:	0598      	lsls	r0, r3, #22
 8007606:	d4ed      	bmi.n	80075e4 <_vfiprintf_r+0x4c>
 8007608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800760a:	f7ff fb17 	bl	8006c3c <__retarget_lock_release_recursive>
 800760e:	e7e9      	b.n	80075e4 <_vfiprintf_r+0x4c>
 8007610:	2300      	movs	r3, #0
 8007612:	9309      	str	r3, [sp, #36]	; 0x24
 8007614:	2320      	movs	r3, #32
 8007616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800761a:	f8cd 800c 	str.w	r8, [sp, #12]
 800761e:	2330      	movs	r3, #48	; 0x30
 8007620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077e4 <_vfiprintf_r+0x24c>
 8007624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007628:	f04f 0901 	mov.w	r9, #1
 800762c:	4623      	mov	r3, r4
 800762e:	469a      	mov	sl, r3
 8007630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007634:	b10a      	cbz	r2, 800763a <_vfiprintf_r+0xa2>
 8007636:	2a25      	cmp	r2, #37	; 0x25
 8007638:	d1f9      	bne.n	800762e <_vfiprintf_r+0x96>
 800763a:	ebba 0b04 	subs.w	fp, sl, r4
 800763e:	d00b      	beq.n	8007658 <_vfiprintf_r+0xc0>
 8007640:	465b      	mov	r3, fp
 8007642:	4622      	mov	r2, r4
 8007644:	4629      	mov	r1, r5
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff ff93 	bl	8007572 <__sfputs_r>
 800764c:	3001      	adds	r0, #1
 800764e:	f000 80aa 	beq.w	80077a6 <_vfiprintf_r+0x20e>
 8007652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007654:	445a      	add	r2, fp
 8007656:	9209      	str	r2, [sp, #36]	; 0x24
 8007658:	f89a 3000 	ldrb.w	r3, [sl]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80a2 	beq.w	80077a6 <_vfiprintf_r+0x20e>
 8007662:	2300      	movs	r3, #0
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800766c:	f10a 0a01 	add.w	sl, sl, #1
 8007670:	9304      	str	r3, [sp, #16]
 8007672:	9307      	str	r3, [sp, #28]
 8007674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007678:	931a      	str	r3, [sp, #104]	; 0x68
 800767a:	4654      	mov	r4, sl
 800767c:	2205      	movs	r2, #5
 800767e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007682:	4858      	ldr	r0, [pc, #352]	; (80077e4 <_vfiprintf_r+0x24c>)
 8007684:	f7f8 fdb4 	bl	80001f0 <memchr>
 8007688:	9a04      	ldr	r2, [sp, #16]
 800768a:	b9d8      	cbnz	r0, 80076c4 <_vfiprintf_r+0x12c>
 800768c:	06d1      	lsls	r1, r2, #27
 800768e:	bf44      	itt	mi
 8007690:	2320      	movmi	r3, #32
 8007692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007696:	0713      	lsls	r3, r2, #28
 8007698:	bf44      	itt	mi
 800769a:	232b      	movmi	r3, #43	; 0x2b
 800769c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a0:	f89a 3000 	ldrb.w	r3, [sl]
 80076a4:	2b2a      	cmp	r3, #42	; 0x2a
 80076a6:	d015      	beq.n	80076d4 <_vfiprintf_r+0x13c>
 80076a8:	9a07      	ldr	r2, [sp, #28]
 80076aa:	4654      	mov	r4, sl
 80076ac:	2000      	movs	r0, #0
 80076ae:	f04f 0c0a 	mov.w	ip, #10
 80076b2:	4621      	mov	r1, r4
 80076b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076b8:	3b30      	subs	r3, #48	; 0x30
 80076ba:	2b09      	cmp	r3, #9
 80076bc:	d94e      	bls.n	800775c <_vfiprintf_r+0x1c4>
 80076be:	b1b0      	cbz	r0, 80076ee <_vfiprintf_r+0x156>
 80076c0:	9207      	str	r2, [sp, #28]
 80076c2:	e014      	b.n	80076ee <_vfiprintf_r+0x156>
 80076c4:	eba0 0308 	sub.w	r3, r0, r8
 80076c8:	fa09 f303 	lsl.w	r3, r9, r3
 80076cc:	4313      	orrs	r3, r2
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	46a2      	mov	sl, r4
 80076d2:	e7d2      	b.n	800767a <_vfiprintf_r+0xe2>
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	1d19      	adds	r1, r3, #4
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	9103      	str	r1, [sp, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bfbb      	ittet	lt
 80076e0:	425b      	neglt	r3, r3
 80076e2:	f042 0202 	orrlt.w	r2, r2, #2
 80076e6:	9307      	strge	r3, [sp, #28]
 80076e8:	9307      	strlt	r3, [sp, #28]
 80076ea:	bfb8      	it	lt
 80076ec:	9204      	strlt	r2, [sp, #16]
 80076ee:	7823      	ldrb	r3, [r4, #0]
 80076f0:	2b2e      	cmp	r3, #46	; 0x2e
 80076f2:	d10c      	bne.n	800770e <_vfiprintf_r+0x176>
 80076f4:	7863      	ldrb	r3, [r4, #1]
 80076f6:	2b2a      	cmp	r3, #42	; 0x2a
 80076f8:	d135      	bne.n	8007766 <_vfiprintf_r+0x1ce>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	1d1a      	adds	r2, r3, #4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	9203      	str	r2, [sp, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	bfb8      	it	lt
 8007706:	f04f 33ff 	movlt.w	r3, #4294967295
 800770a:	3402      	adds	r4, #2
 800770c:	9305      	str	r3, [sp, #20]
 800770e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077f4 <_vfiprintf_r+0x25c>
 8007712:	7821      	ldrb	r1, [r4, #0]
 8007714:	2203      	movs	r2, #3
 8007716:	4650      	mov	r0, sl
 8007718:	f7f8 fd6a 	bl	80001f0 <memchr>
 800771c:	b140      	cbz	r0, 8007730 <_vfiprintf_r+0x198>
 800771e:	2340      	movs	r3, #64	; 0x40
 8007720:	eba0 000a 	sub.w	r0, r0, sl
 8007724:	fa03 f000 	lsl.w	r0, r3, r0
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	4303      	orrs	r3, r0
 800772c:	3401      	adds	r4, #1
 800772e:	9304      	str	r3, [sp, #16]
 8007730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007734:	482c      	ldr	r0, [pc, #176]	; (80077e8 <_vfiprintf_r+0x250>)
 8007736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800773a:	2206      	movs	r2, #6
 800773c:	f7f8 fd58 	bl	80001f0 <memchr>
 8007740:	2800      	cmp	r0, #0
 8007742:	d03f      	beq.n	80077c4 <_vfiprintf_r+0x22c>
 8007744:	4b29      	ldr	r3, [pc, #164]	; (80077ec <_vfiprintf_r+0x254>)
 8007746:	bb1b      	cbnz	r3, 8007790 <_vfiprintf_r+0x1f8>
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	3307      	adds	r3, #7
 800774c:	f023 0307 	bic.w	r3, r3, #7
 8007750:	3308      	adds	r3, #8
 8007752:	9303      	str	r3, [sp, #12]
 8007754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007756:	443b      	add	r3, r7
 8007758:	9309      	str	r3, [sp, #36]	; 0x24
 800775a:	e767      	b.n	800762c <_vfiprintf_r+0x94>
 800775c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007760:	460c      	mov	r4, r1
 8007762:	2001      	movs	r0, #1
 8007764:	e7a5      	b.n	80076b2 <_vfiprintf_r+0x11a>
 8007766:	2300      	movs	r3, #0
 8007768:	3401      	adds	r4, #1
 800776a:	9305      	str	r3, [sp, #20]
 800776c:	4619      	mov	r1, r3
 800776e:	f04f 0c0a 	mov.w	ip, #10
 8007772:	4620      	mov	r0, r4
 8007774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007778:	3a30      	subs	r2, #48	; 0x30
 800777a:	2a09      	cmp	r2, #9
 800777c:	d903      	bls.n	8007786 <_vfiprintf_r+0x1ee>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0c5      	beq.n	800770e <_vfiprintf_r+0x176>
 8007782:	9105      	str	r1, [sp, #20]
 8007784:	e7c3      	b.n	800770e <_vfiprintf_r+0x176>
 8007786:	fb0c 2101 	mla	r1, ip, r1, r2
 800778a:	4604      	mov	r4, r0
 800778c:	2301      	movs	r3, #1
 800778e:	e7f0      	b.n	8007772 <_vfiprintf_r+0x1da>
 8007790:	ab03      	add	r3, sp, #12
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	462a      	mov	r2, r5
 8007796:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <_vfiprintf_r+0x258>)
 8007798:	a904      	add	r1, sp, #16
 800779a:	4630      	mov	r0, r6
 800779c:	f7fd fef4 	bl	8005588 <_printf_float>
 80077a0:	4607      	mov	r7, r0
 80077a2:	1c78      	adds	r0, r7, #1
 80077a4:	d1d6      	bne.n	8007754 <_vfiprintf_r+0x1bc>
 80077a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077a8:	07d9      	lsls	r1, r3, #31
 80077aa:	d405      	bmi.n	80077b8 <_vfiprintf_r+0x220>
 80077ac:	89ab      	ldrh	r3, [r5, #12]
 80077ae:	059a      	lsls	r2, r3, #22
 80077b0:	d402      	bmi.n	80077b8 <_vfiprintf_r+0x220>
 80077b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077b4:	f7ff fa42 	bl	8006c3c <__retarget_lock_release_recursive>
 80077b8:	89ab      	ldrh	r3, [r5, #12]
 80077ba:	065b      	lsls	r3, r3, #25
 80077bc:	f53f af12 	bmi.w	80075e4 <_vfiprintf_r+0x4c>
 80077c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077c2:	e711      	b.n	80075e8 <_vfiprintf_r+0x50>
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <_vfiprintf_r+0x258>)
 80077cc:	a904      	add	r1, sp, #16
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7fe f97e 	bl	8005ad0 <_printf_i>
 80077d4:	e7e4      	b.n	80077a0 <_vfiprintf_r+0x208>
 80077d6:	bf00      	nop
 80077d8:	08009754 	.word	0x08009754
 80077dc:	08009774 	.word	0x08009774
 80077e0:	08009734 	.word	0x08009734
 80077e4:	080098ec 	.word	0x080098ec
 80077e8:	080098f6 	.word	0x080098f6
 80077ec:	08005589 	.word	0x08005589
 80077f0:	08007573 	.word	0x08007573
 80077f4:	080098f2 	.word	0x080098f2

080077f8 <_sbrk_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d06      	ldr	r5, [pc, #24]	; (8007814 <_sbrk_r+0x1c>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	602b      	str	r3, [r5, #0]
 8007804:	f7fb ffbe 	bl	8003784 <_sbrk>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_sbrk_r+0x1a>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_sbrk_r+0x1a>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	20000474 	.word	0x20000474

08007818 <__sread>:
 8007818:	b510      	push	{r4, lr}
 800781a:	460c      	mov	r4, r1
 800781c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007820:	f000 faa8 	bl	8007d74 <_read_r>
 8007824:	2800      	cmp	r0, #0
 8007826:	bfab      	itete	ge
 8007828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800782a:	89a3      	ldrhlt	r3, [r4, #12]
 800782c:	181b      	addge	r3, r3, r0
 800782e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007832:	bfac      	ite	ge
 8007834:	6563      	strge	r3, [r4, #84]	; 0x54
 8007836:	81a3      	strhlt	r3, [r4, #12]
 8007838:	bd10      	pop	{r4, pc}

0800783a <__swrite>:
 800783a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783e:	461f      	mov	r7, r3
 8007840:	898b      	ldrh	r3, [r1, #12]
 8007842:	05db      	lsls	r3, r3, #23
 8007844:	4605      	mov	r5, r0
 8007846:	460c      	mov	r4, r1
 8007848:	4616      	mov	r6, r2
 800784a:	d505      	bpl.n	8007858 <__swrite+0x1e>
 800784c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007850:	2302      	movs	r3, #2
 8007852:	2200      	movs	r2, #0
 8007854:	f000 f9f8 	bl	8007c48 <_lseek_r>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800785e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	4632      	mov	r2, r6
 8007866:	463b      	mov	r3, r7
 8007868:	4628      	mov	r0, r5
 800786a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800786e:	f000 b869 	b.w	8007944 <_write_r>

08007872 <__sseek>:
 8007872:	b510      	push	{r4, lr}
 8007874:	460c      	mov	r4, r1
 8007876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787a:	f000 f9e5 	bl	8007c48 <_lseek_r>
 800787e:	1c43      	adds	r3, r0, #1
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	bf15      	itete	ne
 8007884:	6560      	strne	r0, [r4, #84]	; 0x54
 8007886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800788a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800788e:	81a3      	strheq	r3, [r4, #12]
 8007890:	bf18      	it	ne
 8007892:	81a3      	strhne	r3, [r4, #12]
 8007894:	bd10      	pop	{r4, pc}

08007896 <__sclose>:
 8007896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789a:	f000 b8f1 	b.w	8007a80 <_close_r>
	...

080078a0 <__swbuf_r>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	460e      	mov	r6, r1
 80078a4:	4614      	mov	r4, r2
 80078a6:	4605      	mov	r5, r0
 80078a8:	b118      	cbz	r0, 80078b2 <__swbuf_r+0x12>
 80078aa:	6983      	ldr	r3, [r0, #24]
 80078ac:	b90b      	cbnz	r3, 80078b2 <__swbuf_r+0x12>
 80078ae:	f7ff f921 	bl	8006af4 <__sinit>
 80078b2:	4b21      	ldr	r3, [pc, #132]	; (8007938 <__swbuf_r+0x98>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	d12b      	bne.n	8007910 <__swbuf_r+0x70>
 80078b8:	686c      	ldr	r4, [r5, #4]
 80078ba:	69a3      	ldr	r3, [r4, #24]
 80078bc:	60a3      	str	r3, [r4, #8]
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	071a      	lsls	r2, r3, #28
 80078c2:	d52f      	bpl.n	8007924 <__swbuf_r+0x84>
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	b36b      	cbz	r3, 8007924 <__swbuf_r+0x84>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1ac0      	subs	r0, r0, r3
 80078ce:	6963      	ldr	r3, [r4, #20]
 80078d0:	b2f6      	uxtb	r6, r6
 80078d2:	4283      	cmp	r3, r0
 80078d4:	4637      	mov	r7, r6
 80078d6:	dc04      	bgt.n	80078e2 <__swbuf_r+0x42>
 80078d8:	4621      	mov	r1, r4
 80078da:	4628      	mov	r0, r5
 80078dc:	f000 f966 	bl	8007bac <_fflush_r>
 80078e0:	bb30      	cbnz	r0, 8007930 <__swbuf_r+0x90>
 80078e2:	68a3      	ldr	r3, [r4, #8]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	60a3      	str	r3, [r4, #8]
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	701e      	strb	r6, [r3, #0]
 80078f0:	6963      	ldr	r3, [r4, #20]
 80078f2:	3001      	adds	r0, #1
 80078f4:	4283      	cmp	r3, r0
 80078f6:	d004      	beq.n	8007902 <__swbuf_r+0x62>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	07db      	lsls	r3, r3, #31
 80078fc:	d506      	bpl.n	800790c <__swbuf_r+0x6c>
 80078fe:	2e0a      	cmp	r6, #10
 8007900:	d104      	bne.n	800790c <__swbuf_r+0x6c>
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	f000 f951 	bl	8007bac <_fflush_r>
 800790a:	b988      	cbnz	r0, 8007930 <__swbuf_r+0x90>
 800790c:	4638      	mov	r0, r7
 800790e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007910:	4b0a      	ldr	r3, [pc, #40]	; (800793c <__swbuf_r+0x9c>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d101      	bne.n	800791a <__swbuf_r+0x7a>
 8007916:	68ac      	ldr	r4, [r5, #8]
 8007918:	e7cf      	b.n	80078ba <__swbuf_r+0x1a>
 800791a:	4b09      	ldr	r3, [pc, #36]	; (8007940 <__swbuf_r+0xa0>)
 800791c:	429c      	cmp	r4, r3
 800791e:	bf08      	it	eq
 8007920:	68ec      	ldreq	r4, [r5, #12]
 8007922:	e7ca      	b.n	80078ba <__swbuf_r+0x1a>
 8007924:	4621      	mov	r1, r4
 8007926:	4628      	mov	r0, r5
 8007928:	f000 f81e 	bl	8007968 <__swsetup_r>
 800792c:	2800      	cmp	r0, #0
 800792e:	d0cb      	beq.n	80078c8 <__swbuf_r+0x28>
 8007930:	f04f 37ff 	mov.w	r7, #4294967295
 8007934:	e7ea      	b.n	800790c <__swbuf_r+0x6c>
 8007936:	bf00      	nop
 8007938:	08009754 	.word	0x08009754
 800793c:	08009774 	.word	0x08009774
 8007940:	08009734 	.word	0x08009734

08007944 <_write_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d07      	ldr	r5, [pc, #28]	; (8007964 <_write_r+0x20>)
 8007948:	4604      	mov	r4, r0
 800794a:	4608      	mov	r0, r1
 800794c:	4611      	mov	r1, r2
 800794e:	2200      	movs	r2, #0
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f7fa fb28 	bl	8001fa8 <_write>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_write_r+0x1e>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_write_r+0x1e>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	20000474 	.word	0x20000474

08007968 <__swsetup_r>:
 8007968:	4b32      	ldr	r3, [pc, #200]	; (8007a34 <__swsetup_r+0xcc>)
 800796a:	b570      	push	{r4, r5, r6, lr}
 800796c:	681d      	ldr	r5, [r3, #0]
 800796e:	4606      	mov	r6, r0
 8007970:	460c      	mov	r4, r1
 8007972:	b125      	cbz	r5, 800797e <__swsetup_r+0x16>
 8007974:	69ab      	ldr	r3, [r5, #24]
 8007976:	b913      	cbnz	r3, 800797e <__swsetup_r+0x16>
 8007978:	4628      	mov	r0, r5
 800797a:	f7ff f8bb 	bl	8006af4 <__sinit>
 800797e:	4b2e      	ldr	r3, [pc, #184]	; (8007a38 <__swsetup_r+0xd0>)
 8007980:	429c      	cmp	r4, r3
 8007982:	d10f      	bne.n	80079a4 <__swsetup_r+0x3c>
 8007984:	686c      	ldr	r4, [r5, #4]
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800798c:	0719      	lsls	r1, r3, #28
 800798e:	d42c      	bmi.n	80079ea <__swsetup_r+0x82>
 8007990:	06dd      	lsls	r5, r3, #27
 8007992:	d411      	bmi.n	80079b8 <__swsetup_r+0x50>
 8007994:	2309      	movs	r3, #9
 8007996:	6033      	str	r3, [r6, #0]
 8007998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
 80079a2:	e03e      	b.n	8007a22 <__swsetup_r+0xba>
 80079a4:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <__swsetup_r+0xd4>)
 80079a6:	429c      	cmp	r4, r3
 80079a8:	d101      	bne.n	80079ae <__swsetup_r+0x46>
 80079aa:	68ac      	ldr	r4, [r5, #8]
 80079ac:	e7eb      	b.n	8007986 <__swsetup_r+0x1e>
 80079ae:	4b24      	ldr	r3, [pc, #144]	; (8007a40 <__swsetup_r+0xd8>)
 80079b0:	429c      	cmp	r4, r3
 80079b2:	bf08      	it	eq
 80079b4:	68ec      	ldreq	r4, [r5, #12]
 80079b6:	e7e6      	b.n	8007986 <__swsetup_r+0x1e>
 80079b8:	0758      	lsls	r0, r3, #29
 80079ba:	d512      	bpl.n	80079e2 <__swsetup_r+0x7a>
 80079bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079be:	b141      	cbz	r1, 80079d2 <__swsetup_r+0x6a>
 80079c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079c4:	4299      	cmp	r1, r3
 80079c6:	d002      	beq.n	80079ce <__swsetup_r+0x66>
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff fcdb 	bl	8007384 <_free_r>
 80079ce:	2300      	movs	r3, #0
 80079d0:	6363      	str	r3, [r4, #52]	; 0x34
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	2300      	movs	r3, #0
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f043 0308 	orr.w	r3, r3, #8
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	b94b      	cbnz	r3, 8007a02 <__swsetup_r+0x9a>
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f8:	d003      	beq.n	8007a02 <__swsetup_r+0x9a>
 80079fa:	4621      	mov	r1, r4
 80079fc:	4630      	mov	r0, r6
 80079fe:	f000 f95b 	bl	8007cb8 <__smakebuf_r>
 8007a02:	89a0      	ldrh	r0, [r4, #12]
 8007a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a08:	f010 0301 	ands.w	r3, r0, #1
 8007a0c:	d00a      	beq.n	8007a24 <__swsetup_r+0xbc>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	6963      	ldr	r3, [r4, #20]
 8007a14:	425b      	negs	r3, r3
 8007a16:	61a3      	str	r3, [r4, #24]
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	b943      	cbnz	r3, 8007a2e <__swsetup_r+0xc6>
 8007a1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a20:	d1ba      	bne.n	8007998 <__swsetup_r+0x30>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	0781      	lsls	r1, r0, #30
 8007a26:	bf58      	it	pl
 8007a28:	6963      	ldrpl	r3, [r4, #20]
 8007a2a:	60a3      	str	r3, [r4, #8]
 8007a2c:	e7f4      	b.n	8007a18 <__swsetup_r+0xb0>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	e7f7      	b.n	8007a22 <__swsetup_r+0xba>
 8007a32:	bf00      	nop
 8007a34:	2000005c 	.word	0x2000005c
 8007a38:	08009754 	.word	0x08009754
 8007a3c:	08009774 	.word	0x08009774
 8007a40:	08009734 	.word	0x08009734

08007a44 <__assert_func>:
 8007a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a46:	4614      	mov	r4, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <__assert_func+0x2c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4605      	mov	r5, r0
 8007a50:	68d8      	ldr	r0, [r3, #12]
 8007a52:	b14c      	cbz	r4, 8007a68 <__assert_func+0x24>
 8007a54:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <__assert_func+0x30>)
 8007a56:	9100      	str	r1, [sp, #0]
 8007a58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a5c:	4906      	ldr	r1, [pc, #24]	; (8007a78 <__assert_func+0x34>)
 8007a5e:	462b      	mov	r3, r5
 8007a60:	f000 f8e0 	bl	8007c24 <fiprintf>
 8007a64:	f000 f9a5 	bl	8007db2 <abort>
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <__assert_func+0x38>)
 8007a6a:	461c      	mov	r4, r3
 8007a6c:	e7f3      	b.n	8007a56 <__assert_func+0x12>
 8007a6e:	bf00      	nop
 8007a70:	2000005c 	.word	0x2000005c
 8007a74:	080098fd 	.word	0x080098fd
 8007a78:	0800990a 	.word	0x0800990a
 8007a7c:	08009938 	.word	0x08009938

08007a80 <_close_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	; (8007a9c <_close_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7fb fe46 	bl	800371c <_close>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_close_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_close_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000474 	.word	0x20000474

08007aa0 <__sflush_r>:
 8007aa0:	898a      	ldrh	r2, [r1, #12]
 8007aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	0710      	lsls	r0, r2, #28
 8007aaa:	460c      	mov	r4, r1
 8007aac:	d458      	bmi.n	8007b60 <__sflush_r+0xc0>
 8007aae:	684b      	ldr	r3, [r1, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dc05      	bgt.n	8007ac0 <__sflush_r+0x20>
 8007ab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dc02      	bgt.n	8007ac0 <__sflush_r+0x20>
 8007aba:	2000      	movs	r0, #0
 8007abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d0f9      	beq.n	8007aba <__sflush_r+0x1a>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007acc:	682f      	ldr	r7, [r5, #0]
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	d032      	beq.n	8007b38 <__sflush_r+0x98>
 8007ad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	075a      	lsls	r2, r3, #29
 8007ad8:	d505      	bpl.n	8007ae6 <__sflush_r+0x46>
 8007ada:	6863      	ldr	r3, [r4, #4]
 8007adc:	1ac0      	subs	r0, r0, r3
 8007ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ae0:	b10b      	cbz	r3, 8007ae6 <__sflush_r+0x46>
 8007ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ae4:	1ac0      	subs	r0, r0, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4602      	mov	r2, r0
 8007aea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aec:	6a21      	ldr	r1, [r4, #32]
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b0      	blx	r6
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	d106      	bne.n	8007b06 <__sflush_r+0x66>
 8007af8:	6829      	ldr	r1, [r5, #0]
 8007afa:	291d      	cmp	r1, #29
 8007afc:	d82c      	bhi.n	8007b58 <__sflush_r+0xb8>
 8007afe:	4a2a      	ldr	r2, [pc, #168]	; (8007ba8 <__sflush_r+0x108>)
 8007b00:	40ca      	lsrs	r2, r1
 8007b02:	07d6      	lsls	r6, r2, #31
 8007b04:	d528      	bpl.n	8007b58 <__sflush_r+0xb8>
 8007b06:	2200      	movs	r2, #0
 8007b08:	6062      	str	r2, [r4, #4]
 8007b0a:	04d9      	lsls	r1, r3, #19
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	6022      	str	r2, [r4, #0]
 8007b10:	d504      	bpl.n	8007b1c <__sflush_r+0x7c>
 8007b12:	1c42      	adds	r2, r0, #1
 8007b14:	d101      	bne.n	8007b1a <__sflush_r+0x7a>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	b903      	cbnz	r3, 8007b1c <__sflush_r+0x7c>
 8007b1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1e:	602f      	str	r7, [r5, #0]
 8007b20:	2900      	cmp	r1, #0
 8007b22:	d0ca      	beq.n	8007aba <__sflush_r+0x1a>
 8007b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b28:	4299      	cmp	r1, r3
 8007b2a:	d002      	beq.n	8007b32 <__sflush_r+0x92>
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f7ff fc29 	bl	8007384 <_free_r>
 8007b32:	2000      	movs	r0, #0
 8007b34:	6360      	str	r0, [r4, #52]	; 0x34
 8007b36:	e7c1      	b.n	8007abc <__sflush_r+0x1c>
 8007b38:	6a21      	ldr	r1, [r4, #32]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b0      	blx	r6
 8007b40:	1c41      	adds	r1, r0, #1
 8007b42:	d1c7      	bne.n	8007ad4 <__sflush_r+0x34>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0c4      	beq.n	8007ad4 <__sflush_r+0x34>
 8007b4a:	2b1d      	cmp	r3, #29
 8007b4c:	d001      	beq.n	8007b52 <__sflush_r+0xb2>
 8007b4e:	2b16      	cmp	r3, #22
 8007b50:	d101      	bne.n	8007b56 <__sflush_r+0xb6>
 8007b52:	602f      	str	r7, [r5, #0]
 8007b54:	e7b1      	b.n	8007aba <__sflush_r+0x1a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	e7ad      	b.n	8007abc <__sflush_r+0x1c>
 8007b60:	690f      	ldr	r7, [r1, #16]
 8007b62:	2f00      	cmp	r7, #0
 8007b64:	d0a9      	beq.n	8007aba <__sflush_r+0x1a>
 8007b66:	0793      	lsls	r3, r2, #30
 8007b68:	680e      	ldr	r6, [r1, #0]
 8007b6a:	bf08      	it	eq
 8007b6c:	694b      	ldreq	r3, [r1, #20]
 8007b6e:	600f      	str	r7, [r1, #0]
 8007b70:	bf18      	it	ne
 8007b72:	2300      	movne	r3, #0
 8007b74:	eba6 0807 	sub.w	r8, r6, r7
 8007b78:	608b      	str	r3, [r1, #8]
 8007b7a:	f1b8 0f00 	cmp.w	r8, #0
 8007b7e:	dd9c      	ble.n	8007aba <__sflush_r+0x1a>
 8007b80:	6a21      	ldr	r1, [r4, #32]
 8007b82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b84:	4643      	mov	r3, r8
 8007b86:	463a      	mov	r2, r7
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b0      	blx	r6
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	dc06      	bgt.n	8007b9e <__sflush_r+0xfe>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9c:	e78e      	b.n	8007abc <__sflush_r+0x1c>
 8007b9e:	4407      	add	r7, r0
 8007ba0:	eba8 0800 	sub.w	r8, r8, r0
 8007ba4:	e7e9      	b.n	8007b7a <__sflush_r+0xda>
 8007ba6:	bf00      	nop
 8007ba8:	20400001 	.word	0x20400001

08007bac <_fflush_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	690b      	ldr	r3, [r1, #16]
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	b913      	cbnz	r3, 8007bbc <_fflush_r+0x10>
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	b118      	cbz	r0, 8007bc6 <_fflush_r+0x1a>
 8007bbe:	6983      	ldr	r3, [r0, #24]
 8007bc0:	b90b      	cbnz	r3, 8007bc6 <_fflush_r+0x1a>
 8007bc2:	f7fe ff97 	bl	8006af4 <__sinit>
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <_fflush_r+0x6c>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	d11b      	bne.n	8007c04 <_fflush_r+0x58>
 8007bcc:	686c      	ldr	r4, [r5, #4]
 8007bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0ef      	beq.n	8007bb6 <_fflush_r+0xa>
 8007bd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bd8:	07d0      	lsls	r0, r2, #31
 8007bda:	d404      	bmi.n	8007be6 <_fflush_r+0x3a>
 8007bdc:	0599      	lsls	r1, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_fflush_r+0x3a>
 8007be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007be2:	f7ff f82a 	bl	8006c3a <__retarget_lock_acquire_recursive>
 8007be6:	4628      	mov	r0, r5
 8007be8:	4621      	mov	r1, r4
 8007bea:	f7ff ff59 	bl	8007aa0 <__sflush_r>
 8007bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bf0:	07da      	lsls	r2, r3, #31
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	d4e0      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	059b      	lsls	r3, r3, #22
 8007bfa:	d4dd      	bmi.n	8007bb8 <_fflush_r+0xc>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bfe:	f7ff f81d 	bl	8006c3c <__retarget_lock_release_recursive>
 8007c02:	e7d9      	b.n	8007bb8 <_fflush_r+0xc>
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <_fflush_r+0x70>)
 8007c06:	429c      	cmp	r4, r3
 8007c08:	d101      	bne.n	8007c0e <_fflush_r+0x62>
 8007c0a:	68ac      	ldr	r4, [r5, #8]
 8007c0c:	e7df      	b.n	8007bce <_fflush_r+0x22>
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <_fflush_r+0x74>)
 8007c10:	429c      	cmp	r4, r3
 8007c12:	bf08      	it	eq
 8007c14:	68ec      	ldreq	r4, [r5, #12]
 8007c16:	e7da      	b.n	8007bce <_fflush_r+0x22>
 8007c18:	08009754 	.word	0x08009754
 8007c1c:	08009774 	.word	0x08009774
 8007c20:	08009734 	.word	0x08009734

08007c24 <fiprintf>:
 8007c24:	b40e      	push	{r1, r2, r3}
 8007c26:	b503      	push	{r0, r1, lr}
 8007c28:	4601      	mov	r1, r0
 8007c2a:	ab03      	add	r3, sp, #12
 8007c2c:	4805      	ldr	r0, [pc, #20]	; (8007c44 <fiprintf+0x20>)
 8007c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c32:	6800      	ldr	r0, [r0, #0]
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	f7ff fcaf 	bl	8007598 <_vfiprintf_r>
 8007c3a:	b002      	add	sp, #8
 8007c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c40:	b003      	add	sp, #12
 8007c42:	4770      	bx	lr
 8007c44:	2000005c 	.word	0x2000005c

08007c48 <_lseek_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d07      	ldr	r5, [pc, #28]	; (8007c68 <_lseek_r+0x20>)
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4611      	mov	r1, r2
 8007c52:	2200      	movs	r2, #0
 8007c54:	602a      	str	r2, [r5, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f7fb fd87 	bl	800376a <_lseek>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_lseek_r+0x1e>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_lseek_r+0x1e>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	20000474 	.word	0x20000474

08007c6c <__swhatbuf_r>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	460e      	mov	r6, r1
 8007c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	b096      	sub	sp, #88	; 0x58
 8007c78:	4614      	mov	r4, r2
 8007c7a:	461d      	mov	r5, r3
 8007c7c:	da08      	bge.n	8007c90 <__swhatbuf_r+0x24>
 8007c7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	061a      	lsls	r2, r3, #24
 8007c88:	d410      	bmi.n	8007cac <__swhatbuf_r+0x40>
 8007c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c8e:	e00e      	b.n	8007cae <__swhatbuf_r+0x42>
 8007c90:	466a      	mov	r2, sp
 8007c92:	f000 f895 	bl	8007dc0 <_fstat_r>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	dbf1      	blt.n	8007c7e <__swhatbuf_r+0x12>
 8007c9a:	9a01      	ldr	r2, [sp, #4]
 8007c9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ca4:	425a      	negs	r2, r3
 8007ca6:	415a      	adcs	r2, r3
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	e7ee      	b.n	8007c8a <__swhatbuf_r+0x1e>
 8007cac:	2340      	movs	r3, #64	; 0x40
 8007cae:	2000      	movs	r0, #0
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	b016      	add	sp, #88	; 0x58
 8007cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007cb8 <__smakebuf_r>:
 8007cb8:	898b      	ldrh	r3, [r1, #12]
 8007cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cbc:	079d      	lsls	r5, r3, #30
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	d507      	bpl.n	8007cd4 <__smakebuf_r+0x1c>
 8007cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	6163      	str	r3, [r4, #20]
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	ab01      	add	r3, sp, #4
 8007cd6:	466a      	mov	r2, sp
 8007cd8:	f7ff ffc8 	bl	8007c6c <__swhatbuf_r>
 8007cdc:	9900      	ldr	r1, [sp, #0]
 8007cde:	4605      	mov	r5, r0
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff fbbb 	bl	800745c <_malloc_r>
 8007ce6:	b948      	cbnz	r0, 8007cfc <__smakebuf_r+0x44>
 8007ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cec:	059a      	lsls	r2, r3, #22
 8007cee:	d4ef      	bmi.n	8007cd0 <__smakebuf_r+0x18>
 8007cf0:	f023 0303 	bic.w	r3, r3, #3
 8007cf4:	f043 0302 	orr.w	r3, r3, #2
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	e7e3      	b.n	8007cc4 <__smakebuf_r+0xc>
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <__smakebuf_r+0x7c>)
 8007cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	6020      	str	r0, [r4, #0]
 8007d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	6163      	str	r3, [r4, #20]
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	6120      	str	r0, [r4, #16]
 8007d12:	b15b      	cbz	r3, 8007d2c <__smakebuf_r+0x74>
 8007d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f863 	bl	8007de4 <_isatty_r>
 8007d1e:	b128      	cbz	r0, 8007d2c <__smakebuf_r+0x74>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	89a0      	ldrh	r0, [r4, #12]
 8007d2e:	4305      	orrs	r5, r0
 8007d30:	81a5      	strh	r5, [r4, #12]
 8007d32:	e7cd      	b.n	8007cd0 <__smakebuf_r+0x18>
 8007d34:	08006a8d 	.word	0x08006a8d

08007d38 <__ascii_mbtowc>:
 8007d38:	b082      	sub	sp, #8
 8007d3a:	b901      	cbnz	r1, 8007d3e <__ascii_mbtowc+0x6>
 8007d3c:	a901      	add	r1, sp, #4
 8007d3e:	b142      	cbz	r2, 8007d52 <__ascii_mbtowc+0x1a>
 8007d40:	b14b      	cbz	r3, 8007d56 <__ascii_mbtowc+0x1e>
 8007d42:	7813      	ldrb	r3, [r2, #0]
 8007d44:	600b      	str	r3, [r1, #0]
 8007d46:	7812      	ldrb	r2, [r2, #0]
 8007d48:	1e10      	subs	r0, r2, #0
 8007d4a:	bf18      	it	ne
 8007d4c:	2001      	movne	r0, #1
 8007d4e:	b002      	add	sp, #8
 8007d50:	4770      	bx	lr
 8007d52:	4610      	mov	r0, r2
 8007d54:	e7fb      	b.n	8007d4e <__ascii_mbtowc+0x16>
 8007d56:	f06f 0001 	mvn.w	r0, #1
 8007d5a:	e7f8      	b.n	8007d4e <__ascii_mbtowc+0x16>

08007d5c <__malloc_lock>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__malloc_lock+0x8>)
 8007d5e:	f7fe bf6c 	b.w	8006c3a <__retarget_lock_acquire_recursive>
 8007d62:	bf00      	nop
 8007d64:	20000468 	.word	0x20000468

08007d68 <__malloc_unlock>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__malloc_unlock+0x8>)
 8007d6a:	f7fe bf67 	b.w	8006c3c <__retarget_lock_release_recursive>
 8007d6e:	bf00      	nop
 8007d70:	20000468 	.word	0x20000468

08007d74 <_read_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d07      	ldr	r5, [pc, #28]	; (8007d94 <_read_r+0x20>)
 8007d78:	4604      	mov	r4, r0
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	602a      	str	r2, [r5, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f7fb fcad 	bl	80036e2 <_read>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_read_r+0x1e>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_read_r+0x1e>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20000474 	.word	0x20000474

08007d98 <__ascii_wctomb>:
 8007d98:	b149      	cbz	r1, 8007dae <__ascii_wctomb+0x16>
 8007d9a:	2aff      	cmp	r2, #255	; 0xff
 8007d9c:	bf85      	ittet	hi
 8007d9e:	238a      	movhi	r3, #138	; 0x8a
 8007da0:	6003      	strhi	r3, [r0, #0]
 8007da2:	700a      	strbls	r2, [r1, #0]
 8007da4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007da8:	bf98      	it	ls
 8007daa:	2001      	movls	r0, #1
 8007dac:	4770      	bx	lr
 8007dae:	4608      	mov	r0, r1
 8007db0:	4770      	bx	lr

08007db2 <abort>:
 8007db2:	b508      	push	{r3, lr}
 8007db4:	2006      	movs	r0, #6
 8007db6:	f000 f84d 	bl	8007e54 <raise>
 8007dba:	2001      	movs	r0, #1
 8007dbc:	f7fb fc87 	bl	80036ce <_exit>

08007dc0 <_fstat_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	; (8007de0 <_fstat_r+0x20>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	f7fb fcb1 	bl	8003734 <_fstat>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d102      	bne.n	8007ddc <_fstat_r+0x1c>
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	b103      	cbz	r3, 8007ddc <_fstat_r+0x1c>
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
 8007dde:	bf00      	nop
 8007de0:	20000474 	.word	0x20000474

08007de4 <_isatty_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d06      	ldr	r5, [pc, #24]	; (8007e00 <_isatty_r+0x1c>)
 8007de8:	2300      	movs	r3, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	f7fb fcb0 	bl	8003754 <_isatty>
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	d102      	bne.n	8007dfe <_isatty_r+0x1a>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	b103      	cbz	r3, 8007dfe <_isatty_r+0x1a>
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	20000474 	.word	0x20000474

08007e04 <_raise_r>:
 8007e04:	291f      	cmp	r1, #31
 8007e06:	b538      	push	{r3, r4, r5, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	d904      	bls.n	8007e18 <_raise_r+0x14>
 8007e0e:	2316      	movs	r3, #22
 8007e10:	6003      	str	r3, [r0, #0]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e1a:	b112      	cbz	r2, 8007e22 <_raise_r+0x1e>
 8007e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e20:	b94b      	cbnz	r3, 8007e36 <_raise_r+0x32>
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f830 	bl	8007e88 <_getpid_r>
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e32:	f000 b817 	b.w	8007e64 <_kill_r>
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d00a      	beq.n	8007e50 <_raise_r+0x4c>
 8007e3a:	1c59      	adds	r1, r3, #1
 8007e3c:	d103      	bne.n	8007e46 <_raise_r+0x42>
 8007e3e:	2316      	movs	r3, #22
 8007e40:	6003      	str	r3, [r0, #0]
 8007e42:	2001      	movs	r0, #1
 8007e44:	e7e7      	b.n	8007e16 <_raise_r+0x12>
 8007e46:	2400      	movs	r4, #0
 8007e48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	4798      	blx	r3
 8007e50:	2000      	movs	r0, #0
 8007e52:	e7e0      	b.n	8007e16 <_raise_r+0x12>

08007e54 <raise>:
 8007e54:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <raise+0xc>)
 8007e56:	4601      	mov	r1, r0
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	f7ff bfd3 	b.w	8007e04 <_raise_r>
 8007e5e:	bf00      	nop
 8007e60:	2000005c 	.word	0x2000005c

08007e64 <_kill_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_kill_r+0x20>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7fb fc1c 	bl	80036ae <_kill>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_kill_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_kill_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20000474 	.word	0x20000474

08007e88 <_getpid_r>:
 8007e88:	f7fb bc09 	b.w	800369e <_getpid>
 8007e8c:	0000      	movs	r0, r0
	...

08007e90 <sin>:
 8007e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e92:	ec53 2b10 	vmov	r2, r3, d0
 8007e96:	4828      	ldr	r0, [pc, #160]	; (8007f38 <sin+0xa8>)
 8007e98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e9c:	4281      	cmp	r1, r0
 8007e9e:	dc07      	bgt.n	8007eb0 <sin+0x20>
 8007ea0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f30 <sin+0xa0>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	b005      	add	sp, #20
 8007ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eac:	f001 b994 	b.w	80091d8 <__kernel_sin>
 8007eb0:	4822      	ldr	r0, [pc, #136]	; (8007f3c <sin+0xac>)
 8007eb2:	4281      	cmp	r1, r0
 8007eb4:	dd09      	ble.n	8007eca <sin+0x3a>
 8007eb6:	ee10 0a10 	vmov	r0, s0
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f7f8 f9ec 	bl	8000298 <__aeabi_dsub>
 8007ec0:	ec41 0b10 	vmov	d0, r0, r1
 8007ec4:	b005      	add	sp, #20
 8007ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eca:	4668      	mov	r0, sp
 8007ecc:	f000 faac 	bl	8008428 <__ieee754_rem_pio2>
 8007ed0:	f000 0003 	and.w	r0, r0, #3
 8007ed4:	2801      	cmp	r0, #1
 8007ed6:	d00c      	beq.n	8007ef2 <sin+0x62>
 8007ed8:	2802      	cmp	r0, #2
 8007eda:	d011      	beq.n	8007f00 <sin+0x70>
 8007edc:	b9f0      	cbnz	r0, 8007f1c <sin+0x8c>
 8007ede:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ee2:	ed9d 0b00 	vldr	d0, [sp]
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	f001 f976 	bl	80091d8 <__kernel_sin>
 8007eec:	ec51 0b10 	vmov	r0, r1, d0
 8007ef0:	e7e6      	b.n	8007ec0 <sin+0x30>
 8007ef2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ef6:	ed9d 0b00 	vldr	d0, [sp]
 8007efa:	f000 fd55 	bl	80089a8 <__kernel_cos>
 8007efe:	e7f5      	b.n	8007eec <sin+0x5c>
 8007f00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f04:	ed9d 0b00 	vldr	d0, [sp]
 8007f08:	2001      	movs	r0, #1
 8007f0a:	f001 f965 	bl	80091d8 <__kernel_sin>
 8007f0e:	ec53 2b10 	vmov	r2, r3, d0
 8007f12:	ee10 0a10 	vmov	r0, s0
 8007f16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f1a:	e7d1      	b.n	8007ec0 <sin+0x30>
 8007f1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f20:	ed9d 0b00 	vldr	d0, [sp]
 8007f24:	f000 fd40 	bl	80089a8 <__kernel_cos>
 8007f28:	e7f1      	b.n	8007f0e <sin+0x7e>
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w
	...
 8007f38:	3fe921fb 	.word	0x3fe921fb
 8007f3c:	7fefffff 	.word	0x7fefffff

08007f40 <asin>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	ed2d 8b02 	vpush	{d8}
 8007f46:	ec55 4b10 	vmov	r4, r5, d0
 8007f4a:	f000 f859 	bl	8008000 <__ieee754_asin>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	eeb0 8a40 	vmov.f32	s16, s0
 8007f5a:	eef0 8a60 	vmov.f32	s17, s1
 8007f5e:	f7f8 fded 	bl	8000b3c <__aeabi_dcmpun>
 8007f62:	b9a8      	cbnz	r0, 8007f90 <asin+0x50>
 8007f64:	ec45 4b10 	vmov	d0, r4, r5
 8007f68:	f001 f9f4 	bl	8009354 <fabs>
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <asin+0x60>)
 8007f6e:	ec51 0b10 	vmov	r0, r1, d0
 8007f72:	2200      	movs	r2, #0
 8007f74:	f7f8 fdd8 	bl	8000b28 <__aeabi_dcmpgt>
 8007f78:	b150      	cbz	r0, 8007f90 <asin+0x50>
 8007f7a:	f7fd fa25 	bl	80053c8 <__errno>
 8007f7e:	ecbd 8b02 	vpop	{d8}
 8007f82:	2321      	movs	r3, #33	; 0x21
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8a:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <asin+0x64>)
 8007f8c:	f001 ba6c 	b.w	8009468 <nan>
 8007f90:	eeb0 0a48 	vmov.f32	s0, s16
 8007f94:	eef0 0a68 	vmov.f32	s1, s17
 8007f98:	ecbd 8b02 	vpop	{d8}
 8007f9c:	bd38      	pop	{r3, r4, r5, pc}
 8007f9e:	bf00      	nop
 8007fa0:	3ff00000 	.word	0x3ff00000
 8007fa4:	08009938 	.word	0x08009938

08007fa8 <sqrt>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	ed2d 8b02 	vpush	{d8}
 8007fae:	ec55 4b10 	vmov	r4, r5, d0
 8007fb2:	f000 fc45 	bl	8008840 <__ieee754_sqrt>
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	462b      	mov	r3, r5
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	eeb0 8a40 	vmov.f32	s16, s0
 8007fc2:	eef0 8a60 	vmov.f32	s17, s1
 8007fc6:	f7f8 fdb9 	bl	8000b3c <__aeabi_dcmpun>
 8007fca:	b990      	cbnz	r0, 8007ff2 <sqrt+0x4a>
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7f8 fd8a 	bl	8000aec <__aeabi_dcmplt>
 8007fd8:	b158      	cbz	r0, 8007ff2 <sqrt+0x4a>
 8007fda:	f7fd f9f5 	bl	80053c8 <__errno>
 8007fde:	2321      	movs	r3, #33	; 0x21
 8007fe0:	6003      	str	r3, [r0, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f7f8 fc37 	bl	800085c <__aeabi_ddiv>
 8007fee:	ec41 0b18 	vmov	d8, r0, r1
 8007ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ff6:	eef0 0a68 	vmov.f32	s1, s17
 8007ffa:	ecbd 8b02 	vpop	{d8}
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}

08008000 <__ieee754_asin>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	ed2d 8b04 	vpush	{d8-d9}
 8008008:	ec55 4b10 	vmov	r4, r5, d0
 800800c:	4bcc      	ldr	r3, [pc, #816]	; (8008340 <__ieee754_asin+0x340>)
 800800e:	b083      	sub	sp, #12
 8008010:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008014:	4598      	cmp	r8, r3
 8008016:	9501      	str	r5, [sp, #4]
 8008018:	dd35      	ble.n	8008086 <__ieee754_asin+0x86>
 800801a:	ee10 3a10 	vmov	r3, s0
 800801e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8008022:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8008026:	ea58 0303 	orrs.w	r3, r8, r3
 800802a:	d117      	bne.n	800805c <__ieee754_asin+0x5c>
 800802c:	a3aa      	add	r3, pc, #680	; (adr r3, 80082d8 <__ieee754_asin+0x2d8>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	ee10 0a10 	vmov	r0, s0
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 fae6 	bl	8000608 <__aeabi_dmul>
 800803c:	a3a8      	add	r3, pc, #672	; (adr r3, 80082e0 <__ieee754_asin+0x2e0>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f7f8 fadd 	bl	8000608 <__aeabi_dmul>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f921 	bl	800029c <__adddf3>
 800805a:	e00b      	b.n	8008074 <__ieee754_asin+0x74>
 800805c:	ee10 2a10 	vmov	r2, s0
 8008060:	462b      	mov	r3, r5
 8008062:	ee10 0a10 	vmov	r0, s0
 8008066:	4629      	mov	r1, r5
 8008068:	f7f8 f916 	bl	8000298 <__aeabi_dsub>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	f7f8 fbf4 	bl	800085c <__aeabi_ddiv>
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	ec45 4b10 	vmov	d0, r4, r5
 800807c:	b003      	add	sp, #12
 800807e:	ecbd 8b04 	vpop	{d8-d9}
 8008082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008086:	4baf      	ldr	r3, [pc, #700]	; (8008344 <__ieee754_asin+0x344>)
 8008088:	4598      	cmp	r8, r3
 800808a:	dc11      	bgt.n	80080b0 <__ieee754_asin+0xb0>
 800808c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008090:	f280 80ae 	bge.w	80081f0 <__ieee754_asin+0x1f0>
 8008094:	a394      	add	r3, pc, #592	; (adr r3, 80082e8 <__ieee754_asin+0x2e8>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	ee10 0a10 	vmov	r0, s0
 800809e:	4629      	mov	r1, r5
 80080a0:	f7f8 f8fc 	bl	800029c <__adddf3>
 80080a4:	4ba8      	ldr	r3, [pc, #672]	; (8008348 <__ieee754_asin+0x348>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	f7f8 fd3e 	bl	8000b28 <__aeabi_dcmpgt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d1e3      	bne.n	8008078 <__ieee754_asin+0x78>
 80080b0:	ec45 4b10 	vmov	d0, r4, r5
 80080b4:	f001 f94e 	bl	8009354 <fabs>
 80080b8:	49a3      	ldr	r1, [pc, #652]	; (8008348 <__ieee754_asin+0x348>)
 80080ba:	ec53 2b10 	vmov	r2, r3, d0
 80080be:	2000      	movs	r0, #0
 80080c0:	f7f8 f8ea 	bl	8000298 <__aeabi_dsub>
 80080c4:	4ba1      	ldr	r3, [pc, #644]	; (800834c <__ieee754_asin+0x34c>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	f7f8 fa9e 	bl	8000608 <__aeabi_dmul>
 80080cc:	a388      	add	r3, pc, #544	; (adr r3, 80082f0 <__ieee754_asin+0x2f0>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	4604      	mov	r4, r0
 80080d4:	460d      	mov	r5, r1
 80080d6:	f7f8 fa97 	bl	8000608 <__aeabi_dmul>
 80080da:	a387      	add	r3, pc, #540	; (adr r3, 80082f8 <__ieee754_asin+0x2f8>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 f8dc 	bl	800029c <__adddf3>
 80080e4:	4622      	mov	r2, r4
 80080e6:	462b      	mov	r3, r5
 80080e8:	f7f8 fa8e 	bl	8000608 <__aeabi_dmul>
 80080ec:	a384      	add	r3, pc, #528	; (adr r3, 8008300 <__ieee754_asin+0x300>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f7f8 f8d1 	bl	8000298 <__aeabi_dsub>
 80080f6:	4622      	mov	r2, r4
 80080f8:	462b      	mov	r3, r5
 80080fa:	f7f8 fa85 	bl	8000608 <__aeabi_dmul>
 80080fe:	a382      	add	r3, pc, #520	; (adr r3, 8008308 <__ieee754_asin+0x308>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f7f8 f8ca 	bl	800029c <__adddf3>
 8008108:	4622      	mov	r2, r4
 800810a:	462b      	mov	r3, r5
 800810c:	f7f8 fa7c 	bl	8000608 <__aeabi_dmul>
 8008110:	a37f      	add	r3, pc, #508	; (adr r3, 8008310 <__ieee754_asin+0x310>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	f7f8 f8bf 	bl	8000298 <__aeabi_dsub>
 800811a:	4622      	mov	r2, r4
 800811c:	462b      	mov	r3, r5
 800811e:	f7f8 fa73 	bl	8000608 <__aeabi_dmul>
 8008122:	a37d      	add	r3, pc, #500	; (adr r3, 8008318 <__ieee754_asin+0x318>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 f8b8 	bl	800029c <__adddf3>
 800812c:	4622      	mov	r2, r4
 800812e:	462b      	mov	r3, r5
 8008130:	f7f8 fa6a 	bl	8000608 <__aeabi_dmul>
 8008134:	a37a      	add	r3, pc, #488	; (adr r3, 8008320 <__ieee754_asin+0x320>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	ec41 0b18 	vmov	d8, r0, r1
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 fa61 	bl	8000608 <__aeabi_dmul>
 8008146:	a378      	add	r3, pc, #480	; (adr r3, 8008328 <__ieee754_asin+0x328>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 f8a4 	bl	8000298 <__aeabi_dsub>
 8008150:	4622      	mov	r2, r4
 8008152:	462b      	mov	r3, r5
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	a375      	add	r3, pc, #468	; (adr r3, 8008330 <__ieee754_asin+0x330>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f7f8 f89d 	bl	800029c <__adddf3>
 8008162:	4622      	mov	r2, r4
 8008164:	462b      	mov	r3, r5
 8008166:	f7f8 fa4f 	bl	8000608 <__aeabi_dmul>
 800816a:	a373      	add	r3, pc, #460	; (adr r3, 8008338 <__ieee754_asin+0x338>)
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f7f8 f892 	bl	8000298 <__aeabi_dsub>
 8008174:	4622      	mov	r2, r4
 8008176:	462b      	mov	r3, r5
 8008178:	f7f8 fa46 	bl	8000608 <__aeabi_dmul>
 800817c:	4b72      	ldr	r3, [pc, #456]	; (8008348 <__ieee754_asin+0x348>)
 800817e:	2200      	movs	r2, #0
 8008180:	f7f8 f88c 	bl	800029c <__adddf3>
 8008184:	ec45 4b10 	vmov	d0, r4, r5
 8008188:	4606      	mov	r6, r0
 800818a:	460f      	mov	r7, r1
 800818c:	f000 fb58 	bl	8008840 <__ieee754_sqrt>
 8008190:	4b6f      	ldr	r3, [pc, #444]	; (8008350 <__ieee754_asin+0x350>)
 8008192:	4598      	cmp	r8, r3
 8008194:	ec5b ab10 	vmov	sl, fp, d0
 8008198:	f340 80dc 	ble.w	8008354 <__ieee754_asin+0x354>
 800819c:	4632      	mov	r2, r6
 800819e:	463b      	mov	r3, r7
 80081a0:	ec51 0b18 	vmov	r0, r1, d8
 80081a4:	f7f8 fb5a 	bl	800085c <__aeabi_ddiv>
 80081a8:	4652      	mov	r2, sl
 80081aa:	465b      	mov	r3, fp
 80081ac:	f7f8 fa2c 	bl	8000608 <__aeabi_dmul>
 80081b0:	4652      	mov	r2, sl
 80081b2:	465b      	mov	r3, fp
 80081b4:	f7f8 f872 	bl	800029c <__adddf3>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	f7f8 f86e 	bl	800029c <__adddf3>
 80081c0:	a347      	add	r3, pc, #284	; (adr r3, 80082e0 <__ieee754_asin+0x2e0>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 f867 	bl	8000298 <__aeabi_dsub>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	a142      	add	r1, pc, #264	; (adr r1, 80082d8 <__ieee754_asin+0x2d8>)
 80081d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081d4:	f7f8 f860 	bl	8000298 <__aeabi_dsub>
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bfdc      	itt	le
 80081de:	4602      	movle	r2, r0
 80081e0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80081e4:	4604      	mov	r4, r0
 80081e6:	460d      	mov	r5, r1
 80081e8:	bfdc      	itt	le
 80081ea:	4614      	movle	r4, r2
 80081ec:	461d      	movle	r5, r3
 80081ee:	e743      	b.n	8008078 <__ieee754_asin+0x78>
 80081f0:	ee10 2a10 	vmov	r2, s0
 80081f4:	ee10 0a10 	vmov	r0, s0
 80081f8:	462b      	mov	r3, r5
 80081fa:	4629      	mov	r1, r5
 80081fc:	f7f8 fa04 	bl	8000608 <__aeabi_dmul>
 8008200:	a33b      	add	r3, pc, #236	; (adr r3, 80082f0 <__ieee754_asin+0x2f0>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	f7f8 f9fd 	bl	8000608 <__aeabi_dmul>
 800820e:	a33a      	add	r3, pc, #232	; (adr r3, 80082f8 <__ieee754_asin+0x2f8>)
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 f842 	bl	800029c <__adddf3>
 8008218:	4632      	mov	r2, r6
 800821a:	463b      	mov	r3, r7
 800821c:	f7f8 f9f4 	bl	8000608 <__aeabi_dmul>
 8008220:	a337      	add	r3, pc, #220	; (adr r3, 8008300 <__ieee754_asin+0x300>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f837 	bl	8000298 <__aeabi_dsub>
 800822a:	4632      	mov	r2, r6
 800822c:	463b      	mov	r3, r7
 800822e:	f7f8 f9eb 	bl	8000608 <__aeabi_dmul>
 8008232:	a335      	add	r3, pc, #212	; (adr r3, 8008308 <__ieee754_asin+0x308>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f7f8 f830 	bl	800029c <__adddf3>
 800823c:	4632      	mov	r2, r6
 800823e:	463b      	mov	r3, r7
 8008240:	f7f8 f9e2 	bl	8000608 <__aeabi_dmul>
 8008244:	a332      	add	r3, pc, #200	; (adr r3, 8008310 <__ieee754_asin+0x310>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f7f8 f825 	bl	8000298 <__aeabi_dsub>
 800824e:	4632      	mov	r2, r6
 8008250:	463b      	mov	r3, r7
 8008252:	f7f8 f9d9 	bl	8000608 <__aeabi_dmul>
 8008256:	a330      	add	r3, pc, #192	; (adr r3, 8008318 <__ieee754_asin+0x318>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f8 f81e 	bl	800029c <__adddf3>
 8008260:	4632      	mov	r2, r6
 8008262:	463b      	mov	r3, r7
 8008264:	f7f8 f9d0 	bl	8000608 <__aeabi_dmul>
 8008268:	a32d      	add	r3, pc, #180	; (adr r3, 8008320 <__ieee754_asin+0x320>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	4680      	mov	r8, r0
 8008270:	4689      	mov	r9, r1
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	f7f8 f9c7 	bl	8000608 <__aeabi_dmul>
 800827a:	a32b      	add	r3, pc, #172	; (adr r3, 8008328 <__ieee754_asin+0x328>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f8 f80a 	bl	8000298 <__aeabi_dsub>
 8008284:	4632      	mov	r2, r6
 8008286:	463b      	mov	r3, r7
 8008288:	f7f8 f9be 	bl	8000608 <__aeabi_dmul>
 800828c:	a328      	add	r3, pc, #160	; (adr r3, 8008330 <__ieee754_asin+0x330>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7f8 f803 	bl	800029c <__adddf3>
 8008296:	4632      	mov	r2, r6
 8008298:	463b      	mov	r3, r7
 800829a:	f7f8 f9b5 	bl	8000608 <__aeabi_dmul>
 800829e:	a326      	add	r3, pc, #152	; (adr r3, 8008338 <__ieee754_asin+0x338>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	f7f7 fff8 	bl	8000298 <__aeabi_dsub>
 80082a8:	4632      	mov	r2, r6
 80082aa:	463b      	mov	r3, r7
 80082ac:	f7f8 f9ac 	bl	8000608 <__aeabi_dmul>
 80082b0:	4b25      	ldr	r3, [pc, #148]	; (8008348 <__ieee754_asin+0x348>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	f7f7 fff2 	bl	800029c <__adddf3>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4640      	mov	r0, r8
 80082be:	4649      	mov	r1, r9
 80082c0:	f7f8 facc 	bl	800085c <__aeabi_ddiv>
 80082c4:	4622      	mov	r2, r4
 80082c6:	462b      	mov	r3, r5
 80082c8:	f7f8 f99e 	bl	8000608 <__aeabi_dmul>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4620      	mov	r0, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	e6bf      	b.n	8008056 <__ieee754_asin+0x56>
 80082d6:	bf00      	nop
 80082d8:	54442d18 	.word	0x54442d18
 80082dc:	3ff921fb 	.word	0x3ff921fb
 80082e0:	33145c07 	.word	0x33145c07
 80082e4:	3c91a626 	.word	0x3c91a626
 80082e8:	8800759c 	.word	0x8800759c
 80082ec:	7e37e43c 	.word	0x7e37e43c
 80082f0:	0dfdf709 	.word	0x0dfdf709
 80082f4:	3f023de1 	.word	0x3f023de1
 80082f8:	7501b288 	.word	0x7501b288
 80082fc:	3f49efe0 	.word	0x3f49efe0
 8008300:	b5688f3b 	.word	0xb5688f3b
 8008304:	3fa48228 	.word	0x3fa48228
 8008308:	0e884455 	.word	0x0e884455
 800830c:	3fc9c155 	.word	0x3fc9c155
 8008310:	03eb6f7d 	.word	0x03eb6f7d
 8008314:	3fd4d612 	.word	0x3fd4d612
 8008318:	55555555 	.word	0x55555555
 800831c:	3fc55555 	.word	0x3fc55555
 8008320:	b12e9282 	.word	0xb12e9282
 8008324:	3fb3b8c5 	.word	0x3fb3b8c5
 8008328:	1b8d0159 	.word	0x1b8d0159
 800832c:	3fe6066c 	.word	0x3fe6066c
 8008330:	9c598ac8 	.word	0x9c598ac8
 8008334:	40002ae5 	.word	0x40002ae5
 8008338:	1c8a2d4b 	.word	0x1c8a2d4b
 800833c:	40033a27 	.word	0x40033a27
 8008340:	3fefffff 	.word	0x3fefffff
 8008344:	3fdfffff 	.word	0x3fdfffff
 8008348:	3ff00000 	.word	0x3ff00000
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	3fef3332 	.word	0x3fef3332
 8008354:	ee10 2a10 	vmov	r2, s0
 8008358:	ee10 0a10 	vmov	r0, s0
 800835c:	465b      	mov	r3, fp
 800835e:	4659      	mov	r1, fp
 8008360:	f7f7 ff9c 	bl	800029c <__adddf3>
 8008364:	4632      	mov	r2, r6
 8008366:	463b      	mov	r3, r7
 8008368:	ec41 0b19 	vmov	d9, r0, r1
 800836c:	ec51 0b18 	vmov	r0, r1, d8
 8008370:	f7f8 fa74 	bl	800085c <__aeabi_ddiv>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	ec51 0b19 	vmov	r0, r1, d9
 800837c:	f7f8 f944 	bl	8000608 <__aeabi_dmul>
 8008380:	f04f 0800 	mov.w	r8, #0
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
 8008388:	4642      	mov	r2, r8
 800838a:	465b      	mov	r3, fp
 800838c:	4640      	mov	r0, r8
 800838e:	4659      	mov	r1, fp
 8008390:	f7f8 f93a 	bl	8000608 <__aeabi_dmul>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4620      	mov	r0, r4
 800839a:	4629      	mov	r1, r5
 800839c:	f7f7 ff7c 	bl	8000298 <__aeabi_dsub>
 80083a0:	4642      	mov	r2, r8
 80083a2:	4604      	mov	r4, r0
 80083a4:	460d      	mov	r5, r1
 80083a6:	465b      	mov	r3, fp
 80083a8:	4650      	mov	r0, sl
 80083aa:	4659      	mov	r1, fp
 80083ac:	f7f7 ff76 	bl	800029c <__adddf3>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7f8 fa50 	bl	800085c <__aeabi_ddiv>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	f7f7 ff6c 	bl	800029c <__adddf3>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	a113      	add	r1, pc, #76	; (adr r1, 8008418 <__ieee754_asin+0x418>)
 80083ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ce:	f7f7 ff63 	bl	8000298 <__aeabi_dsub>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	f7f7 ff5d 	bl	8000298 <__aeabi_dsub>
 80083de:	4642      	mov	r2, r8
 80083e0:	4604      	mov	r4, r0
 80083e2:	460d      	mov	r5, r1
 80083e4:	465b      	mov	r3, fp
 80083e6:	4640      	mov	r0, r8
 80083e8:	4659      	mov	r1, fp
 80083ea:	f7f7 ff57 	bl	800029c <__adddf3>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	a10b      	add	r1, pc, #44	; (adr r1, 8008420 <__ieee754_asin+0x420>)
 80083f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f8:	f7f7 ff4e 	bl	8000298 <__aeabi_dsub>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4620      	mov	r0, r4
 8008402:	4629      	mov	r1, r5
 8008404:	f7f7 ff48 	bl	8000298 <__aeabi_dsub>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	a104      	add	r1, pc, #16	; (adr r1, 8008420 <__ieee754_asin+0x420>)
 800840e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008412:	e6df      	b.n	80081d4 <__ieee754_asin+0x1d4>
 8008414:	f3af 8000 	nop.w
 8008418:	33145c07 	.word	0x33145c07
 800841c:	3c91a626 	.word	0x3c91a626
 8008420:	54442d18 	.word	0x54442d18
 8008424:	3fe921fb 	.word	0x3fe921fb

08008428 <__ieee754_rem_pio2>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	ed2d 8b02 	vpush	{d8}
 8008430:	ec55 4b10 	vmov	r4, r5, d0
 8008434:	4bca      	ldr	r3, [pc, #808]	; (8008760 <__ieee754_rem_pio2+0x338>)
 8008436:	b08b      	sub	sp, #44	; 0x2c
 8008438:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800843c:	4598      	cmp	r8, r3
 800843e:	4682      	mov	sl, r0
 8008440:	9502      	str	r5, [sp, #8]
 8008442:	dc08      	bgt.n	8008456 <__ieee754_rem_pio2+0x2e>
 8008444:	2200      	movs	r2, #0
 8008446:	2300      	movs	r3, #0
 8008448:	ed80 0b00 	vstr	d0, [r0]
 800844c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008450:	f04f 0b00 	mov.w	fp, #0
 8008454:	e028      	b.n	80084a8 <__ieee754_rem_pio2+0x80>
 8008456:	4bc3      	ldr	r3, [pc, #780]	; (8008764 <__ieee754_rem_pio2+0x33c>)
 8008458:	4598      	cmp	r8, r3
 800845a:	dc78      	bgt.n	800854e <__ieee754_rem_pio2+0x126>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	4ec2      	ldr	r6, [pc, #776]	; (8008768 <__ieee754_rem_pio2+0x340>)
 8008460:	2b00      	cmp	r3, #0
 8008462:	ee10 0a10 	vmov	r0, s0
 8008466:	a3b0      	add	r3, pc, #704	; (adr r3, 8008728 <__ieee754_rem_pio2+0x300>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	4629      	mov	r1, r5
 800846e:	dd39      	ble.n	80084e4 <__ieee754_rem_pio2+0xbc>
 8008470:	f7f7 ff12 	bl	8000298 <__aeabi_dsub>
 8008474:	45b0      	cmp	r8, r6
 8008476:	4604      	mov	r4, r0
 8008478:	460d      	mov	r5, r1
 800847a:	d01b      	beq.n	80084b4 <__ieee754_rem_pio2+0x8c>
 800847c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008730 <__ieee754_rem_pio2+0x308>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 ff09 	bl	8000298 <__aeabi_dsub>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	e9ca 2300 	strd	r2, r3, [sl]
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f7 ff01 	bl	8000298 <__aeabi_dsub>
 8008496:	a3a6      	add	r3, pc, #664	; (adr r3, 8008730 <__ieee754_rem_pio2+0x308>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f7 fefc 	bl	8000298 <__aeabi_dsub>
 80084a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084a4:	f04f 0b01 	mov.w	fp, #1
 80084a8:	4658      	mov	r0, fp
 80084aa:	b00b      	add	sp, #44	; 0x2c
 80084ac:	ecbd 8b02 	vpop	{d8}
 80084b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008738 <__ieee754_rem_pio2+0x310>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	f7f7 feed 	bl	8000298 <__aeabi_dsub>
 80084be:	a3a0      	add	r3, pc, #640	; (adr r3, 8008740 <__ieee754_rem_pio2+0x318>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	4604      	mov	r4, r0
 80084c6:	460d      	mov	r5, r1
 80084c8:	f7f7 fee6 	bl	8000298 <__aeabi_dsub>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	e9ca 2300 	strd	r2, r3, [sl]
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f7 fede 	bl	8000298 <__aeabi_dsub>
 80084dc:	a398      	add	r3, pc, #608	; (adr r3, 8008740 <__ieee754_rem_pio2+0x318>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	e7db      	b.n	800849c <__ieee754_rem_pio2+0x74>
 80084e4:	f7f7 feda 	bl	800029c <__adddf3>
 80084e8:	45b0      	cmp	r8, r6
 80084ea:	4604      	mov	r4, r0
 80084ec:	460d      	mov	r5, r1
 80084ee:	d016      	beq.n	800851e <__ieee754_rem_pio2+0xf6>
 80084f0:	a38f      	add	r3, pc, #572	; (adr r3, 8008730 <__ieee754_rem_pio2+0x308>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fed1 	bl	800029c <__adddf3>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	e9ca 2300 	strd	r2, r3, [sl]
 8008502:	4620      	mov	r0, r4
 8008504:	4629      	mov	r1, r5
 8008506:	f7f7 fec7 	bl	8000298 <__aeabi_dsub>
 800850a:	a389      	add	r3, pc, #548	; (adr r3, 8008730 <__ieee754_rem_pio2+0x308>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f7f7 fec4 	bl	800029c <__adddf3>
 8008514:	f04f 3bff 	mov.w	fp, #4294967295
 8008518:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800851c:	e7c4      	b.n	80084a8 <__ieee754_rem_pio2+0x80>
 800851e:	a386      	add	r3, pc, #536	; (adr r3, 8008738 <__ieee754_rem_pio2+0x310>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f7 feba 	bl	800029c <__adddf3>
 8008528:	a385      	add	r3, pc, #532	; (adr r3, 8008740 <__ieee754_rem_pio2+0x318>)
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	4604      	mov	r4, r0
 8008530:	460d      	mov	r5, r1
 8008532:	f7f7 feb3 	bl	800029c <__adddf3>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9ca 2300 	strd	r2, r3, [sl]
 800853e:	4620      	mov	r0, r4
 8008540:	4629      	mov	r1, r5
 8008542:	f7f7 fea9 	bl	8000298 <__aeabi_dsub>
 8008546:	a37e      	add	r3, pc, #504	; (adr r3, 8008740 <__ieee754_rem_pio2+0x318>)
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	e7e0      	b.n	8008510 <__ieee754_rem_pio2+0xe8>
 800854e:	4b87      	ldr	r3, [pc, #540]	; (800876c <__ieee754_rem_pio2+0x344>)
 8008550:	4598      	cmp	r8, r3
 8008552:	f300 80d9 	bgt.w	8008708 <__ieee754_rem_pio2+0x2e0>
 8008556:	f000 fefd 	bl	8009354 <fabs>
 800855a:	ec55 4b10 	vmov	r4, r5, d0
 800855e:	ee10 0a10 	vmov	r0, s0
 8008562:	a379      	add	r3, pc, #484	; (adr r3, 8008748 <__ieee754_rem_pio2+0x320>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	4629      	mov	r1, r5
 800856a:	f7f8 f84d 	bl	8000608 <__aeabi_dmul>
 800856e:	4b80      	ldr	r3, [pc, #512]	; (8008770 <__ieee754_rem_pio2+0x348>)
 8008570:	2200      	movs	r2, #0
 8008572:	f7f7 fe93 	bl	800029c <__adddf3>
 8008576:	f7f8 faf7 	bl	8000b68 <__aeabi_d2iz>
 800857a:	4683      	mov	fp, r0
 800857c:	f7f7 ffda 	bl	8000534 <__aeabi_i2d>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	ec43 2b18 	vmov	d8, r2, r3
 8008588:	a367      	add	r3, pc, #412	; (adr r3, 8008728 <__ieee754_rem_pio2+0x300>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f8 f83b 	bl	8000608 <__aeabi_dmul>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f7 fe7d 	bl	8000298 <__aeabi_dsub>
 800859e:	a364      	add	r3, pc, #400	; (adr r3, 8008730 <__ieee754_rem_pio2+0x308>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	4606      	mov	r6, r0
 80085a6:	460f      	mov	r7, r1
 80085a8:	ec51 0b18 	vmov	r0, r1, d8
 80085ac:	f7f8 f82c 	bl	8000608 <__aeabi_dmul>
 80085b0:	f1bb 0f1f 	cmp.w	fp, #31
 80085b4:	4604      	mov	r4, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	dc0d      	bgt.n	80085d6 <__ieee754_rem_pio2+0x1ae>
 80085ba:	4b6e      	ldr	r3, [pc, #440]	; (8008774 <__ieee754_rem_pio2+0x34c>)
 80085bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	4543      	cmp	r3, r8
 80085c6:	d006      	beq.n	80085d6 <__ieee754_rem_pio2+0x1ae>
 80085c8:	4622      	mov	r2, r4
 80085ca:	462b      	mov	r3, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f7 fe62 	bl	8000298 <__aeabi_dsub>
 80085d4:	e00f      	b.n	80085f6 <__ieee754_rem_pio2+0x1ce>
 80085d6:	462b      	mov	r3, r5
 80085d8:	4622      	mov	r2, r4
 80085da:	4630      	mov	r0, r6
 80085dc:	4639      	mov	r1, r7
 80085de:	f7f7 fe5b 	bl	8000298 <__aeabi_dsub>
 80085e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80085e6:	9303      	str	r3, [sp, #12]
 80085e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80085f0:	f1b8 0f10 	cmp.w	r8, #16
 80085f4:	dc02      	bgt.n	80085fc <__ieee754_rem_pio2+0x1d4>
 80085f6:	e9ca 0100 	strd	r0, r1, [sl]
 80085fa:	e039      	b.n	8008670 <__ieee754_rem_pio2+0x248>
 80085fc:	a34e      	add	r3, pc, #312	; (adr r3, 8008738 <__ieee754_rem_pio2+0x310>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	ec51 0b18 	vmov	r0, r1, d8
 8008606:	f7f7 ffff 	bl	8000608 <__aeabi_dmul>
 800860a:	4604      	mov	r4, r0
 800860c:	460d      	mov	r5, r1
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4630      	mov	r0, r6
 8008614:	4639      	mov	r1, r7
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4680      	mov	r8, r0
 8008620:	4689      	mov	r9, r1
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f7 fe37 	bl	8000298 <__aeabi_dsub>
 800862a:	4622      	mov	r2, r4
 800862c:	462b      	mov	r3, r5
 800862e:	f7f7 fe33 	bl	8000298 <__aeabi_dsub>
 8008632:	a343      	add	r3, pc, #268	; (adr r3, 8008740 <__ieee754_rem_pio2+0x318>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	4604      	mov	r4, r0
 800863a:	460d      	mov	r5, r1
 800863c:	ec51 0b18 	vmov	r0, r1, d8
 8008640:	f7f7 ffe2 	bl	8000608 <__aeabi_dmul>
 8008644:	4622      	mov	r2, r4
 8008646:	462b      	mov	r3, r5
 8008648:	f7f7 fe26 	bl	8000298 <__aeabi_dsub>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	4640      	mov	r0, r8
 8008656:	4649      	mov	r1, r9
 8008658:	f7f7 fe1e 	bl	8000298 <__aeabi_dsub>
 800865c:	9a03      	ldr	r2, [sp, #12]
 800865e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b31      	cmp	r3, #49	; 0x31
 8008666:	dc24      	bgt.n	80086b2 <__ieee754_rem_pio2+0x28a>
 8008668:	e9ca 0100 	strd	r0, r1, [sl]
 800866c:	4646      	mov	r6, r8
 800866e:	464f      	mov	r7, r9
 8008670:	e9da 8900 	ldrd	r8, r9, [sl]
 8008674:	4630      	mov	r0, r6
 8008676:	4642      	mov	r2, r8
 8008678:	464b      	mov	r3, r9
 800867a:	4639      	mov	r1, r7
 800867c:	f7f7 fe0c 	bl	8000298 <__aeabi_dsub>
 8008680:	462b      	mov	r3, r5
 8008682:	4622      	mov	r2, r4
 8008684:	f7f7 fe08 	bl	8000298 <__aeabi_dsub>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008690:	f6bf af0a 	bge.w	80084a8 <__ieee754_rem_pio2+0x80>
 8008694:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008698:	f8ca 3004 	str.w	r3, [sl, #4]
 800869c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086a0:	f8ca 8000 	str.w	r8, [sl]
 80086a4:	f8ca 0008 	str.w	r0, [sl, #8]
 80086a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80086ac:	f1cb 0b00 	rsb	fp, fp, #0
 80086b0:	e6fa      	b.n	80084a8 <__ieee754_rem_pio2+0x80>
 80086b2:	a327      	add	r3, pc, #156	; (adr r3, 8008750 <__ieee754_rem_pio2+0x328>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	ec51 0b18 	vmov	r0, r1, d8
 80086bc:	f7f7 ffa4 	bl	8000608 <__aeabi_dmul>
 80086c0:	4604      	mov	r4, r0
 80086c2:	460d      	mov	r5, r1
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f7 fde4 	bl	8000298 <__aeabi_dsub>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4606      	mov	r6, r0
 80086d6:	460f      	mov	r7, r1
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f7 fddc 	bl	8000298 <__aeabi_dsub>
 80086e0:	4622      	mov	r2, r4
 80086e2:	462b      	mov	r3, r5
 80086e4:	f7f7 fdd8 	bl	8000298 <__aeabi_dsub>
 80086e8:	a31b      	add	r3, pc, #108	; (adr r3, 8008758 <__ieee754_rem_pio2+0x330>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	4604      	mov	r4, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	ec51 0b18 	vmov	r0, r1, d8
 80086f6:	f7f7 ff87 	bl	8000608 <__aeabi_dmul>
 80086fa:	4622      	mov	r2, r4
 80086fc:	462b      	mov	r3, r5
 80086fe:	f7f7 fdcb 	bl	8000298 <__aeabi_dsub>
 8008702:	4604      	mov	r4, r0
 8008704:	460d      	mov	r5, r1
 8008706:	e75f      	b.n	80085c8 <__ieee754_rem_pio2+0x1a0>
 8008708:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <__ieee754_rem_pio2+0x350>)
 800870a:	4598      	cmp	r8, r3
 800870c:	dd36      	ble.n	800877c <__ieee754_rem_pio2+0x354>
 800870e:	ee10 2a10 	vmov	r2, s0
 8008712:	462b      	mov	r3, r5
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 fdbe 	bl	8000298 <__aeabi_dsub>
 800871c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008720:	e9ca 0100 	strd	r0, r1, [sl]
 8008724:	e694      	b.n	8008450 <__ieee754_rem_pio2+0x28>
 8008726:	bf00      	nop
 8008728:	54400000 	.word	0x54400000
 800872c:	3ff921fb 	.word	0x3ff921fb
 8008730:	1a626331 	.word	0x1a626331
 8008734:	3dd0b461 	.word	0x3dd0b461
 8008738:	1a600000 	.word	0x1a600000
 800873c:	3dd0b461 	.word	0x3dd0b461
 8008740:	2e037073 	.word	0x2e037073
 8008744:	3ba3198a 	.word	0x3ba3198a
 8008748:	6dc9c883 	.word	0x6dc9c883
 800874c:	3fe45f30 	.word	0x3fe45f30
 8008750:	2e000000 	.word	0x2e000000
 8008754:	3ba3198a 	.word	0x3ba3198a
 8008758:	252049c1 	.word	0x252049c1
 800875c:	397b839a 	.word	0x397b839a
 8008760:	3fe921fb 	.word	0x3fe921fb
 8008764:	4002d97b 	.word	0x4002d97b
 8008768:	3ff921fb 	.word	0x3ff921fb
 800876c:	413921fb 	.word	0x413921fb
 8008770:	3fe00000 	.word	0x3fe00000
 8008774:	08009a44 	.word	0x08009a44
 8008778:	7fefffff 	.word	0x7fefffff
 800877c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008780:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008784:	ee10 0a10 	vmov	r0, s0
 8008788:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800878c:	ee10 6a10 	vmov	r6, s0
 8008790:	460f      	mov	r7, r1
 8008792:	f7f8 f9e9 	bl	8000b68 <__aeabi_d2iz>
 8008796:	f7f7 fecd 	bl	8000534 <__aeabi_i2d>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087a6:	f7f7 fd77 	bl	8000298 <__aeabi_dsub>
 80087aa:	4b23      	ldr	r3, [pc, #140]	; (8008838 <__ieee754_rem_pio2+0x410>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	f7f7 ff2b 	bl	8000608 <__aeabi_dmul>
 80087b2:	460f      	mov	r7, r1
 80087b4:	4606      	mov	r6, r0
 80087b6:	f7f8 f9d7 	bl	8000b68 <__aeabi_d2iz>
 80087ba:	f7f7 febb 	bl	8000534 <__aeabi_i2d>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087ca:	f7f7 fd65 	bl	8000298 <__aeabi_dsub>
 80087ce:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <__ieee754_rem_pio2+0x410>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	f7f7 ff19 	bl	8000608 <__aeabi_dmul>
 80087d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087da:	ad04      	add	r5, sp, #16
 80087dc:	f04f 0803 	mov.w	r8, #3
 80087e0:	46a9      	mov	r9, r5
 80087e2:	2600      	movs	r6, #0
 80087e4:	2700      	movs	r7, #0
 80087e6:	4632      	mov	r2, r6
 80087e8:	463b      	mov	r3, r7
 80087ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80087ee:	46c3      	mov	fp, r8
 80087f0:	3d08      	subs	r5, #8
 80087f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80087f6:	f7f8 f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d1f3      	bne.n	80087e6 <__ieee754_rem_pio2+0x3be>
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <__ieee754_rem_pio2+0x414>)
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	2302      	movs	r3, #2
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4622      	mov	r2, r4
 8008808:	465b      	mov	r3, fp
 800880a:	4651      	mov	r1, sl
 800880c:	4648      	mov	r0, r9
 800880e:	f000 f993 	bl	8008b38 <__kernel_rem_pio2>
 8008812:	9b02      	ldr	r3, [sp, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	4683      	mov	fp, r0
 8008818:	f6bf ae46 	bge.w	80084a8 <__ieee754_rem_pio2+0x80>
 800881c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008820:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008824:	e9ca 2300 	strd	r2, r3, [sl]
 8008828:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800882c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008830:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008834:	e73a      	b.n	80086ac <__ieee754_rem_pio2+0x284>
 8008836:	bf00      	nop
 8008838:	41700000 	.word	0x41700000
 800883c:	08009ac4 	.word	0x08009ac4

08008840 <__ieee754_sqrt>:
 8008840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008844:	ec55 4b10 	vmov	r4, r5, d0
 8008848:	4e55      	ldr	r6, [pc, #340]	; (80089a0 <__ieee754_sqrt+0x160>)
 800884a:	43ae      	bics	r6, r5
 800884c:	ee10 0a10 	vmov	r0, s0
 8008850:	ee10 3a10 	vmov	r3, s0
 8008854:	462a      	mov	r2, r5
 8008856:	4629      	mov	r1, r5
 8008858:	d110      	bne.n	800887c <__ieee754_sqrt+0x3c>
 800885a:	ee10 2a10 	vmov	r2, s0
 800885e:	462b      	mov	r3, r5
 8008860:	f7f7 fed2 	bl	8000608 <__aeabi_dmul>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f7 fd16 	bl	800029c <__adddf3>
 8008870:	4604      	mov	r4, r0
 8008872:	460d      	mov	r5, r1
 8008874:	ec45 4b10 	vmov	d0, r4, r5
 8008878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800887c:	2d00      	cmp	r5, #0
 800887e:	dc10      	bgt.n	80088a2 <__ieee754_sqrt+0x62>
 8008880:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008884:	4330      	orrs	r0, r6
 8008886:	d0f5      	beq.n	8008874 <__ieee754_sqrt+0x34>
 8008888:	b15d      	cbz	r5, 80088a2 <__ieee754_sqrt+0x62>
 800888a:	ee10 2a10 	vmov	r2, s0
 800888e:	462b      	mov	r3, r5
 8008890:	ee10 0a10 	vmov	r0, s0
 8008894:	f7f7 fd00 	bl	8000298 <__aeabi_dsub>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	f7f7 ffde 	bl	800085c <__aeabi_ddiv>
 80088a0:	e7e6      	b.n	8008870 <__ieee754_sqrt+0x30>
 80088a2:	1512      	asrs	r2, r2, #20
 80088a4:	d074      	beq.n	8008990 <__ieee754_sqrt+0x150>
 80088a6:	07d4      	lsls	r4, r2, #31
 80088a8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80088ac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80088b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80088b4:	bf5e      	ittt	pl
 80088b6:	0fda      	lsrpl	r2, r3, #31
 80088b8:	005b      	lslpl	r3, r3, #1
 80088ba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80088be:	2400      	movs	r4, #0
 80088c0:	0fda      	lsrs	r2, r3, #31
 80088c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80088c6:	107f      	asrs	r7, r7, #1
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	2516      	movs	r5, #22
 80088cc:	4620      	mov	r0, r4
 80088ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80088d2:	1886      	adds	r6, r0, r2
 80088d4:	428e      	cmp	r6, r1
 80088d6:	bfde      	ittt	le
 80088d8:	1b89      	suble	r1, r1, r6
 80088da:	18b0      	addle	r0, r6, r2
 80088dc:	18a4      	addle	r4, r4, r2
 80088de:	0049      	lsls	r1, r1, #1
 80088e0:	3d01      	subs	r5, #1
 80088e2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80088e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80088ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80088ee:	d1f0      	bne.n	80088d2 <__ieee754_sqrt+0x92>
 80088f0:	462a      	mov	r2, r5
 80088f2:	f04f 0e20 	mov.w	lr, #32
 80088f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80088fa:	4281      	cmp	r1, r0
 80088fc:	eb06 0c05 	add.w	ip, r6, r5
 8008900:	dc02      	bgt.n	8008908 <__ieee754_sqrt+0xc8>
 8008902:	d113      	bne.n	800892c <__ieee754_sqrt+0xec>
 8008904:	459c      	cmp	ip, r3
 8008906:	d811      	bhi.n	800892c <__ieee754_sqrt+0xec>
 8008908:	f1bc 0f00 	cmp.w	ip, #0
 800890c:	eb0c 0506 	add.w	r5, ip, r6
 8008910:	da43      	bge.n	800899a <__ieee754_sqrt+0x15a>
 8008912:	2d00      	cmp	r5, #0
 8008914:	db41      	blt.n	800899a <__ieee754_sqrt+0x15a>
 8008916:	f100 0801 	add.w	r8, r0, #1
 800891a:	1a09      	subs	r1, r1, r0
 800891c:	459c      	cmp	ip, r3
 800891e:	bf88      	it	hi
 8008920:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008924:	eba3 030c 	sub.w	r3, r3, ip
 8008928:	4432      	add	r2, r6
 800892a:	4640      	mov	r0, r8
 800892c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008930:	f1be 0e01 	subs.w	lr, lr, #1
 8008934:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008938:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800893c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008940:	d1db      	bne.n	80088fa <__ieee754_sqrt+0xba>
 8008942:	430b      	orrs	r3, r1
 8008944:	d006      	beq.n	8008954 <__ieee754_sqrt+0x114>
 8008946:	1c50      	adds	r0, r2, #1
 8008948:	bf13      	iteet	ne
 800894a:	3201      	addne	r2, #1
 800894c:	3401      	addeq	r4, #1
 800894e:	4672      	moveq	r2, lr
 8008950:	f022 0201 	bicne.w	r2, r2, #1
 8008954:	1063      	asrs	r3, r4, #1
 8008956:	0852      	lsrs	r2, r2, #1
 8008958:	07e1      	lsls	r1, r4, #31
 800895a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800895e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008962:	bf48      	it	mi
 8008964:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008968:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800896c:	4614      	mov	r4, r2
 800896e:	e781      	b.n	8008874 <__ieee754_sqrt+0x34>
 8008970:	0ad9      	lsrs	r1, r3, #11
 8008972:	3815      	subs	r0, #21
 8008974:	055b      	lsls	r3, r3, #21
 8008976:	2900      	cmp	r1, #0
 8008978:	d0fa      	beq.n	8008970 <__ieee754_sqrt+0x130>
 800897a:	02cd      	lsls	r5, r1, #11
 800897c:	d50a      	bpl.n	8008994 <__ieee754_sqrt+0x154>
 800897e:	f1c2 0420 	rsb	r4, r2, #32
 8008982:	fa23 f404 	lsr.w	r4, r3, r4
 8008986:	1e55      	subs	r5, r2, #1
 8008988:	4093      	lsls	r3, r2
 800898a:	4321      	orrs	r1, r4
 800898c:	1b42      	subs	r2, r0, r5
 800898e:	e78a      	b.n	80088a6 <__ieee754_sqrt+0x66>
 8008990:	4610      	mov	r0, r2
 8008992:	e7f0      	b.n	8008976 <__ieee754_sqrt+0x136>
 8008994:	0049      	lsls	r1, r1, #1
 8008996:	3201      	adds	r2, #1
 8008998:	e7ef      	b.n	800897a <__ieee754_sqrt+0x13a>
 800899a:	4680      	mov	r8, r0
 800899c:	e7bd      	b.n	800891a <__ieee754_sqrt+0xda>
 800899e:	bf00      	nop
 80089a0:	7ff00000 	.word	0x7ff00000
 80089a4:	00000000 	.word	0x00000000

080089a8 <__kernel_cos>:
 80089a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	ec57 6b10 	vmov	r6, r7, d0
 80089b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80089b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80089b8:	ed8d 1b00 	vstr	d1, [sp]
 80089bc:	da07      	bge.n	80089ce <__kernel_cos+0x26>
 80089be:	ee10 0a10 	vmov	r0, s0
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f8d0 	bl	8000b68 <__aeabi_d2iz>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f000 8088 	beq.w	8008ade <__kernel_cos+0x136>
 80089ce:	4632      	mov	r2, r6
 80089d0:	463b      	mov	r3, r7
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f7f7 fe17 	bl	8000608 <__aeabi_dmul>
 80089da:	4b51      	ldr	r3, [pc, #324]	; (8008b20 <__kernel_cos+0x178>)
 80089dc:	2200      	movs	r2, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	f7f7 fe11 	bl	8000608 <__aeabi_dmul>
 80089e6:	a340      	add	r3, pc, #256	; (adr r3, 8008ae8 <__kernel_cos+0x140>)
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	4682      	mov	sl, r0
 80089ee:	468b      	mov	fp, r1
 80089f0:	4620      	mov	r0, r4
 80089f2:	4629      	mov	r1, r5
 80089f4:	f7f7 fe08 	bl	8000608 <__aeabi_dmul>
 80089f8:	a33d      	add	r3, pc, #244	; (adr r3, 8008af0 <__kernel_cos+0x148>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f7 fc4d 	bl	800029c <__adddf3>
 8008a02:	4622      	mov	r2, r4
 8008a04:	462b      	mov	r3, r5
 8008a06:	f7f7 fdff 	bl	8000608 <__aeabi_dmul>
 8008a0a:	a33b      	add	r3, pc, #236	; (adr r3, 8008af8 <__kernel_cos+0x150>)
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f7f7 fc42 	bl	8000298 <__aeabi_dsub>
 8008a14:	4622      	mov	r2, r4
 8008a16:	462b      	mov	r3, r5
 8008a18:	f7f7 fdf6 	bl	8000608 <__aeabi_dmul>
 8008a1c:	a338      	add	r3, pc, #224	; (adr r3, 8008b00 <__kernel_cos+0x158>)
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f7f7 fc3b 	bl	800029c <__adddf3>
 8008a26:	4622      	mov	r2, r4
 8008a28:	462b      	mov	r3, r5
 8008a2a:	f7f7 fded 	bl	8000608 <__aeabi_dmul>
 8008a2e:	a336      	add	r3, pc, #216	; (adr r3, 8008b08 <__kernel_cos+0x160>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f7f7 fc30 	bl	8000298 <__aeabi_dsub>
 8008a38:	4622      	mov	r2, r4
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	f7f7 fde4 	bl	8000608 <__aeabi_dmul>
 8008a40:	a333      	add	r3, pc, #204	; (adr r3, 8008b10 <__kernel_cos+0x168>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f7f7 fc29 	bl	800029c <__adddf3>
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	f7f7 fddb 	bl	8000608 <__aeabi_dmul>
 8008a52:	4622      	mov	r2, r4
 8008a54:	462b      	mov	r3, r5
 8008a56:	f7f7 fdd7 	bl	8000608 <__aeabi_dmul>
 8008a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 fdcf 	bl	8000608 <__aeabi_dmul>
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	4629      	mov	r1, r5
 8008a70:	4620      	mov	r0, r4
 8008a72:	f7f7 fc11 	bl	8000298 <__aeabi_dsub>
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <__kernel_cos+0x17c>)
 8008a78:	4598      	cmp	r8, r3
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460f      	mov	r7, r1
 8008a7e:	dc10      	bgt.n	8008aa2 <__kernel_cos+0xfa>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4650      	mov	r0, sl
 8008a86:	4659      	mov	r1, fp
 8008a88:	f7f7 fc06 	bl	8000298 <__aeabi_dsub>
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4926      	ldr	r1, [pc, #152]	; (8008b28 <__kernel_cos+0x180>)
 8008a90:	4602      	mov	r2, r0
 8008a92:	2000      	movs	r0, #0
 8008a94:	f7f7 fc00 	bl	8000298 <__aeabi_dsub>
 8008a98:	ec41 0b10 	vmov	d0, r0, r1
 8008a9c:	b003      	add	sp, #12
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	4b22      	ldr	r3, [pc, #136]	; (8008b2c <__kernel_cos+0x184>)
 8008aa4:	4920      	ldr	r1, [pc, #128]	; (8008b28 <__kernel_cos+0x180>)
 8008aa6:	4598      	cmp	r8, r3
 8008aa8:	bfcc      	ite	gt
 8008aaa:	4d21      	ldrgt	r5, [pc, #132]	; (8008b30 <__kernel_cos+0x188>)
 8008aac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008ab0:	2400      	movs	r4, #0
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f7f7 fbee 	bl	8000298 <__aeabi_dsub>
 8008abc:	4622      	mov	r2, r4
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4689      	mov	r9, r1
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	4650      	mov	r0, sl
 8008ac6:	4659      	mov	r1, fp
 8008ac8:	f7f7 fbe6 	bl	8000298 <__aeabi_dsub>
 8008acc:	4632      	mov	r2, r6
 8008ace:	463b      	mov	r3, r7
 8008ad0:	f7f7 fbe2 	bl	8000298 <__aeabi_dsub>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	e7da      	b.n	8008a94 <__kernel_cos+0xec>
 8008ade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b18 <__kernel_cos+0x170>
 8008ae2:	e7db      	b.n	8008a9c <__kernel_cos+0xf4>
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	be8838d4 	.word	0xbe8838d4
 8008aec:	bda8fae9 	.word	0xbda8fae9
 8008af0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008af4:	3e21ee9e 	.word	0x3e21ee9e
 8008af8:	809c52ad 	.word	0x809c52ad
 8008afc:	3e927e4f 	.word	0x3e927e4f
 8008b00:	19cb1590 	.word	0x19cb1590
 8008b04:	3efa01a0 	.word	0x3efa01a0
 8008b08:	16c15177 	.word	0x16c15177
 8008b0c:	3f56c16c 	.word	0x3f56c16c
 8008b10:	5555554c 	.word	0x5555554c
 8008b14:	3fa55555 	.word	0x3fa55555
 8008b18:	00000000 	.word	0x00000000
 8008b1c:	3ff00000 	.word	0x3ff00000
 8008b20:	3fe00000 	.word	0x3fe00000
 8008b24:	3fd33332 	.word	0x3fd33332
 8008b28:	3ff00000 	.word	0x3ff00000
 8008b2c:	3fe90000 	.word	0x3fe90000
 8008b30:	3fd20000 	.word	0x3fd20000
 8008b34:	00000000 	.word	0x00000000

08008b38 <__kernel_rem_pio2>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	ed2d 8b02 	vpush	{d8}
 8008b40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008b44:	f112 0f14 	cmn.w	r2, #20
 8008b48:	9308      	str	r3, [sp, #32]
 8008b4a:	9101      	str	r1, [sp, #4]
 8008b4c:	4bc4      	ldr	r3, [pc, #784]	; (8008e60 <__kernel_rem_pio2+0x328>)
 8008b4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008b50:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b5e:	bfa8      	it	ge
 8008b60:	1ed4      	subge	r4, r2, #3
 8008b62:	9306      	str	r3, [sp, #24]
 8008b64:	bfb2      	itee	lt
 8008b66:	2400      	movlt	r4, #0
 8008b68:	2318      	movge	r3, #24
 8008b6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b6e:	f06f 0317 	mvn.w	r3, #23
 8008b72:	fb04 3303 	mla	r3, r4, r3, r3
 8008b76:	eb03 0a02 	add.w	sl, r3, r2
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	9a06      	ldr	r2, [sp, #24]
 8008b7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008e50 <__kernel_rem_pio2+0x318>
 8008b82:	eb03 0802 	add.w	r8, r3, r2
 8008b86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008b88:	1aa7      	subs	r7, r4, r2
 8008b8a:	ae22      	add	r6, sp, #136	; 0x88
 8008b8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008b90:	2500      	movs	r5, #0
 8008b92:	4545      	cmp	r5, r8
 8008b94:	dd13      	ble.n	8008bbe <__kernel_rem_pio2+0x86>
 8008b96:	9b08      	ldr	r3, [sp, #32]
 8008b98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008e50 <__kernel_rem_pio2+0x318>
 8008b9c:	aa22      	add	r2, sp, #136	; 0x88
 8008b9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008ba2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	9b02      	ldr	r3, [sp, #8]
 8008bac:	4598      	cmp	r8, r3
 8008bae:	dc2f      	bgt.n	8008c10 <__kernel_rem_pio2+0xd8>
 8008bb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008bb4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008bb8:	462f      	mov	r7, r5
 8008bba:	2600      	movs	r6, #0
 8008bbc:	e01b      	b.n	8008bf6 <__kernel_rem_pio2+0xbe>
 8008bbe:	42ef      	cmn	r7, r5
 8008bc0:	d407      	bmi.n	8008bd2 <__kernel_rem_pio2+0x9a>
 8008bc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008bc6:	f7f7 fcb5 	bl	8000534 <__aeabi_i2d>
 8008bca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008bce:	3501      	adds	r5, #1
 8008bd0:	e7df      	b.n	8008b92 <__kernel_rem_pio2+0x5a>
 8008bd2:	ec51 0b18 	vmov	r0, r1, d8
 8008bd6:	e7f8      	b.n	8008bca <__kernel_rem_pio2+0x92>
 8008bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008be0:	f7f7 fd12 	bl	8000608 <__aeabi_dmul>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bec:	f7f7 fb56 	bl	800029c <__adddf3>
 8008bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bf4:	3601      	adds	r6, #1
 8008bf6:	9b06      	ldr	r3, [sp, #24]
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	f1a7 0708 	sub.w	r7, r7, #8
 8008bfe:	ddeb      	ble.n	8008bd8 <__kernel_rem_pio2+0xa0>
 8008c00:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c04:	f108 0801 	add.w	r8, r8, #1
 8008c08:	ecab 7b02 	vstmia	fp!, {d7}
 8008c0c:	3508      	adds	r5, #8
 8008c0e:	e7cc      	b.n	8008baa <__kernel_rem_pio2+0x72>
 8008c10:	9b02      	ldr	r3, [sp, #8]
 8008c12:	aa0e      	add	r2, sp, #56	; 0x38
 8008c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c18:	930d      	str	r3, [sp, #52]	; 0x34
 8008c1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c20:	9c02      	ldr	r4, [sp, #8]
 8008c22:	930c      	str	r3, [sp, #48]	; 0x30
 8008c24:	00e3      	lsls	r3, r4, #3
 8008c26:	930a      	str	r3, [sp, #40]	; 0x28
 8008c28:	ab9a      	add	r3, sp, #616	; 0x268
 8008c2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008c32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008c36:	ab72      	add	r3, sp, #456	; 0x1c8
 8008c38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008c3c:	46c3      	mov	fp, r8
 8008c3e:	46a1      	mov	r9, r4
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	f1a5 0508 	sub.w	r5, r5, #8
 8008c48:	dc77      	bgt.n	8008d3a <__kernel_rem_pio2+0x202>
 8008c4a:	ec47 6b10 	vmov	d0, r6, r7
 8008c4e:	4650      	mov	r0, sl
 8008c50:	f000 fc12 	bl	8009478 <scalbn>
 8008c54:	ec57 6b10 	vmov	r6, r7, d0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c5e:	ee10 0a10 	vmov	r0, s0
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 fcd0 	bl	8000608 <__aeabi_dmul>
 8008c68:	ec41 0b10 	vmov	d0, r0, r1
 8008c6c:	f000 fb7c 	bl	8009368 <floor>
 8008c70:	4b7c      	ldr	r3, [pc, #496]	; (8008e64 <__kernel_rem_pio2+0x32c>)
 8008c72:	ec51 0b10 	vmov	r0, r1, d0
 8008c76:	2200      	movs	r2, #0
 8008c78:	f7f7 fcc6 	bl	8000608 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 fb08 	bl	8000298 <__aeabi_dsub>
 8008c88:	460f      	mov	r7, r1
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	f7f7 ff6c 	bl	8000b68 <__aeabi_d2iz>
 8008c90:	9004      	str	r0, [sp, #16]
 8008c92:	f7f7 fc4f 	bl	8000534 <__aeabi_i2d>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	f7f7 fafb 	bl	8000298 <__aeabi_dsub>
 8008ca2:	f1ba 0f00 	cmp.w	sl, #0
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	dd6d      	ble.n	8008d88 <__kernel_rem_pio2+0x250>
 8008cac:	1e62      	subs	r2, r4, #1
 8008cae:	ab0e      	add	r3, sp, #56	; 0x38
 8008cb0:	9d04      	ldr	r5, [sp, #16]
 8008cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cb6:	f1ca 0118 	rsb	r1, sl, #24
 8008cba:	fa40 f301 	asr.w	r3, r0, r1
 8008cbe:	441d      	add	r5, r3
 8008cc0:	408b      	lsls	r3, r1
 8008cc2:	1ac0      	subs	r0, r0, r3
 8008cc4:	ab0e      	add	r3, sp, #56	; 0x38
 8008cc6:	9504      	str	r5, [sp, #16]
 8008cc8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008ccc:	f1ca 0317 	rsb	r3, sl, #23
 8008cd0:	fa40 fb03 	asr.w	fp, r0, r3
 8008cd4:	f1bb 0f00 	cmp.w	fp, #0
 8008cd8:	dd65      	ble.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	3301      	adds	r3, #1
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	4615      	mov	r5, r2
 8008ce4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008ce8:	4294      	cmp	r4, r2
 8008cea:	f300 809c 	bgt.w	8008e26 <__kernel_rem_pio2+0x2ee>
 8008cee:	f1ba 0f00 	cmp.w	sl, #0
 8008cf2:	dd07      	ble.n	8008d04 <__kernel_rem_pio2+0x1cc>
 8008cf4:	f1ba 0f01 	cmp.w	sl, #1
 8008cf8:	f000 80c0 	beq.w	8008e7c <__kernel_rem_pio2+0x344>
 8008cfc:	f1ba 0f02 	cmp.w	sl, #2
 8008d00:	f000 80c6 	beq.w	8008e90 <__kernel_rem_pio2+0x358>
 8008d04:	f1bb 0f02 	cmp.w	fp, #2
 8008d08:	d14d      	bne.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	4956      	ldr	r1, [pc, #344]	; (8008e68 <__kernel_rem_pio2+0x330>)
 8008d10:	2000      	movs	r0, #0
 8008d12:	f7f7 fac1 	bl	8000298 <__aeabi_dsub>
 8008d16:	4606      	mov	r6, r0
 8008d18:	460f      	mov	r7, r1
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	d043      	beq.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008d1e:	4650      	mov	r0, sl
 8008d20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008e58 <__kernel_rem_pio2+0x320>
 8008d24:	f000 fba8 	bl	8009478 <scalbn>
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	ec53 2b10 	vmov	r2, r3, d0
 8008d30:	f7f7 fab2 	bl	8000298 <__aeabi_dsub>
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	e035      	b.n	8008da6 <__kernel_rem_pio2+0x26e>
 8008d3a:	4b4c      	ldr	r3, [pc, #304]	; (8008e6c <__kernel_rem_pio2+0x334>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4630      	mov	r0, r6
 8008d40:	4639      	mov	r1, r7
 8008d42:	f7f7 fc61 	bl	8000608 <__aeabi_dmul>
 8008d46:	f7f7 ff0f 	bl	8000b68 <__aeabi_d2iz>
 8008d4a:	f7f7 fbf3 	bl	8000534 <__aeabi_i2d>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	ec43 2b18 	vmov	d8, r2, r3
 8008d56:	4b46      	ldr	r3, [pc, #280]	; (8008e70 <__kernel_rem_pio2+0x338>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f7f7 fc55 	bl	8000608 <__aeabi_dmul>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fa97 	bl	8000298 <__aeabi_dsub>
 8008d6a:	f7f7 fefd 	bl	8000b68 <__aeabi_d2iz>
 8008d6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d72:	f84b 0b04 	str.w	r0, [fp], #4
 8008d76:	ec51 0b18 	vmov	r0, r1, d8
 8008d7a:	f7f7 fa8f 	bl	800029c <__adddf3>
 8008d7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	e75b      	b.n	8008c40 <__kernel_rem_pio2+0x108>
 8008d88:	d106      	bne.n	8008d98 <__kernel_rem_pio2+0x260>
 8008d8a:	1e63      	subs	r3, r4, #1
 8008d8c:	aa0e      	add	r2, sp, #56	; 0x38
 8008d8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008d92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008d96:	e79d      	b.n	8008cd4 <__kernel_rem_pio2+0x19c>
 8008d98:	4b36      	ldr	r3, [pc, #216]	; (8008e74 <__kernel_rem_pio2+0x33c>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f7f7 feba 	bl	8000b14 <__aeabi_dcmpge>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d13d      	bne.n	8008e20 <__kernel_rem_pio2+0x2e8>
 8008da4:	4683      	mov	fp, r0
 8008da6:	2200      	movs	r2, #0
 8008da8:	2300      	movs	r3, #0
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	f000 80c0 	beq.w	8008f38 <__kernel_rem_pio2+0x400>
 8008db8:	1e65      	subs	r5, r4, #1
 8008dba:	462b      	mov	r3, r5
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	9902      	ldr	r1, [sp, #8]
 8008dc0:	428b      	cmp	r3, r1
 8008dc2:	da6c      	bge.n	8008e9e <__kernel_rem_pio2+0x366>
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	f000 8089 	beq.w	8008edc <__kernel_rem_pio2+0x3a4>
 8008dca:	ab0e      	add	r3, sp, #56	; 0x38
 8008dcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8008dd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80ad 	beq.w	8008f34 <__kernel_rem_pio2+0x3fc>
 8008dda:	4650      	mov	r0, sl
 8008ddc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008e58 <__kernel_rem_pio2+0x320>
 8008de0:	f000 fb4a 	bl	8009478 <scalbn>
 8008de4:	ab9a      	add	r3, sp, #616	; 0x268
 8008de6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008dea:	ec57 6b10 	vmov	r6, r7, d0
 8008dee:	00ec      	lsls	r4, r5, #3
 8008df0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008df4:	46aa      	mov	sl, r5
 8008df6:	f1ba 0f00 	cmp.w	sl, #0
 8008dfa:	f280 80d6 	bge.w	8008faa <__kernel_rem_pio2+0x472>
 8008dfe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008e50 <__kernel_rem_pio2+0x318>
 8008e02:	462e      	mov	r6, r5
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	f2c0 8104 	blt.w	8009012 <__kernel_rem_pio2+0x4da>
 8008e0a:	ab72      	add	r3, sp, #456	; 0x1c8
 8008e0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008e10:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008e78 <__kernel_rem_pio2+0x340>
 8008e14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008e18:	f04f 0800 	mov.w	r8, #0
 8008e1c:	1baf      	subs	r7, r5, r6
 8008e1e:	e0ea      	b.n	8008ff6 <__kernel_rem_pio2+0x4be>
 8008e20:	f04f 0b02 	mov.w	fp, #2
 8008e24:	e759      	b.n	8008cda <__kernel_rem_pio2+0x1a2>
 8008e26:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2a:	b955      	cbnz	r5, 8008e42 <__kernel_rem_pio2+0x30a>
 8008e2c:	b123      	cbz	r3, 8008e38 <__kernel_rem_pio2+0x300>
 8008e2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e32:	f8c8 3000 	str.w	r3, [r8]
 8008e36:	2301      	movs	r3, #1
 8008e38:	3201      	adds	r2, #1
 8008e3a:	f108 0804 	add.w	r8, r8, #4
 8008e3e:	461d      	mov	r5, r3
 8008e40:	e752      	b.n	8008ce8 <__kernel_rem_pio2+0x1b0>
 8008e42:	1acb      	subs	r3, r1, r3
 8008e44:	f8c8 3000 	str.w	r3, [r8]
 8008e48:	462b      	mov	r3, r5
 8008e4a:	e7f5      	b.n	8008e38 <__kernel_rem_pio2+0x300>
 8008e4c:	f3af 8000 	nop.w
	...
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	08009c10 	.word	0x08009c10
 8008e64:	40200000 	.word	0x40200000
 8008e68:	3ff00000 	.word	0x3ff00000
 8008e6c:	3e700000 	.word	0x3e700000
 8008e70:	41700000 	.word	0x41700000
 8008e74:	3fe00000 	.word	0x3fe00000
 8008e78:	08009bd0 	.word	0x08009bd0
 8008e7c:	1e62      	subs	r2, r4, #1
 8008e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e88:	a90e      	add	r1, sp, #56	; 0x38
 8008e8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e8e:	e739      	b.n	8008d04 <__kernel_rem_pio2+0x1cc>
 8008e90:	1e62      	subs	r2, r4, #1
 8008e92:	ab0e      	add	r3, sp, #56	; 0x38
 8008e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e9c:	e7f4      	b.n	8008e88 <__kernel_rem_pio2+0x350>
 8008e9e:	a90e      	add	r1, sp, #56	; 0x38
 8008ea0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	e789      	b.n	8008dbe <__kernel_rem_pio2+0x286>
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	d0fa      	beq.n	8008eaa <__kernel_rem_pio2+0x372>
 8008eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008eba:	446a      	add	r2, sp
 8008ebc:	3a98      	subs	r2, #152	; 0x98
 8008ebe:	920a      	str	r2, [sp, #40]	; 0x28
 8008ec0:	9a08      	ldr	r2, [sp, #32]
 8008ec2:	18e3      	adds	r3, r4, r3
 8008ec4:	18a5      	adds	r5, r4, r2
 8008ec6:	aa22      	add	r2, sp, #136	; 0x88
 8008ec8:	f104 0801 	add.w	r8, r4, #1
 8008ecc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	9b04      	ldr	r3, [sp, #16]
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	da04      	bge.n	8008ee2 <__kernel_rem_pio2+0x3aa>
 8008ed8:	461c      	mov	r4, r3
 8008eda:	e6a3      	b.n	8008c24 <__kernel_rem_pio2+0xec>
 8008edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e7e4      	b.n	8008eac <__kernel_rem_pio2+0x374>
 8008ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ee4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ee8:	f7f7 fb24 	bl	8000534 <__aeabi_i2d>
 8008eec:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef2:	46ab      	mov	fp, r5
 8008ef4:	461c      	mov	r4, r3
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	2600      	movs	r6, #0
 8008efc:	2700      	movs	r7, #0
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	4599      	cmp	r9, r3
 8008f02:	dd06      	ble.n	8008f12 <__kernel_rem_pio2+0x3da>
 8008f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f06:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008f0a:	f108 0801 	add.w	r8, r8, #1
 8008f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f10:	e7df      	b.n	8008ed2 <__kernel_rem_pio2+0x39a>
 8008f12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f1a:	f7f7 fb75 	bl	8000608 <__aeabi_dmul>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4630      	mov	r0, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 f9b9 	bl	800029c <__adddf3>
 8008f2a:	f109 0901 	add.w	r9, r9, #1
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	e7e4      	b.n	8008efe <__kernel_rem_pio2+0x3c6>
 8008f34:	3d01      	subs	r5, #1
 8008f36:	e748      	b.n	8008dca <__kernel_rem_pio2+0x292>
 8008f38:	ec47 6b10 	vmov	d0, r6, r7
 8008f3c:	f1ca 0000 	rsb	r0, sl, #0
 8008f40:	f000 fa9a 	bl	8009478 <scalbn>
 8008f44:	ec57 6b10 	vmov	r6, r7, d0
 8008f48:	4ba0      	ldr	r3, [pc, #640]	; (80091cc <__kernel_rem_pio2+0x694>)
 8008f4a:	ee10 0a10 	vmov	r0, s0
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4639      	mov	r1, r7
 8008f52:	f7f7 fddf 	bl	8000b14 <__aeabi_dcmpge>
 8008f56:	b1f8      	cbz	r0, 8008f98 <__kernel_rem_pio2+0x460>
 8008f58:	4b9d      	ldr	r3, [pc, #628]	; (80091d0 <__kernel_rem_pio2+0x698>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 fb52 	bl	8000608 <__aeabi_dmul>
 8008f64:	f7f7 fe00 	bl	8000b68 <__aeabi_d2iz>
 8008f68:	4680      	mov	r8, r0
 8008f6a:	f7f7 fae3 	bl	8000534 <__aeabi_i2d>
 8008f6e:	4b97      	ldr	r3, [pc, #604]	; (80091cc <__kernel_rem_pio2+0x694>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	f7f7 fb49 	bl	8000608 <__aeabi_dmul>
 8008f76:	460b      	mov	r3, r1
 8008f78:	4602      	mov	r2, r0
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7f7 f98b 	bl	8000298 <__aeabi_dsub>
 8008f82:	f7f7 fdf1 	bl	8000b68 <__aeabi_d2iz>
 8008f86:	1c65      	adds	r5, r4, #1
 8008f88:	ab0e      	add	r3, sp, #56	; 0x38
 8008f8a:	f10a 0a18 	add.w	sl, sl, #24
 8008f8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f92:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008f96:	e720      	b.n	8008dda <__kernel_rem_pio2+0x2a2>
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fde4 	bl	8000b68 <__aeabi_d2iz>
 8008fa0:	ab0e      	add	r3, sp, #56	; 0x38
 8008fa2:	4625      	mov	r5, r4
 8008fa4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fa8:	e717      	b.n	8008dda <__kernel_rem_pio2+0x2a2>
 8008faa:	ab0e      	add	r3, sp, #56	; 0x38
 8008fac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008fb0:	f7f7 fac0 	bl	8000534 <__aeabi_i2d>
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	f7f7 fb26 	bl	8000608 <__aeabi_dmul>
 8008fbc:	4b84      	ldr	r3, [pc, #528]	; (80091d0 <__kernel_rem_pio2+0x698>)
 8008fbe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 fb1e 	bl	8000608 <__aeabi_dmul>
 8008fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	e70f      	b.n	8008df6 <__kernel_rem_pio2+0x2be>
 8008fd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008fda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008fde:	f7f7 fb13 	bl	8000608 <__aeabi_dmul>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fea:	f7f7 f957 	bl	800029c <__adddf3>
 8008fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	9b02      	ldr	r3, [sp, #8]
 8008ff8:	4598      	cmp	r8, r3
 8008ffa:	dc01      	bgt.n	8009000 <__kernel_rem_pio2+0x4c8>
 8008ffc:	45b8      	cmp	r8, r7
 8008ffe:	ddea      	ble.n	8008fd6 <__kernel_rem_pio2+0x49e>
 8009000:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009004:	ab4a      	add	r3, sp, #296	; 0x128
 8009006:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800900a:	ed87 7b00 	vstr	d7, [r7]
 800900e:	3e01      	subs	r6, #1
 8009010:	e6f8      	b.n	8008e04 <__kernel_rem_pio2+0x2cc>
 8009012:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009014:	2b02      	cmp	r3, #2
 8009016:	dc0b      	bgt.n	8009030 <__kernel_rem_pio2+0x4f8>
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc35      	bgt.n	8009088 <__kernel_rem_pio2+0x550>
 800901c:	d059      	beq.n	80090d2 <__kernel_rem_pio2+0x59a>
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	f003 0007 	and.w	r0, r3, #7
 8009024:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009028:	ecbd 8b02 	vpop	{d8}
 800902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009030:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009032:	2b03      	cmp	r3, #3
 8009034:	d1f3      	bne.n	800901e <__kernel_rem_pio2+0x4e6>
 8009036:	ab4a      	add	r3, sp, #296	; 0x128
 8009038:	4423      	add	r3, r4
 800903a:	9306      	str	r3, [sp, #24]
 800903c:	461c      	mov	r4, r3
 800903e:	469a      	mov	sl, r3
 8009040:	9502      	str	r5, [sp, #8]
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f1aa 0a08 	sub.w	sl, sl, #8
 800904a:	dc6b      	bgt.n	8009124 <__kernel_rem_pio2+0x5ec>
 800904c:	46aa      	mov	sl, r5
 800904e:	f1ba 0f01 	cmp.w	sl, #1
 8009052:	f1a4 0408 	sub.w	r4, r4, #8
 8009056:	f300 8085 	bgt.w	8009164 <__kernel_rem_pio2+0x62c>
 800905a:	9c06      	ldr	r4, [sp, #24]
 800905c:	2000      	movs	r0, #0
 800905e:	3408      	adds	r4, #8
 8009060:	2100      	movs	r1, #0
 8009062:	2d01      	cmp	r5, #1
 8009064:	f300 809d 	bgt.w	80091a2 <__kernel_rem_pio2+0x66a>
 8009068:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800906c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009070:	f1bb 0f00 	cmp.w	fp, #0
 8009074:	f040 809b 	bne.w	80091ae <__kernel_rem_pio2+0x676>
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	e9c3 5600 	strd	r5, r6, [r3]
 800907e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009082:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009086:	e7ca      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 8009088:	3408      	adds	r4, #8
 800908a:	ab4a      	add	r3, sp, #296	; 0x128
 800908c:	441c      	add	r4, r3
 800908e:	462e      	mov	r6, r5
 8009090:	2000      	movs	r0, #0
 8009092:	2100      	movs	r1, #0
 8009094:	2e00      	cmp	r6, #0
 8009096:	da36      	bge.n	8009106 <__kernel_rem_pio2+0x5ce>
 8009098:	f1bb 0f00 	cmp.w	fp, #0
 800909c:	d039      	beq.n	8009112 <__kernel_rem_pio2+0x5da>
 800909e:	4602      	mov	r2, r0
 80090a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a4:	9c01      	ldr	r4, [sp, #4]
 80090a6:	e9c4 2300 	strd	r2, r3, [r4]
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80090b2:	f7f7 f8f1 	bl	8000298 <__aeabi_dsub>
 80090b6:	ae4c      	add	r6, sp, #304	; 0x130
 80090b8:	2401      	movs	r4, #1
 80090ba:	42a5      	cmp	r5, r4
 80090bc:	da2c      	bge.n	8009118 <__kernel_rem_pio2+0x5e0>
 80090be:	f1bb 0f00 	cmp.w	fp, #0
 80090c2:	d002      	beq.n	80090ca <__kernel_rem_pio2+0x592>
 80090c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c8:	4619      	mov	r1, r3
 80090ca:	9b01      	ldr	r3, [sp, #4]
 80090cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80090d0:	e7a5      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 80090d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80090d6:	eb0d 0403 	add.w	r4, sp, r3
 80090da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80090de:	2000      	movs	r0, #0
 80090e0:	2100      	movs	r1, #0
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	da09      	bge.n	80090fa <__kernel_rem_pio2+0x5c2>
 80090e6:	f1bb 0f00 	cmp.w	fp, #0
 80090ea:	d002      	beq.n	80090f2 <__kernel_rem_pio2+0x5ba>
 80090ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090f0:	4619      	mov	r1, r3
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	e9c3 0100 	strd	r0, r1, [r3]
 80090f8:	e791      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 80090fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80090fe:	f7f7 f8cd 	bl	800029c <__adddf3>
 8009102:	3d01      	subs	r5, #1
 8009104:	e7ed      	b.n	80090e2 <__kernel_rem_pio2+0x5aa>
 8009106:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800910a:	f7f7 f8c7 	bl	800029c <__adddf3>
 800910e:	3e01      	subs	r6, #1
 8009110:	e7c0      	b.n	8009094 <__kernel_rem_pio2+0x55c>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	e7c5      	b.n	80090a4 <__kernel_rem_pio2+0x56c>
 8009118:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800911c:	f7f7 f8be 	bl	800029c <__adddf3>
 8009120:	3401      	adds	r4, #1
 8009122:	e7ca      	b.n	80090ba <__kernel_rem_pio2+0x582>
 8009124:	e9da 8900 	ldrd	r8, r9, [sl]
 8009128:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800912c:	9b02      	ldr	r3, [sp, #8]
 800912e:	3b01      	subs	r3, #1
 8009130:	9302      	str	r3, [sp, #8]
 8009132:	4632      	mov	r2, r6
 8009134:	463b      	mov	r3, r7
 8009136:	4640      	mov	r0, r8
 8009138:	4649      	mov	r1, r9
 800913a:	f7f7 f8af 	bl	800029c <__adddf3>
 800913e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 f8a5 	bl	8000298 <__aeabi_dsub>
 800914e:	4632      	mov	r2, r6
 8009150:	463b      	mov	r3, r7
 8009152:	f7f7 f8a3 	bl	800029c <__adddf3>
 8009156:	ed9d 7b08 	vldr	d7, [sp, #32]
 800915a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800915e:	ed8a 7b00 	vstr	d7, [sl]
 8009162:	e76e      	b.n	8009042 <__kernel_rem_pio2+0x50a>
 8009164:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009168:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800916c:	4640      	mov	r0, r8
 800916e:	4632      	mov	r2, r6
 8009170:	463b      	mov	r3, r7
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 f892 	bl	800029c <__adddf3>
 8009178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 f888 	bl	8000298 <__aeabi_dsub>
 8009188:	4632      	mov	r2, r6
 800918a:	463b      	mov	r3, r7
 800918c:	f7f7 f886 	bl	800029c <__adddf3>
 8009190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009198:	ed84 7b00 	vstr	d7, [r4]
 800919c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091a0:	e755      	b.n	800904e <__kernel_rem_pio2+0x516>
 80091a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091a6:	f7f7 f879 	bl	800029c <__adddf3>
 80091aa:	3d01      	subs	r5, #1
 80091ac:	e759      	b.n	8009062 <__kernel_rem_pio2+0x52a>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	601d      	str	r5, [r3, #0]
 80091b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80091b8:	605c      	str	r4, [r3, #4]
 80091ba:	609f      	str	r7, [r3, #8]
 80091bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80091c0:	60d3      	str	r3, [r2, #12]
 80091c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091c6:	6110      	str	r0, [r2, #16]
 80091c8:	6153      	str	r3, [r2, #20]
 80091ca:	e728      	b.n	800901e <__kernel_rem_pio2+0x4e6>
 80091cc:	41700000 	.word	0x41700000
 80091d0:	3e700000 	.word	0x3e700000
 80091d4:	00000000 	.word	0x00000000

080091d8 <__kernel_sin>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	ed2d 8b04 	vpush	{d8-d9}
 80091e0:	eeb0 8a41 	vmov.f32	s16, s2
 80091e4:	eef0 8a61 	vmov.f32	s17, s3
 80091e8:	ec55 4b10 	vmov	r4, r5, d0
 80091ec:	b083      	sub	sp, #12
 80091ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091f6:	9001      	str	r0, [sp, #4]
 80091f8:	da06      	bge.n	8009208 <__kernel_sin+0x30>
 80091fa:	ee10 0a10 	vmov	r0, s0
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 fcb2 	bl	8000b68 <__aeabi_d2iz>
 8009204:	2800      	cmp	r0, #0
 8009206:	d051      	beq.n	80092ac <__kernel_sin+0xd4>
 8009208:	4622      	mov	r2, r4
 800920a:	462b      	mov	r3, r5
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 f9fa 	bl	8000608 <__aeabi_dmul>
 8009214:	4682      	mov	sl, r0
 8009216:	468b      	mov	fp, r1
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f7f7 f9f2 	bl	8000608 <__aeabi_dmul>
 8009224:	a341      	add	r3, pc, #260	; (adr r3, 800932c <__kernel_sin+0x154>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	4680      	mov	r8, r0
 800922c:	4689      	mov	r9, r1
 800922e:	4650      	mov	r0, sl
 8009230:	4659      	mov	r1, fp
 8009232:	f7f7 f9e9 	bl	8000608 <__aeabi_dmul>
 8009236:	a33f      	add	r3, pc, #252	; (adr r3, 8009334 <__kernel_sin+0x15c>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 f82c 	bl	8000298 <__aeabi_dsub>
 8009240:	4652      	mov	r2, sl
 8009242:	465b      	mov	r3, fp
 8009244:	f7f7 f9e0 	bl	8000608 <__aeabi_dmul>
 8009248:	a33c      	add	r3, pc, #240	; (adr r3, 800933c <__kernel_sin+0x164>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f825 	bl	800029c <__adddf3>
 8009252:	4652      	mov	r2, sl
 8009254:	465b      	mov	r3, fp
 8009256:	f7f7 f9d7 	bl	8000608 <__aeabi_dmul>
 800925a:	a33a      	add	r3, pc, #232	; (adr r3, 8009344 <__kernel_sin+0x16c>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f81a 	bl	8000298 <__aeabi_dsub>
 8009264:	4652      	mov	r2, sl
 8009266:	465b      	mov	r3, fp
 8009268:	f7f7 f9ce 	bl	8000608 <__aeabi_dmul>
 800926c:	a337      	add	r3, pc, #220	; (adr r3, 800934c <__kernel_sin+0x174>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f813 	bl	800029c <__adddf3>
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	b9eb      	cbnz	r3, 80092ba <__kernel_sin+0xe2>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4650      	mov	r0, sl
 8009284:	4659      	mov	r1, fp
 8009286:	f7f7 f9bf 	bl	8000608 <__aeabi_dmul>
 800928a:	a325      	add	r3, pc, #148	; (adr r3, 8009320 <__kernel_sin+0x148>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f7 f802 	bl	8000298 <__aeabi_dsub>
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	f7f7 f9b6 	bl	8000608 <__aeabi_dmul>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4620      	mov	r0, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	f7f6 fffa 	bl	800029c <__adddf3>
 80092a8:	4604      	mov	r4, r0
 80092aa:	460d      	mov	r5, r1
 80092ac:	ec45 4b10 	vmov	d0, r4, r5
 80092b0:	b003      	add	sp, #12
 80092b2:	ecbd 8b04 	vpop	{d8-d9}
 80092b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ba:	4b1b      	ldr	r3, [pc, #108]	; (8009328 <__kernel_sin+0x150>)
 80092bc:	ec51 0b18 	vmov	r0, r1, d8
 80092c0:	2200      	movs	r2, #0
 80092c2:	f7f7 f9a1 	bl	8000608 <__aeabi_dmul>
 80092c6:	4632      	mov	r2, r6
 80092c8:	ec41 0b19 	vmov	d9, r0, r1
 80092cc:	463b      	mov	r3, r7
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 f999 	bl	8000608 <__aeabi_dmul>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	ec51 0b19 	vmov	r0, r1, d9
 80092de:	f7f6 ffdb 	bl	8000298 <__aeabi_dsub>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	f7f7 f98f 	bl	8000608 <__aeabi_dmul>
 80092ea:	ec53 2b18 	vmov	r2, r3, d8
 80092ee:	f7f6 ffd3 	bl	8000298 <__aeabi_dsub>
 80092f2:	a30b      	add	r3, pc, #44	; (adr r3, 8009320 <__kernel_sin+0x148>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f7 f982 	bl	8000608 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ffc6 	bl	800029c <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f6 ffbe 	bl	8000298 <__aeabi_dsub>
 800931c:	e7c4      	b.n	80092a8 <__kernel_sin+0xd0>
 800931e:	bf00      	nop
 8009320:	55555549 	.word	0x55555549
 8009324:	3fc55555 	.word	0x3fc55555
 8009328:	3fe00000 	.word	0x3fe00000
 800932c:	5acfd57c 	.word	0x5acfd57c
 8009330:	3de5d93a 	.word	0x3de5d93a
 8009334:	8a2b9ceb 	.word	0x8a2b9ceb
 8009338:	3e5ae5e6 	.word	0x3e5ae5e6
 800933c:	57b1fe7d 	.word	0x57b1fe7d
 8009340:	3ec71de3 	.word	0x3ec71de3
 8009344:	19c161d5 	.word	0x19c161d5
 8009348:	3f2a01a0 	.word	0x3f2a01a0
 800934c:	1110f8a6 	.word	0x1110f8a6
 8009350:	3f811111 	.word	0x3f811111

08009354 <fabs>:
 8009354:	ec51 0b10 	vmov	r0, r1, d0
 8009358:	ee10 2a10 	vmov	r2, s0
 800935c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009360:	ec43 2b10 	vmov	d0, r2, r3
 8009364:	4770      	bx	lr
	...

08009368 <floor>:
 8009368:	ec51 0b10 	vmov	r0, r1, d0
 800936c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009370:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009374:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009378:	2e13      	cmp	r6, #19
 800937a:	ee10 5a10 	vmov	r5, s0
 800937e:	ee10 8a10 	vmov	r8, s0
 8009382:	460c      	mov	r4, r1
 8009384:	dc32      	bgt.n	80093ec <floor+0x84>
 8009386:	2e00      	cmp	r6, #0
 8009388:	da14      	bge.n	80093b4 <floor+0x4c>
 800938a:	a333      	add	r3, pc, #204	; (adr r3, 8009458 <floor+0xf0>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f6 ff84 	bl	800029c <__adddf3>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	f7f7 fbc6 	bl	8000b28 <__aeabi_dcmpgt>
 800939c:	b138      	cbz	r0, 80093ae <floor+0x46>
 800939e:	2c00      	cmp	r4, #0
 80093a0:	da57      	bge.n	8009452 <floor+0xea>
 80093a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80093a6:	431d      	orrs	r5, r3
 80093a8:	d001      	beq.n	80093ae <floor+0x46>
 80093aa:	4c2d      	ldr	r4, [pc, #180]	; (8009460 <floor+0xf8>)
 80093ac:	2500      	movs	r5, #0
 80093ae:	4621      	mov	r1, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	e025      	b.n	8009400 <floor+0x98>
 80093b4:	4f2b      	ldr	r7, [pc, #172]	; (8009464 <floor+0xfc>)
 80093b6:	4137      	asrs	r7, r6
 80093b8:	ea01 0307 	and.w	r3, r1, r7
 80093bc:	4303      	orrs	r3, r0
 80093be:	d01f      	beq.n	8009400 <floor+0x98>
 80093c0:	a325      	add	r3, pc, #148	; (adr r3, 8009458 <floor+0xf0>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 ff69 	bl	800029c <__adddf3>
 80093ca:	2200      	movs	r2, #0
 80093cc:	2300      	movs	r3, #0
 80093ce:	f7f7 fbab 	bl	8000b28 <__aeabi_dcmpgt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d0eb      	beq.n	80093ae <floor+0x46>
 80093d6:	2c00      	cmp	r4, #0
 80093d8:	bfbe      	ittt	lt
 80093da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80093de:	fa43 f606 	asrlt.w	r6, r3, r6
 80093e2:	19a4      	addlt	r4, r4, r6
 80093e4:	ea24 0407 	bic.w	r4, r4, r7
 80093e8:	2500      	movs	r5, #0
 80093ea:	e7e0      	b.n	80093ae <floor+0x46>
 80093ec:	2e33      	cmp	r6, #51	; 0x33
 80093ee:	dd0b      	ble.n	8009408 <floor+0xa0>
 80093f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80093f4:	d104      	bne.n	8009400 <floor+0x98>
 80093f6:	ee10 2a10 	vmov	r2, s0
 80093fa:	460b      	mov	r3, r1
 80093fc:	f7f6 ff4e 	bl	800029c <__adddf3>
 8009400:	ec41 0b10 	vmov	d0, r0, r1
 8009404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009408:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800940c:	f04f 33ff 	mov.w	r3, #4294967295
 8009410:	fa23 f707 	lsr.w	r7, r3, r7
 8009414:	4207      	tst	r7, r0
 8009416:	d0f3      	beq.n	8009400 <floor+0x98>
 8009418:	a30f      	add	r3, pc, #60	; (adr r3, 8009458 <floor+0xf0>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f6 ff3d 	bl	800029c <__adddf3>
 8009422:	2200      	movs	r2, #0
 8009424:	2300      	movs	r3, #0
 8009426:	f7f7 fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 800942a:	2800      	cmp	r0, #0
 800942c:	d0bf      	beq.n	80093ae <floor+0x46>
 800942e:	2c00      	cmp	r4, #0
 8009430:	da02      	bge.n	8009438 <floor+0xd0>
 8009432:	2e14      	cmp	r6, #20
 8009434:	d103      	bne.n	800943e <floor+0xd6>
 8009436:	3401      	adds	r4, #1
 8009438:	ea25 0507 	bic.w	r5, r5, r7
 800943c:	e7b7      	b.n	80093ae <floor+0x46>
 800943e:	2301      	movs	r3, #1
 8009440:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009444:	fa03 f606 	lsl.w	r6, r3, r6
 8009448:	4435      	add	r5, r6
 800944a:	4545      	cmp	r5, r8
 800944c:	bf38      	it	cc
 800944e:	18e4      	addcc	r4, r4, r3
 8009450:	e7f2      	b.n	8009438 <floor+0xd0>
 8009452:	2500      	movs	r5, #0
 8009454:	462c      	mov	r4, r5
 8009456:	e7aa      	b.n	80093ae <floor+0x46>
 8009458:	8800759c 	.word	0x8800759c
 800945c:	7e37e43c 	.word	0x7e37e43c
 8009460:	bff00000 	.word	0xbff00000
 8009464:	000fffff 	.word	0x000fffff

08009468 <nan>:
 8009468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009470 <nan+0x8>
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	00000000 	.word	0x00000000
 8009474:	7ff80000 	.word	0x7ff80000

08009478 <scalbn>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	ec55 4b10 	vmov	r4, r5, d0
 800947e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009482:	4606      	mov	r6, r0
 8009484:	462b      	mov	r3, r5
 8009486:	b99a      	cbnz	r2, 80094b0 <scalbn+0x38>
 8009488:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800948c:	4323      	orrs	r3, r4
 800948e:	d036      	beq.n	80094fe <scalbn+0x86>
 8009490:	4b39      	ldr	r3, [pc, #228]	; (8009578 <scalbn+0x100>)
 8009492:	4629      	mov	r1, r5
 8009494:	ee10 0a10 	vmov	r0, s0
 8009498:	2200      	movs	r2, #0
 800949a:	f7f7 f8b5 	bl	8000608 <__aeabi_dmul>
 800949e:	4b37      	ldr	r3, [pc, #220]	; (800957c <scalbn+0x104>)
 80094a0:	429e      	cmp	r6, r3
 80094a2:	4604      	mov	r4, r0
 80094a4:	460d      	mov	r5, r1
 80094a6:	da10      	bge.n	80094ca <scalbn+0x52>
 80094a8:	a32b      	add	r3, pc, #172	; (adr r3, 8009558 <scalbn+0xe0>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	e03a      	b.n	8009526 <scalbn+0xae>
 80094b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80094b4:	428a      	cmp	r2, r1
 80094b6:	d10c      	bne.n	80094d2 <scalbn+0x5a>
 80094b8:	ee10 2a10 	vmov	r2, s0
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f6 feec 	bl	800029c <__adddf3>
 80094c4:	4604      	mov	r4, r0
 80094c6:	460d      	mov	r5, r1
 80094c8:	e019      	b.n	80094fe <scalbn+0x86>
 80094ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094ce:	460b      	mov	r3, r1
 80094d0:	3a36      	subs	r2, #54	; 0x36
 80094d2:	4432      	add	r2, r6
 80094d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094d8:	428a      	cmp	r2, r1
 80094da:	dd08      	ble.n	80094ee <scalbn+0x76>
 80094dc:	2d00      	cmp	r5, #0
 80094de:	a120      	add	r1, pc, #128	; (adr r1, 8009560 <scalbn+0xe8>)
 80094e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e4:	da1c      	bge.n	8009520 <scalbn+0xa8>
 80094e6:	a120      	add	r1, pc, #128	; (adr r1, 8009568 <scalbn+0xf0>)
 80094e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ec:	e018      	b.n	8009520 <scalbn+0xa8>
 80094ee:	2a00      	cmp	r2, #0
 80094f0:	dd08      	ble.n	8009504 <scalbn+0x8c>
 80094f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80094fe:	ec45 4b10 	vmov	d0, r4, r5
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009508:	da19      	bge.n	800953e <scalbn+0xc6>
 800950a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800950e:	429e      	cmp	r6, r3
 8009510:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009514:	dd0a      	ble.n	800952c <scalbn+0xb4>
 8009516:	a112      	add	r1, pc, #72	; (adr r1, 8009560 <scalbn+0xe8>)
 8009518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e2      	bne.n	80094e6 <scalbn+0x6e>
 8009520:	a30f      	add	r3, pc, #60	; (adr r3, 8009560 <scalbn+0xe8>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f7 f86f 	bl	8000608 <__aeabi_dmul>
 800952a:	e7cb      	b.n	80094c4 <scalbn+0x4c>
 800952c:	a10a      	add	r1, pc, #40	; (adr r1, 8009558 <scalbn+0xe0>)
 800952e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0b8      	beq.n	80094a8 <scalbn+0x30>
 8009536:	a10e      	add	r1, pc, #56	; (adr r1, 8009570 <scalbn+0xf8>)
 8009538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800953c:	e7b4      	b.n	80094a8 <scalbn+0x30>
 800953e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009542:	3236      	adds	r2, #54	; 0x36
 8009544:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009548:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800954c:	4620      	mov	r0, r4
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <scalbn+0x108>)
 8009550:	2200      	movs	r2, #0
 8009552:	e7e8      	b.n	8009526 <scalbn+0xae>
 8009554:	f3af 8000 	nop.w
 8009558:	c2f8f359 	.word	0xc2f8f359
 800955c:	01a56e1f 	.word	0x01a56e1f
 8009560:	8800759c 	.word	0x8800759c
 8009564:	7e37e43c 	.word	0x7e37e43c
 8009568:	8800759c 	.word	0x8800759c
 800956c:	fe37e43c 	.word	0xfe37e43c
 8009570:	c2f8f359 	.word	0xc2f8f359
 8009574:	81a56e1f 	.word	0x81a56e1f
 8009578:	43500000 	.word	0x43500000
 800957c:	ffff3cb0 	.word	0xffff3cb0
 8009580:	3c900000 	.word	0x3c900000

08009584 <_init>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr

08009590 <_fini>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr
