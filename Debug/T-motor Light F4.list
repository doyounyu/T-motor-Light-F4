
T-motor Light F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a04c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800a1f0  0800a1f0  0001a1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a870  0800a870  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a878  0800a878  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800a880  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000278  0800aaf4  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800aaf4  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfbd  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca4  00000000  00000000  0002c261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a528  00000000  00000000  000305d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e805  00000000  00000000  0004aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f4d  00000000  00000000  000592fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee24a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  000ee29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000278 	.word	0x20000278
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1d4 	.word	0x0800a1d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000027c 	.word	0x2000027c
 80001dc:	0800a1d4 	.word	0x0800a1d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d101      	bne.n	8000ffa <LL_SPI_IsActiveFlag_TXE+0x18>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	330c      	adds	r3, #12
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	330c      	adds	r3, #12
 8001034:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	4013      	ands	r3, r2
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	619a      	str	r2, [r3, #24]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	041a      	lsls	r2, r3, #16
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SPI1_SendByte>:
	CHIP_DESELECT(ICM20602);
}


unsigned char SPI1_SendByte(unsigned char data)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80010b6:	bf00      	nop
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <SPI1_SendByte+0x40>)
 80010ba:	f7ff ff92 	bl	8000fe2 <LL_SPI_IsActiveFlag_TXE>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f9      	beq.n	80010b8 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <SPI1_SendByte+0x40>)
 80010ca:	f7ff ffab 	bl	8001024 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80010ce:	bf00      	nop
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <SPI1_SendByte+0x40>)
 80010d2:	f7ff ff73 	bl	8000fbc <LL_SPI_IsActiveFlag_RXNE>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f9      	beq.n	80010d0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <SPI1_SendByte+0x40>)
 80010de:	f7ff ff93 	bl	8001008 <LL_SPI_ReceiveData8>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013000 	.word	0x40013000

080010f0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80010fa:	2110      	movs	r1, #16
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <ICM20602_Readbyte+0x3c>)
 80010fe:	f7ff ffc6 	bl	800108e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffce 	bl	80010ac <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ffcb 	bl	80010ac <SPI1_SendByte>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800111a:	2110      	movs	r1, #16
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <ICM20602_Readbyte+0x3c>)
 800111e:	f7ff ffa8 	bl	8001072 <LL_GPIO_SetOutputPin>
	
	return val;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020000 	.word	0x40020000

08001130 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	603a      	str	r2, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	460b      	mov	r3, r1
 800113e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001144:	2110      	movs	r1, #16
 8001146:	4810      	ldr	r0, [pc, #64]	; (8001188 <ICM20602_Readbytes+0x58>)
 8001148:	f7ff ffa1 	bl	800108e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffa9 	bl	80010ac <SPI1_SendByte>
	while(i < len)
 800115a:	e009      	b.n	8001170 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60fa      	str	r2, [r7, #12]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	18d4      	adds	r4, r2, r3
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff ffa0 	bl	80010ac <SPI1_SendByte>
 800116c:	4603      	mov	r3, r0
 800116e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3f1      	bcc.n	800115c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001178:	2110      	movs	r1, #16
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <ICM20602_Readbytes+0x58>)
 800117c:	f7ff ff79 	bl	8001072 <LL_GPIO_SetOutputPin>
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	40020000 	.word	0x40020000

0800118c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800119c:	2110      	movs	r1, #16
 800119e:	480b      	ldr	r0, [pc, #44]	; (80011cc <ICM20602_Writebyte+0x40>)
 80011a0:	f7ff ff75 	bl	800108e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff7d 	bl	80010ac <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff79 	bl	80010ac <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80011ba:	2110      	movs	r1, #16
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <ICM20602_Writebyte+0x40>)
 80011be:	f7ff ff58 	bl	8001072 <LL_GPIO_SetOutputPin>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020000 	.word	0x40020000

080011d0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	CHIP_DESELECT(ICM20602);
 80011d6:	2110      	movs	r1, #16
 80011d8:	4837      	ldr	r0, [pc, #220]	; (80012b8 <ICM20602_Initialization+0xe8>)
 80011da:	f7ff ff4a 	bl	8001072 <LL_GPIO_SetOutputPin>
	uint8_t who_am_i = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
	//ICM20602_GPIO_SPI_Initialization(); Pin initialization in gpio.c and spi.c
	
	printf("Checking ICM20602...\n\r");
 80011e2:	4836      	ldr	r0, [pc, #216]	; (80012bc <ICM20602_Initialization+0xec>)
 80011e4:	f005 fbc2 	bl	800696c <iprintf>
	LL_SPI_Enable(SPI1);
 80011e8:	4835      	ldr	r0, [pc, #212]	; (80012c0 <ICM20602_Initialization+0xf0>)
 80011ea:	f7ff fed7 	bl	8000f9c <LL_SPI_Enable>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80011ee:	2075      	movs	r0, #117	; 0x75
 80011f0:	f7ff ff7e 	bl	80010f0 <ICM20602_Readbyte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xAF // MPU60000 : 0x68
	if(who_am_i == 0x68)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b68      	cmp	r3, #104	; 0x68
 80011fc:	d105      	bne.n	800120a <ICM20602_Initialization+0x3a>
	{
		printf("ICM20602 who_am_i = 0x%02x...OK\n\r", who_am_i);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4619      	mov	r1, r3
 8001202:	4830      	ldr	r0, [pc, #192]	; (80012c4 <ICM20602_Initialization+0xf4>)
 8001204:	f005 fbb2 	bl	800696c <iprintf>
 8001208:	e012      	b.n	8001230 <ICM20602_Initialization+0x60>
	}
	// recheck
	else if(who_am_i != 0x68)
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b68      	cmp	r3, #104	; 0x68
 800120e:	d00f      	beq.n	8001230 <ICM20602_Initialization+0x60>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001210:	2075      	movs	r0, #117	; 0x75
 8001212:	f7ff ff6d 	bl	80010f0 <ICM20602_Readbyte>
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x68){
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b68      	cmp	r3, #104	; 0x68
 800121e:	d007      	beq.n	8001230 <ICM20602_Initialization+0x60>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n\r", who_am_i, 0x68);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2268      	movs	r2, #104	; 0x68
 8001224:	4619      	mov	r1, r3
 8001226:	4828      	ldr	r0, [pc, #160]	; (80012c8 <ICM20602_Initialization+0xf8>)
 8001228:	f005 fba0 	bl	800696c <iprintf>
			return 1; //ERROR
 800122c:	2301      	movs	r3, #1
 800122e:	e03f      	b.n	80012b0 <ICM20602_Initialization+0xe0>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	206b      	movs	r0, #107	; 0x6b
 8001234:	f7ff ffaa 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001238:	2032      	movs	r0, #50	; 0x32
 800123a:	f003 fb67 	bl	800490c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800123e:	2101      	movs	r1, #1
 8001240:	206b      	movs	r0, #107	; 0x6b
 8001242:	f7ff ffa3 	bl	800118c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001246:	2032      	movs	r0, #50	; 0x32
 8001248:	f003 fb60 	bl	800490c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 800124c:	2100      	movs	r1, #0
 800124e:	206c      	movs	r0, #108	; 0x6c
 8001250:	f7ff ff9c 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	f003 fb59 	bl	800490c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800125a:	2100      	movs	r1, #0
 800125c:	2019      	movs	r0, #25
 800125e:	f7ff ff95 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001262:	2032      	movs	r0, #50	; 0x32
 8001264:	f003 fb52 	bl	800490c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001268:	2105      	movs	r1, #5
 800126a:	201a      	movs	r0, #26
 800126c:	f7ff ff8e 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001270:	2032      	movs	r0, #50	; 0x32
 8001272:	f003 fb4b 	bl	800490c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001276:	2118      	movs	r1, #24
 8001278:	201b      	movs	r0, #27
 800127a:	f7ff ff87 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 800127e:	2032      	movs	r0, #50	; 0x32
 8001280:	f003 fb44 	bl	800490c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001284:	2118      	movs	r1, #24
 8001286:	201c      	movs	r0, #28
 8001288:	f7ff ff80 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f003 fb3d 	bl	800490c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D //No ACCEL_CONFIG2 in MPU6000
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001292:	2103      	movs	r1, #3
 8001294:	201d      	movs	r0, #29
 8001296:	f7ff ff79 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 800129a:	2032      	movs	r0, #50	; 0x32
 800129c:	f003 fb36 	bl	800490c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80012a0:	2101      	movs	r1, #1
 80012a2:	2038      	movs	r0, #56	; 0x38
 80012a4:	f7ff ff72 	bl	800118c <ICM20602_Writebyte>
	HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f003 fb2f 	bl	800490c <HAL_Delay>

	// Remove Gyro Z offset
	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte
*/
	return 0; //OK
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020000 	.word	0x40020000
 80012bc:	0800a1f0 	.word	0x0800a1f0
 80012c0:	40013000 	.word	0x40013000
 80012c4:	0800a208 	.word	0x0800a208
 80012c8:	0800a22c 	.word	0x0800a22c

080012cc <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	unsigned char data[14];

	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	461a      	mov	r2, r3
 80012dc:	210e      	movs	r1, #14
 80012de:	203b      	movs	r0, #59	; 0x3b
 80012e0:	f7ff ff26 	bl	8001130 <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 80012e4:	7a3b      	ldrb	r3, [r7, #8]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7a7b      	ldrb	r3, [r7, #9]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b219      	sxth	r1, r3
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	b21a      	sxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3302      	adds	r3, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	b212      	sxth	r2, r2
 8001308:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b219      	sxth	r1, r3
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	b21a      	sxth	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3304      	adds	r3, #4
 8001318:	430a      	orrs	r2, r1
 800131a:	b212      	sxth	r2, r2
 800131c:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8)  | data[9]);
 800131e:	7c3b      	ldrb	r3, [r7, #16]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7c7b      	ldrb	r3, [r7, #17]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21a      	sxth	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 8001330:	7cbb      	ldrb	r3, [r7, #18]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b219      	sxth	r1, r3
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	b21a      	sxth	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3302      	adds	r3, #2
 800133e:	430a      	orrs	r2, r1
 8001340:	b212      	sxth	r2, r2
 8001342:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 8001344:	7d3b      	ldrb	r3, [r7, #20]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b219      	sxth	r1, r3
 800134a:	7d7b      	ldrb	r3, [r7, #21]
 800134c:	b21a      	sxth	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	3304      	adds	r3, #4
 8001352:	430a      	orrs	r2, r1
 8001354:	b212      	sxth	r2, r2
 8001356:	801a      	strh	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001364:	2102      	movs	r1, #2
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <ICM20602_DataReady+0x14>)
 8001368:	f7ff fe6e 	bl	8001048 <LL_GPIO_IsInputPinSet>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020000 	.word	0x40020000

08001378 <GPIO_init>:
{
	GPIOA -> ODR ^= 1 << LED_PIN;
}


void GPIO_init(GPIO_TypeDef *Port, uint32_t pin, uint32_t mode){     
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	// mode  : Input(0), Output(1), AlterFunc(2), Analog(3)   
	if (Port == GPIOA)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <GPIO_init+0x44>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <GPIO_init+0x18>
		RCC_GPIOA_enable();
 800138c:	f000 fd10 	bl	8001db0 <RCC_GPIOA_enable>

	if (Port == GPIOB)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <GPIO_init+0x48>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <GPIO_init+0x24>
		RCC_GPIOB_enable();
 8001398:	f000 fd1a 	bl	8001dd0 <RCC_GPIOB_enable>

	if (Port == GPIOC)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <GPIO_init+0x4c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d101      	bne.n	80013a8 <GPIO_init+0x30>
		RCC_GPIOC_enable();
 80013a4:	f000 fd24 	bl	8001df0 <RCC_GPIOC_enable>



	GPIO_mode(Port, pin, mode);
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 f80b 	bl	80013c8 <GPIO_mode>
	
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800

080013c8 <GPIO_mode>:


// GPIO Mode          : Input(00), Output(01), AlterFunc(10), Analog(11)
void GPIO_mode(GPIO_TypeDef *Port, uint32_t pin, uint32_t mode){
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	
   Port->MODER &= ~(3UL<<(2*pin));     
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2103      	movs	r1, #3
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	401a      	ands	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]
   Port->MODER |= mode<<(2*pin);    
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <GPIO_ospeed>:


// GPIO Speed          : Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
void GPIO_ospeed(GPIO_TypeDef *Port, uint32_t pin, uint32_t speed){
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]

	Port->OSPEEDR &= ~(3UL << (2 * pin)); //reset
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2103      	movs	r1, #3
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
	Port->OSPEEDR |= speed << (2 * pin);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	431a      	orrs	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <PWM_init>:
#include "ecPWM.h"

/* PWM Configuration */

void PWM_init(PWM_t *pwm, GPIO_TypeDef *port, int pin)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
// 0. Match Output Port and Pin for TIMx 	
		pwm->port = port;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	601a      	str	r2, [r3, #0]
		pwm->pin  = pin;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	605a      	str	r2, [r3, #4]
		PWM_pinmap(pwm);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 fb91 	bl	8001b8c <PWM_pinmap>
		TIM_TypeDef *TIMx = pwm->timer; //?
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61fb      	str	r3, [r7, #28]
		int CHn = pwm->ch;	
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]

// 1. Initialize GPIO port and pin as AF
		GPIO_init(port, pin, AF);  // AF=2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2202      	movs	r2, #2
 800147a:	4619      	mov	r1, r3
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f7ff ff7b 	bl	8001378 <GPIO_init>
		GPIO_ospeed(port, pin, 3);  // speed VHIGH=3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	4619      	mov	r1, r3
 8001488:	68b8      	ldr	r0, [r7, #8]
 800148a:	f7ff ffbe 	bl	800140a <GPIO_ospeed>
	
// 2. Configure GPIO AFR by Pin num.				
	//  AFR[0] for pin: 0~7,     AFR[1] for pin 8~15
	//  AFR=1 for TIM1,TIM2	AFR=2 for TIM3 etc
	
	port->AFR[pin>>3] &= ~(0xF<<(4*(pin%8)));  // [pin>>3]: see only pin's first digit pin%8: select pin's location
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3208      	adds	r2, #8
 8001496:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	425a      	negs	r2, r3
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	f002 0207 	and.w	r2, r2, #7
 80014a6:	bf58      	it	pl
 80014a8:	4253      	negpl	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	10da      	asrs	r2, r3, #3
 80014ba:	4001      	ands	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3208      	adds	r2, #8
 80014c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	
	if     (TIMx==TIM1 || TIMx==TIM2)                    port->AFR[pin>>3] |= 1U << 4*(pin%8); 			
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4a8b      	ldr	r2, [pc, #556]	; (80016f4 <PWM_init+0x2a8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d003      	beq.n	80014d4 <PWM_init+0x88>
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d2:	d119      	bne.n	8001508 <PWM_init+0xbc>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	10da      	asrs	r2, r3, #3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3208      	adds	r2, #8
 80014dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	425a      	negs	r2, r3
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	f002 0207 	and.w	r2, r2, #7
 80014ec:	bf58      	it	pl
 80014ee:	4253      	negpl	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	2201      	movs	r2, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	10d2      	asrs	r2, r2, #3
 80014fc:	4319      	orrs	r1, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3208      	adds	r2, #8
 8001502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001506:	e04a      	b.n	800159e <PWM_init+0x152>
	else if(TIMx==TIM3 || TIMx==TIM4  || TIMx==TIM5)     port->AFR[pin>>3] |= 2U << 4*(pin%8);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4a7b      	ldr	r2, [pc, #492]	; (80016f8 <PWM_init+0x2ac>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <PWM_init+0xd4>
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4a7a      	ldr	r2, [pc, #488]	; (80016fc <PWM_init+0x2b0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d003      	beq.n	8001520 <PWM_init+0xd4>
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4a79      	ldr	r2, [pc, #484]	; (8001700 <PWM_init+0x2b4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d119      	bne.n	8001554 <PWM_init+0x108>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	425a      	negs	r2, r3
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	f002 0207 	and.w	r2, r2, #7
 8001538:	bf58      	it	pl
 800153a:	4253      	negpl	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	2202      	movs	r2, #2
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	10d2      	asrs	r2, r2, #3
 8001548:	4319      	orrs	r1, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3208      	adds	r2, #8
 800154e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001552:	e024      	b.n	800159e <PWM_init+0x152>
  else if(TIMx==TIM9 || TIMx==TIM10 || TIMx==TIM11)    port->AFR[pin>>3] |= 3U << 4*(pin%8);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4a6b      	ldr	r2, [pc, #428]	; (8001704 <PWM_init+0x2b8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d007      	beq.n	800156c <PWM_init+0x120>
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <PWM_init+0x2bc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d003      	beq.n	800156c <PWM_init+0x120>
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4a69      	ldr	r2, [pc, #420]	; (800170c <PWM_init+0x2c0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d118      	bne.n	800159e <PWM_init+0x152>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	10da      	asrs	r2, r3, #3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3208      	adds	r2, #8
 8001574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	425a      	negs	r2, r3
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	f002 0207 	and.w	r2, r2, #7
 8001584:	bf58      	it	pl
 8001586:	4253      	negpl	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	10d2      	asrs	r2, r2, #3
 8001594:	4319      	orrs	r1, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3208      	adds	r2, #8
 800159a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

// 3. Initialize Timer 
		TIM_init(TIMx, 1);	// with default msec=1 value.		
 800159e:	2101      	movs	r1, #1
 80015a0:	69f8      	ldr	r0, [r7, #28]
 80015a2:	f000 fc7d 	bl	8001ea0 <TIM_init>
		TIMx->CR1 &= ~TIM_CR1_CEN;	// disable counter
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0201 	bic.w	r2, r3, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	601a      	str	r2, [r3, #0]
// 3-2. Direction of Counter
		
		TIMx->CR1 &= ~TIM_CR1_DIR;    // Counting direction: 0 = up-counting, 1 = down-counting
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0210 	bic.w	r2, r3, #16
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	601a      	str	r2, [r3, #0]
	
			
// 4. Configure Timer Output mode as PWM
	uint32_t ccVal=TIMx->ARR/2;  // default value  CC=ARR/2
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
	if(CHn == 1){
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d121      	bne.n	8001610 <PWM_init+0x1c4>
		TIMx->CCMR1 &= ~TIM_CCMR1_OC1M;                     // Clear ouput compare mode bits for channel 1
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |=  TIM_CCMR1_OC1M_1 |  TIM_CCMR1_OC1M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1	|=  TIM_CCMR1_OC1PE;                     // Output 1 preload enable (make CCR1 value changable)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f043 0208 	orr.w	r2, r3, #8
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	619a      	str	r2, [r3, #24]
		TIMx->CCR1   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34
		TIMx->CCER  &= ~TIM_CCER_CC1P;                       // select output polarity: active high	
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	f023 0202 	bic.w	r2, r3, #2
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC1E;												// Enable output for ch1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	621a      	str	r2, [r3, #32]
		TIMx->CCR2   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
		TIMx->CCER  &= ~TIM_CCER_CC4P;                       // select output polarity: active high	
		TIMx->CCER  |=  TIM_CCER_CC4E;	 
	}	
	
}
 800160e:	e06d      	b.n	80016ec <PWM_init+0x2a0>
	else if(CHn == 2){
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d121      	bne.n	800165a <PWM_init+0x20e>
		TIMx->CCMR1 &= ~TIM_CCMR1_OC2M;                     // Clear ouput compare mode bits for channel 2
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |=  TIM_CCMR1_OC2M_1 |  TIM_CCMR1_OC2M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1	|=  TIM_CCMR1_OC2PE;                     // Output 1 preload enable (make CCR1 value changable)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	619a      	str	r2, [r3, #24]
		TIMx->CCR1   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
		TIMx->CCER  &= ~TIM_CCER_CC2P;                       // select output polarity: active high	
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f023 0220 	bic.w	r2, r3, #32
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC2E;															// Enable output for ch2
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	621a      	str	r2, [r3, #32]
}
 8001658:	e048      	b.n	80016ec <PWM_init+0x2a0>
	else if(CHn == 3){
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d121      	bne.n	80016a4 <PWM_init+0x258>
		TIMx->CCMR2 &= ~TIM_CCMR2_OC3M;                     // Clear ouput compare mode bits for channel 3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2 |=  TIM_CCMR2_OC3M_1 |  TIM_CCMR2_OC3M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2	|=  TIM_CCMR2_OC3PE;                     // Output 1 preload enable (make CCR1 value changable)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f043 0208 	orr.w	r2, r3, #8
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	61da      	str	r2, [r3, #28]
		TIMx->CCR2   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
		TIMx->CCER  &= ~TIM_CCER_CC3P;                       // select output polarity: active high	
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC3E;	                   				// select output polarity: active high	
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	621a      	str	r2, [r3, #32]
}
 80016a2:	e023      	b.n	80016ec <PWM_init+0x2a0>
	else if(CHn == 4){
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d120      	bne.n	80016ec <PWM_init+0x2a0>
		TIMx->CCMR2 &= ~TIM_CCMR2_OC4M;                     // Clear ouput compare mode bits for channel 3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2 |=  TIM_CCMR2_OC4M_1 |  TIM_CCMR2_OC4M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2	|=  TIM_CCMR2_OC4PE;                     // Output 1 preload enable (make CCR1 value changable)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	61da      	str	r2, [r3, #28]
		TIMx->CCR2   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)		
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
		TIMx->CCER  &= ~TIM_CCER_CC4P;                       // select output polarity: active high	
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	621a      	str	r2, [r3, #32]
		TIMx->CCER  |=  TIM_CCER_CC4E;	 
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	621a      	str	r2, [r3, #32]
}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40010000 	.word	0x40010000
 80016f8:	40000400 	.word	0x40000400
 80016fc:	40000800 	.word	0x40000800
 8001700:	40000c00 	.word	0x40000c00
 8001704:	40014000 	.word	0x40014000
 8001708:	40014400 	.word	0x40014400
 800170c:	40014800 	.word	0x40014800

08001710 <PWM_2kHz_init>:
void PWM_2kHz_init(PWM_t *pwm, GPIO_TypeDef *port, int pin)

{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	// 0. Match Output Port and Pin for TIMx
			pwm->port = port;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	601a      	str	r2, [r3, #0]
			pwm->pin  = pin;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	605a      	str	r2, [r3, #4]
			PWM_pinmap(pwm);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 fa2f 	bl	8001b8c <PWM_pinmap>
			TIM_TypeDef *TIMx = pwm->timer; //?
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61fb      	str	r3, [r7, #28]
			int CHn = pwm->ch;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]

	// 1. Initialize GPIO port and pin as AF
			GPIO_init(port, pin, AF);  // AF=2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	4619      	mov	r1, r3
 8001740:	68b8      	ldr	r0, [r7, #8]
 8001742:	f7ff fe19 	bl	8001378 <GPIO_init>
			GPIO_ospeed(port, pin, 3);  // speed VHIGH=3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	4619      	mov	r1, r3
 800174c:	68b8      	ldr	r0, [r7, #8]
 800174e:	f7ff fe5c 	bl	800140a <GPIO_ospeed>

	// 2. Configure GPIO AFR by Pin num.
		//  AFR[0] for pin: 0~7,     AFR[1] for pin 8~15
		//  AFR=1 for TIM1,TIM2	AFR=2 for TIM3 etc

		port->AFR[pin>>3] &= ~(0xF<<(4*(pin%8)));  // [pin>>3]: see only pin's first digit pin%8: select pin's location
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	10da      	asrs	r2, r3, #3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3208      	adds	r2, #8
 800175a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	425a      	negs	r2, r3
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	f002 0207 	and.w	r2, r2, #7
 800176a:	bf58      	it	pl
 800176c:	4253      	negpl	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	10da      	asrs	r2, r3, #3
 800177e:	4001      	ands	r1, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3208      	adds	r2, #8
 8001784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if     (TIMx==TIM1 || TIMx==TIM2)                    port->AFR[pin>>3] |= 1U << 4*(pin%8);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4a93      	ldr	r2, [pc, #588]	; (80019d8 <PWM_2kHz_init+0x2c8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d003      	beq.n	8001798 <PWM_2kHz_init+0x88>
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001796:	d119      	bne.n	80017cc <PWM_2kHz_init+0xbc>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	10da      	asrs	r2, r3, #3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	425a      	negs	r2, r3
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	f002 0207 	and.w	r2, r2, #7
 80017b0:	bf58      	it	pl
 80017b2:	4253      	negpl	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	2201      	movs	r2, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	10d2      	asrs	r2, r2, #3
 80017c0:	4319      	orrs	r1, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3208      	adds	r2, #8
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80017ca:	e04a      	b.n	8001862 <PWM_2kHz_init+0x152>
		else if(TIMx==TIM3 || TIMx==TIM4  || TIMx==TIM5)     port->AFR[pin>>3] |= 2U << 4*(pin%8);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4a83      	ldr	r2, [pc, #524]	; (80019dc <PWM_2kHz_init+0x2cc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <PWM_2kHz_init+0xd4>
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4a82      	ldr	r2, [pc, #520]	; (80019e0 <PWM_2kHz_init+0x2d0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d003      	beq.n	80017e4 <PWM_2kHz_init+0xd4>
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4a81      	ldr	r2, [pc, #516]	; (80019e4 <PWM_2kHz_init+0x2d4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d119      	bne.n	8001818 <PWM_2kHz_init+0x108>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	10da      	asrs	r2, r3, #3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	3208      	adds	r2, #8
 80017ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	425a      	negs	r2, r3
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	f002 0207 	and.w	r2, r2, #7
 80017fc:	bf58      	it	pl
 80017fe:	4253      	negpl	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	2202      	movs	r2, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	10d2      	asrs	r2, r2, #3
 800180c:	4319      	orrs	r1, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3208      	adds	r2, #8
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001816:	e024      	b.n	8001862 <PWM_2kHz_init+0x152>
	  else if(TIMx==TIM9 || TIMx==TIM10 || TIMx==TIM11)    port->AFR[pin>>3] |= 3U << 4*(pin%8);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4a73      	ldr	r2, [pc, #460]	; (80019e8 <PWM_2kHz_init+0x2d8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <PWM_2kHz_init+0x120>
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	4a72      	ldr	r2, [pc, #456]	; (80019ec <PWM_2kHz_init+0x2dc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d003      	beq.n	8001830 <PWM_2kHz_init+0x120>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4a71      	ldr	r2, [pc, #452]	; (80019f0 <PWM_2kHz_init+0x2e0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d118      	bne.n	8001862 <PWM_2kHz_init+0x152>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	10da      	asrs	r2, r3, #3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	425a      	negs	r2, r3
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	f002 0207 	and.w	r2, r2, #7
 8001848:	bf58      	it	pl
 800184a:	4253      	negpl	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	10d2      	asrs	r2, r2, #3
 8001858:	4319      	orrs	r1, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3208      	adds	r2, #8
 800185e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// 3. Initialize Timer
			TIM_2kHz(TIMx);	// with default msec=1 value.
 8001862:	69f8      	ldr	r0, [r7, #28]
 8001864:	f000 fb90 	bl	8001f88 <TIM_2kHz>
			TIMx->CR1 &= ~TIM_CR1_CEN;	// disable counter
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 0201 	bic.w	r2, r3, #1
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	601a      	str	r2, [r3, #0]
	// 3-2. Direction of Counter

			TIMx->CR1 &= ~TIM_CR1_DIR;    // Counting direction: 0 = up-counting, 1 = down-counting
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 0210 	bic.w	r2, r3, #16
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	601a      	str	r2, [r3, #0]


	// 4. Configure Timer Output mode as PWM
		uint32_t ccVal=TIMx->ARR/2;  // default value  CC=ARR/2
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	085b      	lsrs	r3, r3, #1
 8001886:	617b      	str	r3, [r7, #20]
		if(CHn == 1)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d121      	bne.n	80018d2 <PWM_2kHz_init+0x1c2>
		{
			TIMx->CCMR1 &= ~TIM_CCMR1_OC1M;                     // Clear ouput compare mode bits for channel 1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	619a      	str	r2, [r3, #24]
			TIMx->CCMR1 |=  TIM_CCMR1_OC1M_1 |  TIM_CCMR1_OC1M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	619a      	str	r2, [r3, #24]
			TIMx->CCMR1	|=  TIM_CCMR1_OC1PE;                     // Output 1 preload enable (make CCR1 value changable)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f043 0208 	orr.w	r2, r3, #8
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	619a      	str	r2, [r3, #24]
			TIMx->CCR1   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
			TIMx->CCER  &= ~TIM_CCER_CC1P;                       // select output polarity: active high
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f023 0202 	bic.w	r2, r3, #2
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	621a      	str	r2, [r3, #32]
			TIMx->CCER  |=  TIM_CCER_CC1E;												// Enable output for ch1
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	621a      	str	r2, [r3, #32]
 80018d0:	e06d      	b.n	80019ae <PWM_2kHz_init+0x29e>
		}
		else if(CHn == 2)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d121      	bne.n	800191c <PWM_2kHz_init+0x20c>
		{
			TIMx->CCMR1 &= ~TIM_CCMR1_OC2M;                     // Clear ouput compare mode bits for channel 2
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	619a      	str	r2, [r3, #24]
			TIMx->CCMR1 |=  TIM_CCMR1_OC2M_1 |  TIM_CCMR1_OC2M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	619a      	str	r2, [r3, #24]
			TIMx->CCMR1	|=  TIM_CCMR1_OC2PE;                     // Output 1 preload enable (make CCR1 value changable)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	619a      	str	r2, [r3, #24]
			TIMx->CCR1   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
			TIMx->CCER  &= ~TIM_CCER_CC2P;                       // select output polarity: active high
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	f023 0220 	bic.w	r2, r3, #32
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	621a      	str	r2, [r3, #32]
			TIMx->CCER  |=  TIM_CCER_CC2E;															// Enable output for ch2
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	f043 0210 	orr.w	r2, r3, #16
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	621a      	str	r2, [r3, #32]
 800191a:	e048      	b.n	80019ae <PWM_2kHz_init+0x29e>
		}
		else if(CHn == 3)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d121      	bne.n	8001966 <PWM_2kHz_init+0x256>
		{
			TIMx->CCMR2 &= ~TIM_CCMR2_OC3M;                     // Clear ouput compare mode bits for channel 3
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	61da      	str	r2, [r3, #28]
			TIMx->CCMR2 |=  TIM_CCMR2_OC3M_1 |  TIM_CCMR2_OC3M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	61da      	str	r2, [r3, #28]
			TIMx->CCMR2	|=  TIM_CCMR2_OC3PE;                     // Output 1 preload enable (make CCR1 value changable)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f043 0208 	orr.w	r2, r3, #8
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	61da      	str	r2, [r3, #28]
			TIMx->CCR2   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
			TIMx->CCER  &= ~TIM_CCER_CC3P;                       // select output polarity: active high
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	621a      	str	r2, [r3, #32]
			TIMx->CCER  |=  TIM_CCER_CC3E;	                   				// select output polarity: active high
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	e023      	b.n	80019ae <PWM_2kHz_init+0x29e>
	                             													// Enable output for ch3
		}
		else if(CHn == 4)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b04      	cmp	r3, #4
 800196a:	d120      	bne.n	80019ae <PWM_2kHz_init+0x29e>
		{
			TIMx->CCMR2 &= ~TIM_CCMR2_OC4M;                     // Clear ouput compare mode bits for channel 3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	61da      	str	r2, [r3, #28]
			TIMx->CCMR2 |=  TIM_CCMR2_OC4M_1 |  TIM_CCMR2_OC4M_2;// OC1M = 110 for PWM Mode 1 output on ch1. #define TIM_CCMR1_OC1M_1          (0x2UL << TIM_CCMR1_OC1M_Pos)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	61da      	str	r2, [r3, #28]
			TIMx->CCMR2	|=  TIM_CCMR2_OC4PE;                     // Output 1 preload enable (make CCR1 value changable)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	61da      	str	r2, [r3, #28]
			TIMx->CCR2   =  ccVal; 																// Output Compare Register for channel 1 (default duty ratio = 50%)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
			TIMx->CCER  &= ~TIM_CCER_CC4P;                       // select output polarity: active high
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	621a      	str	r2, [r3, #32]
			TIMx->CCER  |=  TIM_CCER_CC4E;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	621a      	str	r2, [r3, #32]
}
	
// 5. Enable Timer Counter
	if(TIMx == TIM1) TIMx->BDTR |= TIM_BDTR_MOE;					// Main output enable (MOE): 0 = Disable, 1 = Enable	
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <PWM_2kHz_init+0x2c8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d105      	bne.n	80019c2 <PWM_2kHz_init+0x2b2>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
	TIMx->CR1  |= TIM_CR1_CEN;  													// Enable counter
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	601a      	str	r2, [r3, #0]
}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40000c00 	.word	0x40000c00
 80019e8:	40014000 	.word	0x40014000
 80019ec:	40014400 	.word	0x40014400
 80019f0:	40014800 	.word	0x40014800

080019f4 <PWM_period_us>:
	TIM_TypeDef *TIMx = pwm->timer;
	TIM_period_ms(TIMx, msec);
}

void PWM_period_us(PWM_t *pwm, uint32_t usec)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	TIM_TypeDef *TIMx = pwm->timer;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	60fb      	str	r3, [r7, #12]
	TIM_period_us(TIMx, usec);
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fafc 	bl	8002004 <TIM_period_us>
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <PWM_2kHz>:
/**
 * Only works for 96MHz PLL clock.
 */
void PWM_2kHz(PWM_t *pwm)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	TIM_TypeDef *TIMx = pwm->timer;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	60fb      	str	r3, [r7, #12]
	TIM_2kHz(TIMx);
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fab0 	bl	8001f88 <TIM_2kHz>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <PWM_pulsewidth_us>:
}



void PWM_pulsewidth_us(PWM_t *pwm, float pulse_width_us)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	ed87 0a00 	vstr	s0, [r7]
	TIM_TypeDef *TIMx = pwm->timer;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	61bb      	str	r3, [r7, #24]
	int CHn = pwm->ch;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	617b      	str	r3, [r7, #20]
	uint32_t fsys = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
	uint32_t psc=pwm->timer->PSC;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	613b      	str	r3, [r7, #16]
	
	// Check System CLK: PLL or HSI
	if((RCC->CFGR & (3<<0)) == 2)      { fsys = 96; }  // for msec 84MHz/1000
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <PWM_pulsewidth_us+0xd4>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d102      	bne.n	8001a66 <PWM_pulsewidth_us+0x36>
 8001a60:	2360      	movs	r3, #96	; 0x60
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	e007      	b.n	8001a76 <PWM_pulsewidth_us+0x46>
	else if((RCC->CFGR & (3<<0)) == 0) { fsys = 16; }
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <PWM_pulsewidth_us+0xd4>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <PWM_pulsewidth_us+0x46>
 8001a72:	2310      	movs	r3, #16
 8001a74:	61fb      	str	r3, [r7, #28]
	
	float fclk = fsys / (psc+1);					              // fclk=fsys/(psc+1);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a88:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t ccval = pulse_width_us *	fclk - 1.0;				// width_ms *fclk - 1;
 8001a8c:	ed97 7a00 	vldr	s14, [r7]
 8001a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7fe fd5c 	bl	8000558 <__aeabi_f2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <PWM_pulsewidth_us+0xd8>)
 8001aa6:	f7fe fbf7 	bl	8000298 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7ff f881 	bl	8000bb8 <__aeabi_d2uiz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	60bb      	str	r3, [r7, #8]
	
	switch(CHn)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d81a      	bhi.n	8001af8 <PWM_pulsewidth_us+0xc8>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <PWM_pulsewidth_us+0x98>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001ae1 	.word	0x08001ae1
 8001ad0:	08001ae9 	.word	0x08001ae9
 8001ad4:	08001af1 	.word	0x08001af1
	{
		case 1: TIMx->CCR1 = ccval; break;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ade:	e00c      	b.n	8001afa <PWM_pulsewidth_us+0xca>
		case 2: TIMx->CCR2 = ccval; break;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ae6:	e008      	b.n	8001afa <PWM_pulsewidth_us+0xca>
		case 3: TIMx->CCR3 = ccval; break;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aee:	e004      	b.n	8001afa <PWM_pulsewidth_us+0xca>
		case 4: TIMx->CCR4 = ccval; break;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
 8001af6:	e000      	b.n	8001afa <PWM_pulsewidth_us+0xca>
		default: break;
 8001af8:	bf00      	nop
	}
}
 8001afa:	bf00      	nop
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	3ff00000 	.word	0x3ff00000

08001b0c <PWM_2kHz_pulsewidth_us>:

/**
 * Only works for 96MHz PLL clock.
 */
void PWM_2kHz_pulsewidth_us(PWM_t *pwm, float pulse_width_us)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	ed87 0a00 	vstr	s0, [r7]
	TIM_TypeDef *TIMx = pwm->timer;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	617b      	str	r3, [r7, #20]
	int CHn = pwm->ch;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	613b      	str	r3, [r7, #16]


	uint32_t ccval = (uint32_t)pulse_width_us *	96 - 1;				// 96 = 48000 / 500 ,  ARR x Period
 8001b24:	edd7 7a00 	vldr	s15, [r7]
 8001b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2c:	ee17 2a90 	vmov	r2, s15
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]

	switch(CHn)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d81b      	bhi.n	8001b7c <PWM_2kHz_pulsewidth_us+0x70>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <PWM_2kHz_pulsewidth_us+0x40>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b65 	.word	0x08001b65
 8001b54:	08001b6d 	.word	0x08001b6d
 8001b58:	08001b75 	.word	0x08001b75
	{
		case 1: TIMx->CCR1 = ccval; break;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
 8001b62:	e00c      	b.n	8001b7e <PWM_2kHz_pulsewidth_us+0x72>
		case 2: TIMx->CCR2 = ccval; break;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
 8001b6a:	e008      	b.n	8001b7e <PWM_2kHz_pulsewidth_us+0x72>
		case 3: TIMx->CCR3 = ccval; break;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b72:	e004      	b.n	8001b7e <PWM_2kHz_pulsewidth_us+0x72>
		case 4: TIMx->CCR4 = ccval; break;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7a:	e000      	b.n	8001b7e <PWM_2kHz_pulsewidth_us+0x72>
		default: break;
 8001b7c:	bf00      	nop
	}
}
 8001b7e:	bf00      	nop
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop

08001b8c <PWM_pinmap>:
		}
}


// DO NOT MODIFY HERE
void PWM_pinmap(PWM_t *pwm){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
   GPIO_TypeDef *port = pwm->port;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
   int pin = pwm->pin;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60bb      	str	r3, [r7, #8]
   
   if(port == GPIOA) {
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	; (8001d98 <PWM_pinmap+0x20c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d163      	bne.n	8001c70 <PWM_pinmap+0xe4>
      switch(pin){
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	f200 80e6 	bhi.w	8001d7c <PWM_pinmap+0x1f0>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <PWM_pinmap+0x2c>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bf9 	.word	0x08001bf9
 8001bbc:	08001c09 	.word	0x08001c09
 8001bc0:	08001d7d 	.word	0x08001d7d
 8001bc4:	08001d7d 	.word	0x08001d7d
 8001bc8:	08001d7d 	.word	0x08001d7d
 8001bcc:	08001c19 	.word	0x08001c19
 8001bd0:	08001c29 	.word	0x08001c29
 8001bd4:	08001d7d 	.word	0x08001d7d
 8001bd8:	08001c37 	.word	0x08001c37
 8001bdc:	08001c45 	.word	0x08001c45
 8001be0:	08001c53 	.word	0x08001c53
 8001be4:	08001d7d 	.word	0x08001d7d
 8001be8:	08001d7d 	.word	0x08001d7d
 8001bec:	08001d7d 	.word	0x08001d7d
 8001bf0:	08001d7d 	.word	0x08001d7d
 8001bf4:	08001c61 	.word	0x08001c61
         case 0 : pwm->timer = TIM2; pwm->ch = 1; break;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	e0c0      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 1 : pwm->timer = TIM2; pwm->ch = 2; break;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	e0b8      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 5 : pwm->timer = TIM2; pwm->ch = 1; break;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	e0b0      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 6 : pwm->timer = TIM3; pwm->ch = 1; break;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a5c      	ldr	r2, [pc, #368]	; (8001d9c <PWM_pinmap+0x210>)
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	e0a9      	b.n	8001d8a <PWM_pinmap+0x1fe>
         //case 7: PWM_pin->timer = TIM1; PWM_pin->ch = 1N; break;
         case 8 : pwm->timer = TIM1; pwm->ch = 1; break;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a59      	ldr	r2, [pc, #356]	; (8001da0 <PWM_pinmap+0x214>)
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	e0a2      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 9 : pwm->timer = TIM1; pwm->ch = 2; break;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a56      	ldr	r2, [pc, #344]	; (8001da0 <PWM_pinmap+0x214>)
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	e09b      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 10: pwm->timer = TIM1; pwm->ch = 3; break;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <PWM_pinmap+0x214>)
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	e094      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 15: pwm->timer = TIM2; pwm->ch = 1; break;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	e08c      	b.n	8001d8a <PWM_pinmap+0x1fe>
         default: break;
      }         
   }
   else if(port == GPIOB) {
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <PWM_pinmap+0x218>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d151      	bne.n	8001d1c <PWM_pinmap+0x190>
      switch(pin){
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3b03      	subs	r3, #3
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	d87f      	bhi.n	8001d80 <PWM_pinmap+0x1f4>
 8001c80:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <PWM_pinmap+0xfc>)
 8001c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c86:	bf00      	nop
 8001c88:	08001ca9 	.word	0x08001ca9
 8001c8c:	08001cb9 	.word	0x08001cb9
 8001c90:	08001cc7 	.word	0x08001cc7
 8001c94:	08001cd5 	.word	0x08001cd5
 8001c98:	08001ce3 	.word	0x08001ce3
 8001c9c:	08001cf1 	.word	0x08001cf1
 8001ca0:	08001cff 	.word	0x08001cff
 8001ca4:	08001d0d 	.word	0x08001d0d
         //case 0: PWM_pin->timer = TIM1; PWM_pin->ch = 2N; break;
         //case 1: PWM_pin->timer = TIM1; PWM_pin->ch = 3N; break;
         case 3 : pwm->timer = TIM2; pwm->ch = 2; break;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	e068      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 4 : pwm->timer = TIM3; pwm->ch = 1; break;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a38      	ldr	r2, [pc, #224]	; (8001d9c <PWM_pinmap+0x210>)
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	e061      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 5 : pwm->timer = TIM3; pwm->ch = 2; break;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a34      	ldr	r2, [pc, #208]	; (8001d9c <PWM_pinmap+0x210>)
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	e05a      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 6 : pwm->timer = TIM4; pwm->ch = 1; break;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a34      	ldr	r2, [pc, #208]	; (8001da8 <PWM_pinmap+0x21c>)
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	e053      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 7 : pwm->timer = TIM4; pwm->ch = 2; break;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <PWM_pinmap+0x21c>)
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	e04c      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 8 : pwm->timer = TIM4; pwm->ch = 3; break;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <PWM_pinmap+0x21c>)
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	e045      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 9 : pwm->timer = TIM4; pwm->ch = 4; break;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <PWM_pinmap+0x21c>)
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2204      	movs	r2, #4
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	e03e      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 10: pwm->timer = TIM2; pwm->ch = 3; break;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2203      	movs	r2, #3
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	e036      	b.n	8001d8a <PWM_pinmap+0x1fe>
         
         default: break;
      }
   }
   else if(port == GPIOC) {
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a23      	ldr	r2, [pc, #140]	; (8001dac <PWM_pinmap+0x220>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d12f      	bne.n	8001d84 <PWM_pinmap+0x1f8>
      switch(pin){
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3b06      	subs	r3, #6
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d82d      	bhi.n	8001d88 <PWM_pinmap+0x1fc>
 8001d2c:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <PWM_pinmap+0x1a8>)
 8001d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d32:	bf00      	nop
 8001d34:	08001d45 	.word	0x08001d45
 8001d38:	08001d53 	.word	0x08001d53
 8001d3c:	08001d61 	.word	0x08001d61
 8001d40:	08001d6f 	.word	0x08001d6f
         case 6 : pwm->timer = TIM3; pwm->ch = 1; break;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <PWM_pinmap+0x210>)
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	e01b      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 7 : pwm->timer = TIM3; pwm->ch = 2; break;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <PWM_pinmap+0x210>)
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e014      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 8 : pwm->timer = TIM3; pwm->ch = 3; break;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <PWM_pinmap+0x210>)
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	e00d      	b.n	8001d8a <PWM_pinmap+0x1fe>
         case 9 : pwm->timer = TIM3; pwm->ch = 4; break;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <PWM_pinmap+0x210>)
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e006      	b.n	8001d8a <PWM_pinmap+0x1fe>
         default: break;
 8001d7c:	bf00      	nop
 8001d7e:	e004      	b.n	8001d8a <PWM_pinmap+0x1fe>
         default: break;
 8001d80:	bf00      	nop
 8001d82:	e002      	b.n	8001d8a <PWM_pinmap+0x1fe>
         
         default: break;
      }
   }
 8001d84:	bf00      	nop
 8001d86:	e000      	b.n	8001d8a <PWM_pinmap+0x1fe>
         default: break;
 8001d88:	bf00      	nop
	 // TIM5 needs to be added, if used.
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40020800 	.word	0x40020800

08001db0 <RCC_GPIOA_enable>:
}



void RCC_GPIOA_enable()
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
	// HSI is used as system clock         
	//RCC_HSI_init();
	
	// RCC Peripheral Clock Enable Register 
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <RCC_GPIOA_enable+0x1c>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <RCC_GPIOA_enable+0x1c>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <RCC_GPIOB_enable>:

void RCC_GPIOB_enable()
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	// HSI is used as system clock         
	//RCC_HSI_init();
	// RCC Peripheral Clock Enable Register 
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <RCC_GPIOB_enable+0x1c>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <RCC_GPIOB_enable+0x1c>)
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <RCC_GPIOC_enable>:

void RCC_GPIOC_enable()
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	// HSI is used as system clock         
	//RCC_HSI_init();
	// RCC Peripheral Clock Enable Register 
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <RCC_GPIOC_enable+0x1c>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <RCC_GPIOC_enable+0x1c>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <TIM_init>:
#include "ecTIM.h"
#include "ecGPIO.h"

/* Timer Configuration */

void TIM_init(TIM_TypeDef* TIMx, uint32_t msec){ 
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
	
// 1. Enable Timer CLOCK
	if     (TIMx ==TIM1) RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <TIM_init+0xcc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d106      	bne.n	8001ec0 <TIM_init+0x20>
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <TIM_init+0xd0>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a2e      	ldr	r2, [pc, #184]	; (8001f70 <TIM_init+0xd0>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	e040      	b.n	8001f42 <TIM_init+0xa2>
	else if(TIMx ==TIM2) RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec6:	d106      	bne.n	8001ed6 <TIM_init+0x36>
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <TIM_init+0xd0>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <TIM_init+0xd0>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed4:	e035      	b.n	8001f42 <TIM_init+0xa2>
	else if(TIMx ==TIM3) RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <TIM_init+0xd4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d106      	bne.n	8001eec <TIM_init+0x4c>
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <TIM_init+0xd0>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <TIM_init+0xd0>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	e02a      	b.n	8001f42 <TIM_init+0xa2>
	else if(TIMx ==TIM4)  RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <TIM_init+0xd8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d106      	bne.n	8001f02 <TIM_init+0x62>
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <TIM_init+0xd0>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <TIM_init+0xd0>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	e01f      	b.n	8001f42 <TIM_init+0xa2>
	else if(TIMx ==TIM5)  RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <TIM_init+0xdc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d106      	bne.n	8001f18 <TIM_init+0x78>
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <TIM_init+0xd0>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <TIM_init+0xd0>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	e014      	b.n	8001f42 <TIM_init+0xa2>
	else if(TIMx ==TIM9)  RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <TIM_init+0xe0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d106      	bne.n	8001f2e <TIM_init+0x8e>
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <TIM_init+0xd0>)
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <TIM_init+0xd0>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2c:	e009      	b.n	8001f42 <TIM_init+0xa2>
	else if(TIMx ==TIM11) RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <TIM_init+0xe4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d105      	bne.n	8001f42 <TIM_init+0xa2>
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <TIM_init+0xd0>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <TIM_init+0xd0>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44

	
	
// 2. Set CNT period
	TIM_period_ms(TIMx, msec); 
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f89d 	bl	8002084 <TIM_period_ms>
	
	
// 3. CNT Direction
	TIMx->CR1 |=    TIM_CR1_DIR;					// Upcounter	
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
	// timerx->CR1 |= TIM_CR1_DIR;				// Downcounter	
	
	
// 4. Enable Timer Counter
	TIMx->CR1 |= TIM_CR1_CEN;		
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40000c00 	.word	0x40000c00
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40014800 	.word	0x40014800

08001f88 <TIM_2kHz>:

/**
 * Only works for 96MHz PLL clock.
 */
void TIM_2kHz(TIM_TypeDef *TIMx)
	{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	// Period usec = 1 to 1000
	// 1us(1MHz, ARR=1) to 65msec (ARR=0xFFFF)
	uint32_t prescaler = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
	uint32_t ARRval_32 = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
	uint16_t ARRval_16 = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	81fb      	strh	r3, [r7, #14]

	// Check System CLK: PLL or HSI


	if     ((RCC->CFGR & (3<<0)) == 2)      { prescaler = 1; }
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <TIM_2kHz+0x74>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d101      	bne.n	8001fac <TIM_2kHz+0x24>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]


			if (TIMx== TIM2 || TIMx == TIM5)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d003      	beq.n	8001fbc <TIM_2kHz+0x34>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <TIM_2kHz+0x78>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d10b      	bne.n	8001fd4 <TIM_2kHz+0x4c>
			{
				ARRval_32 = 48000 ;
 8001fbc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001fc0:	613b      	str	r3, [r7, #16]
				TIMx->PSC = prescaler-1;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_32-1;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1e5a      	subs	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fd2:	e00c      	b.n	8001fee <TIM_2kHz+0x66>
			}

			else
			{
				ARRval_16 = (uint16_t)(48000) ;
 8001fd4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001fd8:	81fb      	strh	r3, [r7, #14]
				TIMx->PSC = prescaler-1;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_16-1;
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c

			}


}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40000c00 	.word	0x40000c00

08002004 <TIM_period_us>:

void TIM_period_us(TIM_TypeDef *TIMx, uint32_t usec)
	{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
	uint32_t prescaler;
	uint32_t ARRval_32;
	uint16_t ARRval_16;

	// Check System CLK: PLL or HSI
	if     ((RCC->CFGR & (3<<0)) == 2)      { prescaler = 96; }
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <TIM_period_us+0x78>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d102      	bne.n	8002020 <TIM_period_us+0x1c>
 800201a:	2360      	movs	r3, #96	; 0x60
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e007      	b.n	8002030 <TIM_period_us+0x2c>
	else if((RCC->CFGR & (3<<0)) == 0)      { prescaler = 16; }
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <TIM_period_us+0x78>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <TIM_period_us+0x2c>
 800202c:	2310      	movs	r3, #16
 800202e:	617b      	str	r3, [r7, #20]

			if (TIMx== TIM2 || TIMx == TIM5)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d003      	beq.n	8002040 <TIM_period_us+0x3c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <TIM_period_us+0x7c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d10a      	bne.n	8002056 <TIM_period_us+0x52>
			{
				ARRval_32 = usec ;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	60fb      	str	r3, [r7, #12]
				TIMx->PSC = prescaler-1;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_32-1;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e5a      	subs	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
 8002054:	e00b      	b.n	800206e <TIM_period_us+0x6a>
			}

			else
			{
				ARRval_16 = (uint16_t)( usec) ;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	827b      	strh	r3, [r7, #18]
				TIMx->PSC = prescaler-1;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	1e5a      	subs	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_16-1;
 8002062:	8a7b      	ldrh	r3, [r7, #18]
 8002064:	3b01      	subs	r3, #1
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c

			}


}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	40000c00 	.word	0x40000c00

08002084 <TIM_period_ms>:




void TIM_period_ms(TIM_TypeDef* TIMx, uint32_t msec){ 
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	uint32_t ARRval_32;
	uint16_t ARRval_16;
	

	// Check System CLK: PLL or HSI
	if((RCC->CFGR & (3<<0)) == 2)      { prescaler = 9600; }  // for msec 84MHz/1000
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <TIM_period_ms+0x90>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d103      	bne.n	80020a2 <TIM_period_ms+0x1e>
 800209a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800209e:	81fb      	strh	r3, [r7, #14]
 80020a0:	e008      	b.n	80020b4 <TIM_period_ms+0x30>
	else if((RCC->CFGR & (3<<0)) == 0) { prescaler = 1600; }
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <TIM_period_ms+0x90>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <TIM_period_ms+0x30>
 80020ae:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80020b2:	81fb      	strh	r3, [r7, #14]

	
	
  //	uint32_t prescaler = 8400;
	
			if (TIMx== TIM2 || TIMx == TIM5) 
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d003      	beq.n	80020c4 <TIM_period_ms+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <TIM_period_ms+0x94>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d10f      	bne.n	80020e4 <TIM_period_ms+0x60>
			{
				ARRval_32 = 10 * msec ;
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
				TIMx->PSC = prescaler-1;					
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	461a      	mov	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_32-1;	
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020e2:	e011      	b.n	8002108 <TIM_period_ms+0x84>
			}
			
			else
			{
				ARRval_16 = (uint16_t)(10 * msec) ;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	81bb      	strh	r3, [r7, #12]
				TIMx->PSC = prescaler-1;					
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
				TIMx->ARR = ARRval_16-1;	
 80020fc:	89bb      	ldrh	r3, [r7, #12]
 80020fe:	3b01      	subs	r3, #1
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
			}
	
	
		

}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40023800 	.word	0x40023800
 8002118:	40000c00 	.word	0x40000c00

0800211c <TIM_INT_init>:
// Update Event Interrupt
void TIM_INT_init(TIM_TypeDef* TIMx, uint32_t msec){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
// 1. Initialize Timer	
	TIM_init(TIMx,msec);
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff feb9 	bl	8001ea0 <TIM_init>
	
// 2. Enable Update Interrupt
	TIM_INT_enable(TIMx);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f84e 	bl	80021d0 <TIM_INT_enable>
	
// 3. NVIC Setting
	uint32_t IRQn_reg =0;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
	if     (TIMx == TIM1)       IRQn_reg = TIM1_UP_TIM10_IRQn;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <TIM_INT_init+0x9c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d102      	bne.n	8002146 <TIM_INT_init+0x2a>
 8002140:	2319      	movs	r3, #25
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e028      	b.n	8002198 <TIM_INT_init+0x7c>
	else if(TIMx == TIM2)       IRQn_reg = TIM2_IRQn;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d102      	bne.n	8002154 <TIM_INT_init+0x38>
 800214e:	231c      	movs	r3, #28
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e021      	b.n	8002198 <TIM_INT_init+0x7c>
	else if(TIMx == TIM3)       IRQn_reg = TIM3_IRQn;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <TIM_INT_init+0xa0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <TIM_INT_init+0x46>
 800215c:	231d      	movs	r3, #29
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e01a      	b.n	8002198 <TIM_INT_init+0x7c>
	else if(TIMx ==TIM4)   			IRQn_reg = TIM4_IRQn;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <TIM_INT_init+0xa4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d102      	bne.n	8002170 <TIM_INT_init+0x54>
 800216a:	231e      	movs	r3, #30
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e013      	b.n	8002198 <TIM_INT_init+0x7c>
	else if(TIMx ==TIM5)   			IRQn_reg = TIM5_IRQn;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <TIM_INT_init+0xa8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d102      	bne.n	800217e <TIM_INT_init+0x62>
 8002178:	2332      	movs	r3, #50	; 0x32
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e00c      	b.n	8002198 <TIM_INT_init+0x7c>
	else if(TIMx ==TIM9)   			IRQn_reg = TIM1_BRK_TIM9_IRQn;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <TIM_INT_init+0xac>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d102      	bne.n	800218c <TIM_INT_init+0x70>
 8002186:	2318      	movs	r3, #24
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e005      	b.n	8002198 <TIM_INT_init+0x7c>
	else if(TIMx ==TIM11)  			IRQn_reg = TIM1_TRG_COM_TIM11_IRQn;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <TIM_INT_init+0xb0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <TIM_INT_init+0x7c>
 8002194:	231a      	movs	r3, #26
 8002196:	60fb      	str	r3, [r7, #12]
	
				
	NVIC_SetPriority(IRQn_reg,2);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	b25b      	sxtb	r3, r3
 800219c:	2102      	movs	r1, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe54 	bl	8001e4c <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQn_reg);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fe31 	bl	8001e10 <__NVIC_EnableIRQ>
	
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40014000 	.word	0x40014000
 80021cc:	40014800 	.word	0x40014800

080021d0 <TIM_INT_enable>:



void TIM_INT_enable(TIM_TypeDef* TIMx){
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	TIMx->DIER |=   TIM_DIER_UIE;			// Enable Timer Update Interrupt		
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60da      	str	r2, [r3, #12]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <is_UIF>:

void TIM_INT_disable(TIM_TypeDef* TIMx){
	TIMx->DIER &= ~(TIM_DIER_UIE);				// Disable Timer Update Interrupt		
}

uint32_t is_UIF(TIM_TypeDef *TIMx){
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	return TIMx->SR & TIM_DIER_UIE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f003 0301 	and.w	r3, r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <clear_UIF>:

void clear_UIF(TIM_TypeDef *TIMx){
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	TIMx->SR &= ~TIM_DIER_UIE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f023 0201 	bic.w	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	611a      	str	r2, [r3, #16]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_GPIO_ResetOutputPin>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002258:	4907      	ldr	r1, [pc, #28]	; (8002278 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4313      	orrs	r3, r2
 800225e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4013      	ands	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40023800 	.word	0x40023800

0800227c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002282:	463b      	mov	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002292:	2080      	movs	r0, #128	; 0x80
 8002294:	f7ff ffda 	bl	800224c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff ffd7 	bl	800224c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GYRO_CS_Pin|LEDpin_Pin);
 800229e:	f44f 7188 	mov.w	r1, #272	; 0x110
 80022a2:	4811      	ldr	r0, [pc, #68]	; (80022e8 <MX_GPIO_Init+0x6c>)
 80022a4:	f7ff ffc2 	bl	800222c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 80022a8:	2302      	movs	r3, #2
 80022aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 80022b4:	463b      	mov	r3, r7
 80022b6:	4619      	mov	r1, r3
 80022b8:	480b      	ldr	r0, [pc, #44]	; (80022e8 <MX_GPIO_Init+0x6c>)
 80022ba:	f003 f99a 	bl	80055f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GYRO_CS_Pin|LEDpin_Pin;
 80022be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80022c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80022c4:	2301      	movs	r3, #1
 80022c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	463b      	mov	r3, r7
 80022d6:	4619      	mov	r1, r3
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <MX_GPIO_Init+0x6c>)
 80022da:	f003 f98a 	bl	80055f2 <LL_GPIO_Init>

}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020000 	.word	0x40020000

080022ec <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	330c      	adds	r3, #12
 80022f8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	60bb      	str	r3, [r7, #8]
   return(result);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f043 0320 	orr.w	r3, r3, #32
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	330c      	adds	r3, #12
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	61ba      	str	r2, [r7, #24]
 8002312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002314:	6979      	ldr	r1, [r7, #20]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	e841 2300 	strex	r3, r2, [r1]
 800231c:	613b      	str	r3, [r7, #16]
   return(result);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e7      	bne.n	80022f4 <LL_USART_EnableIT_RXNE+0x8>
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	605a      	str	r2, [r3, #4]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	4013      	ands	r3, r2
 8002366:	041a      	lsls	r2, r3, #16
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43d9      	mvns	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	400b      	ands	r3, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <_write>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// To use UART printf() Function
int _write(int file, char *p, int len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]

    for(int i = 0; i < len; ++i)
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e00d      	b.n	80023b2 <_write+0x2e>
    {
    	LL_USART_TransmitData8(USART1, *(p+i));  //send data to usart1
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	4808      	ldr	r0, [pc, #32]	; (80023c4 <_write+0x40>)
 80023a2:	f7ff ffc6 	bl	8002332 <LL_USART_TransmitData8>
    	LL_mDelay(1);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f003 fe10 	bl	8005fcc <LL_mDelay>
    for(int i = 0; i < len; ++i)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3301      	adds	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	dbed      	blt.n	8002396 <_write+0x12>
    }

    return len;
 80023ba:	687b      	ldr	r3, [r7, #4]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40011000 	.word	0x40011000

080023c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ce:	f002 fa2b 	bl	8004828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d2:	f001 f8f1 	bl	80035b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  motor_setup();
 80023d6:	f001 f957 	bl	8003688 <motor_setup>

  TIM_INT_init(TIM2, 1);
 80023da:	2101      	movs	r1, #1
 80023dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023e0:	f7ff fe9c 	bl	800211c <TIM_INT_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e4:	f7ff ff4a 	bl	800227c <MX_GPIO_Init>
  MX_SPI1_Init();
 80023e8:	f001 fad6 	bl	8003998 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80023ec:	f002 f932 	bl	8004654 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80023f0:	f002 f990 	bl	8004714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Waiting for Pin Initialization...\n\r");
 80023f4:	4848      	ldr	r0, [pc, #288]	; (8002518 <main+0x150>)
 80023f6:	f004 fab9 	bl	800696c <iprintf>
  LL_mDelay(2000);
 80023fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023fe:	f003 fde5 	bl	8005fcc <LL_mDelay>

  ICM20602_Initialization();
 8002402:	f7fe fee5 	bl	80011d0 <ICM20602_Initialization>


  LL_USART_EnableIT_RXNE(USART2);
 8002406:	4845      	ldr	r0, [pc, #276]	; (800251c <main+0x154>)
 8002408:	f7ff ff70 	bl	80022ec <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART1);  //USART bluetooth or usb cabe intterupt enable
 800240c:	4844      	ldr	r0, [pc, #272]	; (8002520 <main+0x158>)
 800240e:	f7ff ff6d 	bl	80022ec <LL_USART_EnableIT_RXNE>



  printf("USART2 pin for SUMD Interrupt enabled\n\r");
 8002412:	4844      	ldr	r0, [pc, #272]	; (8002524 <main+0x15c>)
 8002414:	f004 faaa 	bl	800696c <iprintf>


	  /*===============================================================*/
	  /*                    1kHz Control loop Part                     */
	  /*===============================================================*/
	  if((tim2_1ms_flag == 1) && (IsGyroCalibrated()==1))
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <main+0x160>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	f040 84f4 	bne.w	8002e0a <main+0xa42>
 8002422:	f001 f9d5 	bl	80037d0 <IsGyroCalibrated>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 84ee 	bne.w	8002e0a <main+0xa42>
	  {
		  LL_GPIO_TogglePin(LEDpin_GPIO_Port, LEDpin_Pin);
 800242e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002432:	483e      	ldr	r0, [pc, #248]	; (800252c <main+0x164>)
 8002434:	f7ff ff8c 	bl	8002350 <LL_GPIO_TogglePin>
		  tim2_1ms_flag = 0;
 8002438:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <main+0x160>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
		  //PITCH PID CONTROL
		  pitch_ref		   		 = (oneShot125[2] - stick_offset_us)*0.8f;// -50 ~ 50 deg
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <main+0x168>)
 8002440:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002444:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <main+0x16c>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fd ff25 	bl	8000298 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	a32c      	add	r3, pc, #176	; (adr r3, 8002508 <main+0x140>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8d4 	bl	8000608 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4934      	ldr	r1, [pc, #208]	; (8002538 <main+0x170>)
 8002466:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_error 	   		 = pitch_ref - ICM20602.angle_pitch;
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <main+0x170>)
 800246c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <main+0x174>)
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f86f 	bl	8000558 <__aeabi_f2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fd ff09 	bl	8000298 <__aeabi_dsub>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	492d      	ldr	r1, [pc, #180]	; (8002540 <main+0x178>)
 800248c:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_error_sum 		+= pitch_error * 0.001;
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <main+0x178>)
 8002492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002496:	a31e      	add	r3, pc, #120	; (adr r3, 8002510 <main+0x148>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe f8b4 	bl	8000608 <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <main+0x17c>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fd fef5 	bl	800029c <__adddf3>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4923      	ldr	r1, [pc, #140]	; (8002544 <main+0x17c>)
 80024b8:	e9c1 2300 	strd	r2, r3, [r1]
		  if (sumd_ch.ch1< 8725 || arm_flag == 0) pitch_error_sum = 0.0;
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <main+0x180>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	f242 2214 	movw	r2, #8724	; 0x2214
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d903      	bls.n	80024d0 <main+0x108>
 80024c8:	4b20      	ldr	r3, [pc, #128]	; (800254c <main+0x184>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <main+0x116>
 80024d0:	491c      	ldr	r1, [pc, #112]	; (8002544 <main+0x17c>)
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9c1 2300 	strd	r2, r3, [r1]
		  (pitch_error_sum  >  50.0) ? (pitch_error_sum=  50.0) :
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <main+0x17c>)
 80024e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <main+0x188>)
 80024ea:	f7fe fb1d 	bl	8000b28 <__aeabi_dcmpgt>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02f      	beq.n	8002554 <main+0x18c>
 80024f4:	4913      	ldr	r1, [pc, #76]	; (8002544 <main+0x17c>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <main+0x188>)
 80024fc:	e9c1 2300 	strd	r2, r3, [r1]
 8002500:	e039      	b.n	8002576 <main+0x1ae>
 8002502:	bf00      	nop
 8002504:	f3af 8000 	nop.w
 8002508:	a0000000 	.word	0xa0000000
 800250c:	3fe99999 	.word	0x3fe99999
 8002510:	d2f1a9fc 	.word	0xd2f1a9fc
 8002514:	3f50624d 	.word	0x3f50624d
 8002518:	0800a258 	.word	0x0800a258
 800251c:	40004400 	.word	0x40004400
 8002520:	40011000 	.word	0x40011000
 8002524:	0800a27c 	.word	0x0800a27c
 8002528:	20000562 	.word	0x20000562
 800252c:	40020000 	.word	0x40020000
 8002530:	200004b0 	.word	0x200004b0
 8002534:	20000070 	.word	0x20000070
 8002538:	200002f8 	.word	0x200002f8
 800253c:	20000294 	.word	0x20000294
 8002540:	20000318 	.word	0x20000318
 8002544:	20000320 	.word	0x20000320
 8002548:	20000564 	.word	0x20000564
 800254c:	20000534 	.word	0x20000534
 8002550:	40490000 	.word	0x40490000
		  (pitch_error_sum  < -50.0) ? (pitch_error_sum= -50.0) :0 ;
 8002554:	4ba2      	ldr	r3, [pc, #648]	; (80027e0 <main+0x418>)
 8002556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4ba1      	ldr	r3, [pc, #644]	; (80027e4 <main+0x41c>)
 8002560:	f7fe fac4 	bl	8000aec <__aeabi_dcmplt>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <main+0x1ae>
 800256a:	499d      	ldr	r1, [pc, #628]	; (80027e0 <main+0x418>)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <main+0x41c>)
 8002572:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_error_derivative = ICM20602.gyro_x;
 8002576:	4b9c      	ldr	r3, [pc, #624]	; (80027e8 <main+0x420>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd ffec 	bl	8000558 <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4999      	ldr	r1, [pc, #612]	; (80027ec <main+0x424>)
 8002586:	e9c1 2300 	strd	r2, r3, [r1]

		  pitch_p 		   		 = p_gain_pitch * pitch_error;
 800258a:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <main+0x428>)
 800258c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002590:	4b98      	ldr	r3, [pc, #608]	; (80027f4 <main+0x42c>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fe f837 	bl	8000608 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4996      	ldr	r1, [pc, #600]	; (80027f8 <main+0x430>)
 80025a0:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_i          		 = i_gain_pitch * pitch_error_sum;
 80025a4:	4b95      	ldr	r3, [pc, #596]	; (80027fc <main+0x434>)
 80025a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025aa:	4b8d      	ldr	r3, [pc, #564]	; (80027e0 <main+0x418>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f82a 	bl	8000608 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4991      	ldr	r1, [pc, #580]	; (8002800 <main+0x438>)
 80025ba:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_d 			     = d_gain_pitch * pitch_error_derivative;
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <main+0x43c>)
 80025c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c4:	4b89      	ldr	r3, [pc, #548]	; (80027ec <main+0x424>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f81d 	bl	8000608 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	498d      	ldr	r1, [pc, #564]	; (8002808 <main+0x440>)
 80025d4:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_pid 			 = pitch_p + pitch_i + pitch_d;
 80025d8:	4b87      	ldr	r3, [pc, #540]	; (80027f8 <main+0x430>)
 80025da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025de:	4b88      	ldr	r3, [pc, #544]	; (8002800 <main+0x438>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fd fe5a 	bl	800029c <__adddf3>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	4b85      	ldr	r3, [pc, #532]	; (8002808 <main+0x440>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd fe51 	bl	800029c <__adddf3>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4983      	ldr	r1, [pc, #524]	; (800280c <main+0x444>)
 8002600:	e9c1 2300 	strd	r2, r3, [r1]


		  //PITCH RATE PID CONTROLL
		  pitch_rate_ref = pitch_pid;
 8002604:	4b81      	ldr	r3, [pc, #516]	; (800280c <main+0x444>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	4981      	ldr	r1, [pc, #516]	; (8002810 <main+0x448>)
 800260c:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_rate_error = pitch_rate_ref-ICM20602.gyro_x;
 8002610:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <main+0x448>)
 8002612:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002616:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <main+0x420>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff9c 	bl	8000558 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fd fe36 	bl	8000298 <__aeabi_dsub>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4978      	ldr	r1, [pc, #480]	; (8002814 <main+0x44c>)
 8002632:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_rate_error_sum += pitch_rate_error*0.001;
 8002636:	4b77      	ldr	r3, [pc, #476]	; (8002814 <main+0x44c>)
 8002638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263c:	a364      	add	r3, pc, #400	; (adr r3, 80027d0 <main+0x408>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd ffe1 	bl	8000608 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	4b72      	ldr	r3, [pc, #456]	; (8002818 <main+0x450>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd fe22 	bl	800029c <__adddf3>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	496e      	ldr	r1, [pc, #440]	; (8002818 <main+0x450>)
 800265e:	e9c1 2300 	strd	r2, r3, [r1]
		  if (sumd_ch.ch1<8725 || arm_flag == 0)     pitch_rate_error_sum = 0.0;
 8002662:	4b6e      	ldr	r3, [pc, #440]	; (800281c <main+0x454>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	f242 2214 	movw	r2, #8724	; 0x2214
 800266a:	4293      	cmp	r3, r2
 800266c:	d903      	bls.n	8002676 <main+0x2ae>
 800266e:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <main+0x458>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <main+0x2bc>
 8002676:	4968      	ldr	r1, [pc, #416]	; (8002818 <main+0x450>)
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9c1 2300 	strd	r2, r3, [r1]
		  //(pitch_rate_error_sum  >  50.0) ? (pitch_rate_error_sum= 50.0) :
		  //(pitch_rate_error_sum  < -50.0) ? (pitch_rate_error_sum=-50.0) : 0;
		  pitch_rate_error_derivative = (ICM20602.gyro_x - ICM20602gyro_x_prev)/0.001;
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <main+0x420>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff65 	bl	8000558 <__aeabi_f2d>
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <main+0x45c>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd fe00 	bl	8000298 <__aeabi_dsub>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	a34b      	add	r3, pc, #300	; (adr r3, 80027d0 <main+0x408>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fe f8d9 	bl	800085c <__aeabi_ddiv>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	495e      	ldr	r1, [pc, #376]	; (8002828 <main+0x460>)
 80026b0:	e9c1 2300 	strd	r2, r3, [r1]
		  ICM20602gyro_x_prev = ICM20602.gyro_x;
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <main+0x420>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff4d 	bl	8000558 <__aeabi_f2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4958      	ldr	r1, [pc, #352]	; (8002824 <main+0x45c>)
 80026c4:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_rate_p = pitch_rate_Kp * pitch_rate_error;
 80026c8:	4b58      	ldr	r3, [pc, #352]	; (800282c <main+0x464>)
 80026ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <main+0x44c>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	f7fd ff98 	bl	8000608 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4954      	ldr	r1, [pc, #336]	; (8002830 <main+0x468>)
 80026de:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_rate_i = pitch_rate_Ki * pitch_rate_error_sum;
 80026e2:	4b54      	ldr	r3, [pc, #336]	; (8002834 <main+0x46c>)
 80026e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <main+0x450>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ff8b 	bl	8000608 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4950      	ldr	r1, [pc, #320]	; (8002838 <main+0x470>)
 80026f8:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_rate_i = pitch_rate_Kd * pitch_rate_error_derivative;
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <main+0x474>)
 80026fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <main+0x460>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd ff7e 	bl	8000608 <__aeabi_dmul>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4949      	ldr	r1, [pc, #292]	; (8002838 <main+0x470>)
 8002712:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_rate_pid = pitch_rate_p + pitch_rate_i + pitch_rate_d;
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <main+0x468>)
 8002718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271c:	4b46      	ldr	r3, [pc, #280]	; (8002838 <main+0x470>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fd fdbb 	bl	800029c <__adddf3>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <main+0x478>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fdb2 	bl	800029c <__adddf3>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4941      	ldr	r1, [pc, #260]	; (8002844 <main+0x47c>)
 800273e:	e9c1 2300 	strd	r2, r3, [r1]


		  //ROLL PID CONTROLL
		  roll_ref		   		 = (oneShot125[1] - stick_offset_us) * 0.8f;// -50 ~ 50 deg
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <main+0x480>)
 8002744:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002748:	4b40      	ldr	r3, [pc, #256]	; (800284c <main+0x484>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd fda3 	bl	8000298 <__aeabi_dsub>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	a31f      	add	r3, pc, #124	; (adr r3, 80027d8 <main+0x410>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd ff52 	bl	8000608 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4939      	ldr	r1, [pc, #228]	; (8002850 <main+0x488>)
 800276a:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_error 	   		 = roll_ref 	  - ICM20602.angle_roll;
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <main+0x488>)
 8002770:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <main+0x420>)
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd feed 	bl	8000558 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fd fd87 	bl	8000298 <__aeabi_dsub>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4931      	ldr	r1, [pc, #196]	; (8002854 <main+0x48c>)
 8002790:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_error_sum 		+= roll_error     * 0.001;
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <main+0x48c>)
 8002796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800279a:	a30d      	add	r3, pc, #52	; (adr r3, 80027d0 <main+0x408>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd ff32 	bl	8000608 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <main+0x490>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fd73 	bl	800029c <__adddf3>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4927      	ldr	r1, [pc, #156]	; (8002858 <main+0x490>)
 80027bc:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_error_derivative  = ICM20602.gyro_y;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <main+0x420>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fec7 	bl	8000558 <__aeabi_f2d>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	e045      	b.n	800285c <main+0x494>
 80027d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027d4:	3f50624d 	.word	0x3f50624d
 80027d8:	a0000000 	.word	0xa0000000
 80027dc:	3fe99999 	.word	0x3fe99999
 80027e0:	20000320 	.word	0x20000320
 80027e4:	c0490000 	.word	0xc0490000
 80027e8:	20000294 	.word	0x20000294
 80027ec:	20000328 	.word	0x20000328
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000318 	.word	0x20000318
 80027f8:	20000300 	.word	0x20000300
 80027fc:	20000018 	.word	0x20000018
 8002800:	20000308 	.word	0x20000308
 8002804:	20000028 	.word	0x20000028
 8002808:	20000310 	.word	0x20000310
 800280c:	20000330 	.word	0x20000330
 8002810:	20000338 	.word	0x20000338
 8002814:	20000358 	.word	0x20000358
 8002818:	20000360 	.word	0x20000360
 800281c:	20000564 	.word	0x20000564
 8002820:	20000534 	.word	0x20000534
 8002824:	20000438 	.word	0x20000438
 8002828:	20000368 	.word	0x20000368
 800282c:	20000030 	.word	0x20000030
 8002830:	20000340 	.word	0x20000340
 8002834:	20000048 	.word	0x20000048
 8002838:	20000348 	.word	0x20000348
 800283c:	20000058 	.word	0x20000058
 8002840:	20000350 	.word	0x20000350
 8002844:	20000370 	.word	0x20000370
 8002848:	200004b0 	.word	0x200004b0
 800284c:	20000070 	.word	0x20000070
 8002850:	20000378 	.word	0x20000378
 8002854:	20000398 	.word	0x20000398
 8002858:	200003a0 	.word	0x200003a0
 800285c:	4912      	ldr	r1, [pc, #72]	; (80028a8 <main+0x4e0>)
 800285e:	e9c1 2300 	strd	r2, r3, [r1]
		  if (sumd_ch.ch1<8725 || arm_flag == 0)     roll_error_sum = 0.0;
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <main+0x4e4>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f242 2214 	movw	r2, #8724	; 0x2214
 800286a:	4293      	cmp	r3, r2
 800286c:	d903      	bls.n	8002876 <main+0x4ae>
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <main+0x4e8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <main+0x4bc>
 8002876:	490f      	ldr	r1, [pc, #60]	; (80028b4 <main+0x4ec>)
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9c1 2300 	strd	r2, r3, [r1]
		  (roll_error_sum  >  50.0) ? (roll_error_sum= 50.0) :
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <main+0x4ec>)
 8002886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <main+0x4f0>)
 8002890:	f7fe f94a 	bl	8000b28 <__aeabi_dcmpgt>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <main+0x4f4>
 800289a:	4906      	ldr	r1, [pc, #24]	; (80028b4 <main+0x4ec>)
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <main+0x4f0>)
 80028a2:	e9c1 2300 	strd	r2, r3, [r1]
 80028a6:	e01a      	b.n	80028de <main+0x516>
 80028a8:	200003a8 	.word	0x200003a8
 80028ac:	20000564 	.word	0x20000564
 80028b0:	20000534 	.word	0x20000534
 80028b4:	200003a0 	.word	0x200003a0
 80028b8:	40490000 	.word	0x40490000
		  (roll_error_sum  < -50.0) ? (roll_error_sum=-50.0) : 0;
 80028bc:	4ba2      	ldr	r3, [pc, #648]	; (8002b48 <main+0x780>)
 80028be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	4ba1      	ldr	r3, [pc, #644]	; (8002b4c <main+0x784>)
 80028c8:	f7fe f910 	bl	8000aec <__aeabi_dcmplt>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <main+0x516>
 80028d2:	499d      	ldr	r1, [pc, #628]	; (8002b48 <main+0x780>)
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	4b9c      	ldr	r3, [pc, #624]	; (8002b4c <main+0x784>)
 80028da:	e9c1 2300 	strd	r2, r3, [r1]

		  roll_p 		   		 = p_gain_roll    * roll_error;
 80028de:	4b9c      	ldr	r3, [pc, #624]	; (8002b50 <main+0x788>)
 80028e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e4:	4b9b      	ldr	r3, [pc, #620]	; (8002b54 <main+0x78c>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	f7fd fe8d 	bl	8000608 <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4999      	ldr	r1, [pc, #612]	; (8002b58 <main+0x790>)
 80028f4:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_i          		 = i_gain_roll    * roll_error_sum;
 80028f8:	4b98      	ldr	r3, [pc, #608]	; (8002b5c <main+0x794>)
 80028fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028fe:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <main+0x780>)
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f7fd fe80 	bl	8000608 <__aeabi_dmul>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4994      	ldr	r1, [pc, #592]	; (8002b60 <main+0x798>)
 800290e:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_d 			     = d_gain_roll    * roll_error_derivative;
 8002912:	4b94      	ldr	r3, [pc, #592]	; (8002b64 <main+0x79c>)
 8002914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002918:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <main+0x7a0>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fd fe73 	bl	8000608 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4991      	ldr	r1, [pc, #580]	; (8002b6c <main+0x7a4>)
 8002928:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_pid 			     = roll_p + roll_i + roll_d;
 800292c:	4b8a      	ldr	r3, [pc, #552]	; (8002b58 <main+0x790>)
 800292e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002932:	4b8b      	ldr	r3, [pc, #556]	; (8002b60 <main+0x798>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fcb0 	bl	800029c <__adddf3>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	4b89      	ldr	r3, [pc, #548]	; (8002b6c <main+0x7a4>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd fca7 	bl	800029c <__adddf3>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4987      	ldr	r1, [pc, #540]	; (8002b70 <main+0x7a8>)
 8002954:	e9c1 2300 	strd	r2, r3, [r1]

		  //ROLL RATE PID CONTROLL
		  roll_rate_ref = roll_pid;
 8002958:	4b85      	ldr	r3, [pc, #532]	; (8002b70 <main+0x7a8>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	4985      	ldr	r1, [pc, #532]	; (8002b74 <main+0x7ac>)
 8002960:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_rate_error = roll_rate_ref-ICM20602.gyro_y;
 8002964:	4b83      	ldr	r3, [pc, #524]	; (8002b74 <main+0x7ac>)
 8002966:	e9d3 4500 	ldrd	r4, r5, [r3]
 800296a:	4b83      	ldr	r3, [pc, #524]	; (8002b78 <main+0x7b0>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fdf2 	bl	8000558 <__aeabi_f2d>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f7fd fc8c 	bl	8000298 <__aeabi_dsub>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	497d      	ldr	r1, [pc, #500]	; (8002b7c <main+0x7b4>)
 8002986:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_rate_error_sum += roll_rate_error*0.001;
 800298a:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <main+0x7b4>)
 800298c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002990:	a36b      	add	r3, pc, #428	; (adr r3, 8002b40 <main+0x778>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fe37 	bl	8000608 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	4b77      	ldr	r3, [pc, #476]	; (8002b80 <main+0x7b8>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fc78 	bl	800029c <__adddf3>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4973      	ldr	r1, [pc, #460]	; (8002b80 <main+0x7b8>)
 80029b2:	e9c1 2300 	strd	r2, r3, [r1]
		  if (sumd_ch.ch1<8725 || arm_flag == 0)     roll_rate_error_sum = 0.0;
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <main+0x7bc>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	f242 2214 	movw	r2, #8724	; 0x2214
 80029be:	4293      	cmp	r3, r2
 80029c0:	d903      	bls.n	80029ca <main+0x602>
 80029c2:	4b71      	ldr	r3, [pc, #452]	; (8002b88 <main+0x7c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <main+0x610>
 80029ca:	496d      	ldr	r1, [pc, #436]	; (8002b80 <main+0x7b8>)
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9c1 2300 	strd	r2, r3, [r1]
		  //(roll_rate_error_sum  >  50.0) ? (roll_rate_error_sum= 50.0) :
		  //(roll_rate_error_sum  < -50.0) ? (roll_rate_error_sum=-50.0) : 0;
		  roll_rate_error_derivative = (ICM20602.gyro_y - ICM20602gyro_y_prev)/0.001;
 80029d8:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <main+0x7b0>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fdbb 	bl	8000558 <__aeabi_f2d>
 80029e2:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <main+0x7c4>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fc56 	bl	8000298 <__aeabi_dsub>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	a352      	add	r3, pc, #328	; (adr r3, 8002b40 <main+0x778>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	f7fd ff2f 	bl	800085c <__aeabi_ddiv>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4963      	ldr	r1, [pc, #396]	; (8002b90 <main+0x7c8>)
 8002a04:	e9c1 2300 	strd	r2, r3, [r1]
		  ICM20602gyro_y_prev=ICM20602.gyro_y;
 8002a08:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <main+0x7b0>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fda3 	bl	8000558 <__aeabi_f2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	495d      	ldr	r1, [pc, #372]	; (8002b8c <main+0x7c4>)
 8002a18:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_rate_p = roll_rate_Kp * roll_rate_error;
 8002a1c:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <main+0x7cc>)
 8002a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <main+0x7b4>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fdee 	bl	8000608 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4959      	ldr	r1, [pc, #356]	; (8002b98 <main+0x7d0>)
 8002a32:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_rate_i = roll_rate_Ki * roll_rate_error_sum;
 8002a36:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <main+0x7d4>)
 8002a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <main+0x7b8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fde1 	bl	8000608 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4955      	ldr	r1, [pc, #340]	; (8002ba0 <main+0x7d8>)
 8002a4c:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_rate_d = roll_rate_Kd * roll_rate_error_derivative;
 8002a50:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <main+0x7dc>)
 8002a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a56:	4b4e      	ldr	r3, [pc, #312]	; (8002b90 <main+0x7c8>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fdd4 	bl	8000608 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4950      	ldr	r1, [pc, #320]	; (8002ba8 <main+0x7e0>)
 8002a66:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_rate_pid = roll_rate_p + roll_rate_i + roll_rate_d;
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <main+0x7d0>)
 8002a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a70:	4b4b      	ldr	r3, [pc, #300]	; (8002ba0 <main+0x7d8>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fc11 	bl	800029c <__adddf3>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	4b49      	ldr	r3, [pc, #292]	; (8002ba8 <main+0x7e0>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fc08 	bl	800029c <__adddf3>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4946      	ldr	r1, [pc, #280]	; (8002bac <main+0x7e4>)
 8002a92:	e9c1 2300 	strd	r2, r3, [r1]



		  //yaw RATE PID CONTROLL
		  yaw_rate_ref = (oneShot125[3] - stick_offset_us) * 8.0f;
 8002a96:	4b46      	ldr	r3, [pc, #280]	; (8002bb0 <main+0x7e8>)
 8002a98:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a9c:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <main+0x7ec>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fbf9 	bl	8000298 <__aeabi_dsub>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <main+0x7f0>)
 8002ab4:	f7fd fda8 	bl	8000608 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	493f      	ldr	r1, [pc, #252]	; (8002bbc <main+0x7f4>)
 8002abe:	e9c1 2300 	strd	r2, r3, [r1]
		  yaw_rate_error = yaw_rate_ref-ICM20602.gyro_z;
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <main+0x7f4>)
 8002ac4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <main+0x7b0>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd43 	bl	8000558 <__aeabi_f2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f7fd fbdd 	bl	8000298 <__aeabi_dsub>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4937      	ldr	r1, [pc, #220]	; (8002bc0 <main+0x7f8>)
 8002ae4:	e9c1 2300 	strd	r2, r3, [r1]
		  yaw_rate_error_sum += yaw_rate_error*0.001;
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <main+0x7f8>)
 8002aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aee:	a314      	add	r3, pc, #80	; (adr r3, 8002b40 <main+0x778>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fd88 	bl	8000608 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <main+0x7fc>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fbc9 	bl	800029c <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	492d      	ldr	r1, [pc, #180]	; (8002bc4 <main+0x7fc>)
 8002b10:	e9c1 2300 	strd	r2, r3, [r1]
		  if (sumd_ch.ch1<8725 || arm_flag == 0)     yaw_rate_error_sum = 0.0;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <main+0x7bc>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	f242 2214 	movw	r2, #8724	; 0x2214
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d903      	bls.n	8002b28 <main+0x760>
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <main+0x7c0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d106      	bne.n	8002b36 <main+0x76e>
 8002b28:	4926      	ldr	r1, [pc, #152]	; (8002bc4 <main+0x7fc>)
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9c1 2300 	strd	r2, r3, [r1]
		  //(yaw_rate_error_sum  >  50.0) ? (yaw_rate_error_sum= 50.0) :
		  //(yaw_rate_error_sum  < -50.0) ? (yaw_rate_error_sum=-50.0) : 0;
		  yaw_rate_error_derivative = (ICM20602.gyro_z - ICM20602gyro_z_prev)/0.001;
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <main+0x7b0>)
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	e045      	b.n	8002bc8 <main+0x800>
 8002b3c:	f3af 8000 	nop.w
 8002b40:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b44:	3f50624d 	.word	0x3f50624d
 8002b48:	200003a0 	.word	0x200003a0
 8002b4c:	c0490000 	.word	0xc0490000
 8002b50:	20000000 	.word	0x20000000
 8002b54:	20000398 	.word	0x20000398
 8002b58:	20000380 	.word	0x20000380
 8002b5c:	20000010 	.word	0x20000010
 8002b60:	20000388 	.word	0x20000388
 8002b64:	20000020 	.word	0x20000020
 8002b68:	200003a8 	.word	0x200003a8
 8002b6c:	20000390 	.word	0x20000390
 8002b70:	200003b0 	.word	0x200003b0
 8002b74:	200003b8 	.word	0x200003b8
 8002b78:	20000294 	.word	0x20000294
 8002b7c:	200003d8 	.word	0x200003d8
 8002b80:	200003e0 	.word	0x200003e0
 8002b84:	20000564 	.word	0x20000564
 8002b88:	20000534 	.word	0x20000534
 8002b8c:	20000440 	.word	0x20000440
 8002b90:	200003e8 	.word	0x200003e8
 8002b94:	20000038 	.word	0x20000038
 8002b98:	200003c0 	.word	0x200003c0
 8002b9c:	20000050 	.word	0x20000050
 8002ba0:	200003c8 	.word	0x200003c8
 8002ba4:	20000060 	.word	0x20000060
 8002ba8:	200003d0 	.word	0x200003d0
 8002bac:	200003f0 	.word	0x200003f0
 8002bb0:	200004b0 	.word	0x200004b0
 8002bb4:	20000070 	.word	0x20000070
 8002bb8:	40200000 	.word	0x40200000
 8002bbc:	200003f8 	.word	0x200003f8
 8002bc0:	20000418 	.word	0x20000418
 8002bc4:	20000420 	.word	0x20000420
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fcc5 	bl	8000558 <__aeabi_f2d>
 8002bce:	4bb0      	ldr	r3, [pc, #704]	; (8002e90 <main+0xac8>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fb60 	bl	8000298 <__aeabi_dsub>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	a3a9      	add	r3, pc, #676	; (adr r3, 8002e88 <main+0xac0>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fe39 	bl	800085c <__aeabi_ddiv>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	49a9      	ldr	r1, [pc, #676]	; (8002e94 <main+0xacc>)
 8002bf0:	e9c1 2300 	strd	r2, r3, [r1]
		  ICM20602gyro_z_prev=ICM20602.gyro_z;
 8002bf4:	4ba8      	ldr	r3, [pc, #672]	; (8002e98 <main+0xad0>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fcad 	bl	8000558 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	49a3      	ldr	r1, [pc, #652]	; (8002e90 <main+0xac8>)
 8002c04:	e9c1 2300 	strd	r2, r3, [r1]
		  yaw_rate_p = yaw_rate_Kp * yaw_rate_error;
 8002c08:	4ba4      	ldr	r3, [pc, #656]	; (8002e9c <main+0xad4>)
 8002c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0e:	4ba4      	ldr	r3, [pc, #656]	; (8002ea0 <main+0xad8>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f7fd fcf8 	bl	8000608 <__aeabi_dmul>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	49a1      	ldr	r1, [pc, #644]	; (8002ea4 <main+0xadc>)
 8002c1e:	e9c1 2300 	strd	r2, r3, [r1]
		  yaw_rate_i = yaw_rate_Ki * yaw_rate_error_sum;
 8002c22:	4ba1      	ldr	r3, [pc, #644]	; (8002ea8 <main+0xae0>)
 8002c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c28:	4ba0      	ldr	r3, [pc, #640]	; (8002eac <main+0xae4>)
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f7fd fceb 	bl	8000608 <__aeabi_dmul>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	499e      	ldr	r1, [pc, #632]	; (8002eb0 <main+0xae8>)
 8002c38:	e9c1 2300 	strd	r2, r3, [r1]
		  yaw_rate_d = yaw_rate_Kd * yaw_rate_error_derivative;
 8002c3c:	4b9d      	ldr	r3, [pc, #628]	; (8002eb4 <main+0xaec>)
 8002c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c42:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <main+0xacc>)
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f7fd fcde 	bl	8000608 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4999      	ldr	r1, [pc, #612]	; (8002eb8 <main+0xaf0>)
 8002c52:	e9c1 2300 	strd	r2, r3, [r1]
		  yaw_rate_pid = yaw_rate_p + yaw_rate_i + yaw_rate_d;
 8002c56:	4b93      	ldr	r3, [pc, #588]	; (8002ea4 <main+0xadc>)
 8002c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c5c:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <main+0xae8>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fb1b 	bl	800029c <__adddf3>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <main+0xaf0>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fb12 	bl	800029c <__adddf3>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	498f      	ldr	r1, [pc, #572]	; (8002ebc <main+0xaf4>)
 8002c7e:	e9c1 2300 	strd	r2, r3, [r1]
		  Motor2_pulsewidth = oneShot125[0] + roll_pid  - pitch_pid  + 0.5 *  (oneShot125[3] - stick_offset_us);
		  Motor3_pulsewidth = oneShot125[0] + roll_pid  + pitch_pid  - 0.5 *  (oneShot125[3] - stick_offset_us);
		  Motor4_pulsewidth = oneShot125[0] - roll_pid  + pitch_pid  + 0.5 *  (oneShot125[3] - stick_offset_us);
*/

			  Motor1_pulsewidth = oneShot125[0]  - pitch_pid - roll_pid - 0.5*(oneShot125[3] - stick_offset_us) ;
 8002c82:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <main+0xaf8>)
 8002c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c88:	4b8e      	ldr	r3, [pc, #568]	; (8002ec4 <main+0xafc>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f7fd fb03 	bl	8000298 <__aeabi_dsub>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4b8b      	ldr	r3, [pc, #556]	; (8002ec8 <main+0xb00>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f7fd fafa 	bl	8000298 <__aeabi_dsub>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4614      	mov	r4, r2
 8002caa:	461d      	mov	r5, r3
 8002cac:	4b84      	ldr	r3, [pc, #528]	; (8002ec0 <main+0xaf8>)
 8002cae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002cb2:	4b86      	ldr	r3, [pc, #536]	; (8002ecc <main+0xb04>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd faee 	bl	8000298 <__aeabi_dsub>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <main+0xb08>)
 8002cca:	f7fd fc9d 	bl	8000608 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd fadf 	bl	8000298 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	497d      	ldr	r1, [pc, #500]	; (8002ed4 <main+0xb0c>)
 8002ce0:	e9c1 2300 	strd	r2, r3, [r1]
			  Motor2_pulsewidth = oneShot125[0]  - pitch_pid + roll_pid + 0.5*(oneShot125[3] - stick_offset_us) ;
 8002ce4:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <main+0xaf8>)
 8002ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cea:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <main+0xafc>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	f7fd fad2 	bl	8000298 <__aeabi_dsub>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4b72      	ldr	r3, [pc, #456]	; (8002ec8 <main+0xb00>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f7fd facb 	bl	800029c <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <main+0xaf8>)
 8002d10:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d14:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <main+0xb04>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fabd 	bl	8000298 <__aeabi_dsub>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	4b69      	ldr	r3, [pc, #420]	; (8002ed0 <main+0xb08>)
 8002d2c:	f7fd fc6c 	bl	8000608 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4620      	mov	r0, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd fab0 	bl	800029c <__adddf3>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4965      	ldr	r1, [pc, #404]	; (8002ed8 <main+0xb10>)
 8002d42:	e9c1 2300 	strd	r2, r3, [r1]
			  Motor3_pulsewidth = oneShot125[0]  + pitch_pid + roll_pid - 0.5*(oneShot125[3] - stick_offset_us) ;
 8002d46:	4b5e      	ldr	r3, [pc, #376]	; (8002ec0 <main+0xaf8>)
 8002d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d4c:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <main+0xafc>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd faa3 	bl	800029c <__adddf3>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <main+0xb00>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fa9a 	bl	800029c <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <main+0xaf8>)
 8002d72:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <main+0xb04>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fa8c 	bl	8000298 <__aeabi_dsub>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <main+0xb08>)
 8002d8e:	f7fd fc3b 	bl	8000608 <__aeabi_dmul>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4620      	mov	r0, r4
 8002d98:	4629      	mov	r1, r5
 8002d9a:	f7fd fa7d 	bl	8000298 <__aeabi_dsub>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	494e      	ldr	r1, [pc, #312]	; (8002edc <main+0xb14>)
 8002da4:	e9c1 2300 	strd	r2, r3, [r1]
			  Motor4_pulsewidth = oneShot125[0]  + pitch_pid - roll_pid + 0.5*(oneShot125[3] - stick_offset_us) ;
 8002da8:	4b45      	ldr	r3, [pc, #276]	; (8002ec0 <main+0xaf8>)
 8002daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dae:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <main+0xafc>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fa72 	bl	800029c <__adddf3>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <main+0xb00>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f7fd fa67 	bl	8000298 <__aeabi_dsub>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4614      	mov	r4, r2
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <main+0xaf8>)
 8002dd4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <main+0xb04>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fa5b 	bl	8000298 <__aeabi_dsub>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <main+0xb08>)
 8002df0:	f7fd fc0a 	bl	8000608 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4620      	mov	r0, r4
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	f7fd fa4e 	bl	800029c <__adddf3>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4936      	ldr	r1, [pc, #216]	; (8002ee0 <main+0xb18>)
 8002e06:	e9c1 2300 	strd	r2, r3, [r1]

	  }
	  /*===============================================================*/
	  /*                Gyro Sensor Processing Part                    */
	  /*===============================================================*/
	  if(ICM20602_DataReady() == 1)
 8002e0a:	f7fe faa9 	bl	8001360 <ICM20602_DataReady>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 82b1 	bne.w	8003378 <main+0xfb0>
		{

			if( gyro_offset_cnt<5000)
 8002e16:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <main+0xb1c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	dc6d      	bgt.n	8002efe <main+0xb36>
			{
				gyro_offset_cnt++;
 8002e22:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <main+0xb1c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	4a2e      	ldr	r2, [pc, #184]	; (8002ee4 <main+0xb1c>)
 8002e2a:	6013      	str	r3, [r2, #0]
				gyro_x_offset +=ICM20602.gyro_x_raw;
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <main+0xad0>)
 8002e2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fb7e 	bl	8000534 <__aeabi_i2d>
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <main+0xb20>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f7fd fa2d 	bl	800029c <__adddf3>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4928      	ldr	r1, [pc, #160]	; (8002ee8 <main+0xb20>)
 8002e48:	e9c1 2300 	strd	r2, r3, [r1]
				gyro_y_offset +=ICM20602.gyro_y_raw;
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <main+0xad0>)
 8002e4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb6e 	bl	8000534 <__aeabi_i2d>
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <main+0xb24>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fa1d 	bl	800029c <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4921      	ldr	r1, [pc, #132]	; (8002eec <main+0xb24>)
 8002e68:	e9c1 2300 	strd	r2, r3, [r1]
				gyro_z_offset +=ICM20602.gyro_z_raw;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <main+0xad0>)
 8002e6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb5e 	bl	8000534 <__aeabi_i2d>
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <main+0xb28>)
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f7fd fa0d 	bl	800029c <__adddf3>
 8002e82:	4602      	mov	r2, r0
 8002e84:	e036      	b.n	8002ef4 <main+0xb2c>
 8002e86:	bf00      	nop
 8002e88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e8c:	3f50624d 	.word	0x3f50624d
 8002e90:	20000448 	.word	0x20000448
 8002e94:	20000428 	.word	0x20000428
 8002e98:	20000294 	.word	0x20000294
 8002e9c:	20000040 	.word	0x20000040
 8002ea0:	20000418 	.word	0x20000418
 8002ea4:	20000400 	.word	0x20000400
 8002ea8:	200002f0 	.word	0x200002f0
 8002eac:	20000420 	.word	0x20000420
 8002eb0:	20000408 	.word	0x20000408
 8002eb4:	20000068 	.word	0x20000068
 8002eb8:	20000410 	.word	0x20000410
 8002ebc:	20000430 	.word	0x20000430
 8002ec0:	200004b0 	.word	0x200004b0
 8002ec4:	20000330 	.word	0x20000330
 8002ec8:	200003b0 	.word	0x200003b0
 8002ecc:	20000070 	.word	0x20000070
 8002ed0:	3fe00000 	.word	0x3fe00000
 8002ed4:	20000450 	.word	0x20000450
 8002ed8:	20000458 	.word	0x20000458
 8002edc:	20000460 	.word	0x20000460
 8002ee0:	20000468 	.word	0x20000468
 8002ee4:	20000530 	.word	0x20000530
 8002ee8:	200002d8 	.word	0x200002d8
 8002eec:	200002e0 	.word	0x200002e0
 8002ef0:	200002e8 	.word	0x200002e8
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	491e      	ldr	r1, [pc, #120]	; (8002f70 <main+0xba8>)
 8002ef8:	e9c1 2300 	strd	r2, r3, [r1]
 8002efc:	e23c      	b.n	8003378 <main+0xfb0>
			}
			else if(gyro_offset_cnt == 5000)
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <main+0xbac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d13a      	bne.n	8002f80 <main+0xbb8>
			{
				gyro_offset_cnt++;
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <main+0xbac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <main+0xbac>)
 8002f12:	6013      	str	r3, [r2, #0]
				gyro_x_offset /=5000.0;
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <main+0xbb0>)
 8002f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f1a:	a313      	add	r3, pc, #76	; (adr r3, 8002f68 <main+0xba0>)
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f7fd fc9c 	bl	800085c <__aeabi_ddiv>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4913      	ldr	r1, [pc, #76]	; (8002f78 <main+0xbb0>)
 8002f2a:	e9c1 2300 	strd	r2, r3, [r1]
				gyro_y_offset /=5000.0;
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <main+0xbb4>)
 8002f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f34:	a30c      	add	r3, pc, #48	; (adr r3, 8002f68 <main+0xba0>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f7fd fc8f 	bl	800085c <__aeabi_ddiv>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	490e      	ldr	r1, [pc, #56]	; (8002f7c <main+0xbb4>)
 8002f44:	e9c1 2300 	strd	r2, r3, [r1]
				gyro_z_offset /=5000.0;
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <main+0xba8>)
 8002f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4e:	a306      	add	r3, pc, #24	; (adr r3, 8002f68 <main+0xba0>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fc82 	bl	800085c <__aeabi_ddiv>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4904      	ldr	r1, [pc, #16]	; (8002f70 <main+0xba8>)
 8002f5e:	e9c1 2300 	strd	r2, r3, [r1]
 8002f62:	e209      	b.n	8003378 <main+0xfb0>
 8002f64:	f3af 8000 	nop.w
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40b38800 	.word	0x40b38800
 8002f70:	200002e8 	.word	0x200002e8
 8002f74:	20000530 	.word	0x20000530
 8002f78:	200002d8 	.word	0x200002d8
 8002f7c:	200002e0 	.word	0x200002e0
			}
			else
			{


				ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);
 8002f80:	49cf      	ldr	r1, [pc, #828]	; (80032c0 <main+0xef8>)
 8002f82:	48d0      	ldr	r0, [pc, #832]	; (80032c4 <main+0xefc>)
 8002f84:	f7fe f9a2 	bl	80012cc <ICM20602_Get6AxisRawData>

				//Raw data to deg/s conversion with sensor direction conversion. check AFS_SEL value for Gyro sensor Register!
				ICM20602.gyro_x =   (float)(  ICM20602.gyro_y_raw/16.4f - gyro_y_offset);
 8002f88:	4bce      	ldr	r3, [pc, #824]	; (80032c4 <main+0xefc>)
 8002f8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f96:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80032c8 <main+0xf00>
 8002f9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f9e:	ee16 0a90 	vmov	r0, s13
 8002fa2:	f7fd fad9 	bl	8000558 <__aeabi_f2d>
 8002fa6:	4bc9      	ldr	r3, [pc, #804]	; (80032cc <main+0xf04>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f7fd f974 	bl	8000298 <__aeabi_dsub>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7fd fe1e 	bl	8000bf8 <__aeabi_d2f>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4ac1      	ldr	r2, [pc, #772]	; (80032c4 <main+0xefc>)
 8002fc0:	61d3      	str	r3, [r2, #28]
				ICM20602.gyro_y =   (float)(-(ICM20602.gyro_x_raw/16.4f - gyro_x_offset));
 8002fc2:	4bc0      	ldr	r3, [pc, #768]	; (80032c4 <main+0xefc>)
 8002fc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd0:	ed9f 7abd 	vldr	s14, [pc, #756]	; 80032c8 <main+0xf00>
 8002fd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fd8:	ee16 0a90 	vmov	r0, s13
 8002fdc:	f7fd fabc 	bl	8000558 <__aeabi_f2d>
 8002fe0:	4bbb      	ldr	r3, [pc, #748]	; (80032d0 <main+0xf08>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd f957 	bl	8000298 <__aeabi_dsub>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fe01 	bl	8000bf8 <__aeabi_d2f>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef1 7a67 	vneg.f32	s15, s15
 8003000:	4bb0      	ldr	r3, [pc, #704]	; (80032c4 <main+0xefc>)
 8003002:	edc3 7a08 	vstr	s15, [r3, #32]
				ICM20602.gyro_z =   (float)(  ICM20602.gyro_z_raw/16.4f - gyro_z_offset);
 8003006:	4baf      	ldr	r3, [pc, #700]	; (80032c4 <main+0xefc>)
 8003008:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003014:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80032c8 <main+0xf00>
 8003018:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800301c:	ee16 0a90 	vmov	r0, s13
 8003020:	f7fd fa9a 	bl	8000558 <__aeabi_f2d>
 8003024:	4bab      	ldr	r3, [pc, #684]	; (80032d4 <main+0xf0c>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd f935 	bl	8000298 <__aeabi_dsub>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f7fd fddf 	bl	8000bf8 <__aeabi_d2f>
 800303a:	4603      	mov	r3, r0
 800303c:	4aa1      	ldr	r2, [pc, #644]	; (80032c4 <main+0xefc>)
 800303e:	6253      	str	r3, [r2, #36]	; 0x24

				//Complementary filter

				ICM20602.angle_pitch += ICM20602.gyro_x * 0.001; //(sampling frequency: 1kHz)
 8003040:	4ba0      	ldr	r3, [pc, #640]	; (80032c4 <main+0xefc>)
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa87 	bl	8000558 <__aeabi_f2d>
 800304a:	4604      	mov	r4, r0
 800304c:	460d      	mov	r5, r1
 800304e:	4b9d      	ldr	r3, [pc, #628]	; (80032c4 <main+0xefc>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fa80 	bl	8000558 <__aeabi_f2d>
 8003058:	a393      	add	r3, pc, #588	; (adr r3, 80032a8 <main+0xee0>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd fad3 	bl	8000608 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f7fd f917 	bl	800029c <__adddf3>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fdbf 	bl	8000bf8 <__aeabi_d2f>
 800307a:	4603      	mov	r3, r0
 800307c:	4a91      	ldr	r2, [pc, #580]	; (80032c4 <main+0xefc>)
 800307e:	6393      	str	r3, [r2, #56]	; 0x38
				ICM20602.angle_roll  += ICM20602.gyro_y * 0.001;
 8003080:	4b90      	ldr	r3, [pc, #576]	; (80032c4 <main+0xefc>)
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fa67 	bl	8000558 <__aeabi_f2d>
 800308a:	4604      	mov	r4, r0
 800308c:	460d      	mov	r5, r1
 800308e:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <main+0xefc>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa60 	bl	8000558 <__aeabi_f2d>
 8003098:	a383      	add	r3, pc, #524	; (adr r3, 80032a8 <main+0xee0>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd fab3 	bl	8000608 <__aeabi_dmul>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd f8f7 	bl	800029c <__adddf3>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fd9f 	bl	8000bf8 <__aeabi_d2f>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a81      	ldr	r2, [pc, #516]	; (80032c4 <main+0xefc>)
 80030be:	6353      	str	r3, [r2, #52]	; 0x34
				ICM20602.angle_yaw   += ICM20602.gyro_z * 0.001;
 80030c0:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <main+0xefc>)
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fa47 	bl	8000558 <__aeabi_f2d>
 80030ca:	4604      	mov	r4, r0
 80030cc:	460d      	mov	r5, r1
 80030ce:	4b7d      	ldr	r3, [pc, #500]	; (80032c4 <main+0xefc>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa40 	bl	8000558 <__aeabi_f2d>
 80030d8:	a373      	add	r3, pc, #460	; (adr r3, 80032a8 <main+0xee0>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd fa93 	bl	8000608 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7fd f8d7 	bl	800029c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fd7f 	bl	8000bf8 <__aeabi_d2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a71      	ldr	r2, [pc, #452]	; (80032c4 <main+0xefc>)
 80030fe:	63d3      	str	r3, [r2, #60]	; 0x3c

				ICM20602.angle_pitch += ICM20602.angle_roll * sin(ICM20602.gyro_z * 0.001 * DEG2RAD);
 8003100:	4b70      	ldr	r3, [pc, #448]	; (80032c4 <main+0xefc>)
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fa27 	bl	8000558 <__aeabi_f2d>
 800310a:	4604      	mov	r4, r0
 800310c:	460d      	mov	r5, r1
 800310e:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <main+0xefc>)
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fa20 	bl	8000558 <__aeabi_f2d>
 8003118:	4680      	mov	r8, r0
 800311a:	4689      	mov	r9, r1
 800311c:	4b69      	ldr	r3, [pc, #420]	; (80032c4 <main+0xefc>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd fa19 	bl	8000558 <__aeabi_f2d>
 8003126:	a360      	add	r3, pc, #384	; (adr r3, 80032a8 <main+0xee0>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd fa6c 	bl	8000608 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	a35d      	add	r3, pc, #372	; (adr r3, 80032b0 <main+0xee8>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	f7fd fa63 	bl	8000608 <__aeabi_dmul>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	ec43 2b17 	vmov	d7, r2, r3
 800314a:	eeb0 0a47 	vmov.f32	s0, s14
 800314e:	eef0 0a67 	vmov.f32	s1, s15
 8003152:	f005 fcc5 	bl	8008ae0 <sin>
 8003156:	ec53 2b10 	vmov	r2, r3, d0
 800315a:	4640      	mov	r0, r8
 800315c:	4649      	mov	r1, r9
 800315e:	f7fd fa53 	bl	8000608 <__aeabi_dmul>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd f897 	bl	800029c <__adddf3>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	f7fd fd3f 	bl	8000bf8 <__aeabi_d2f>
 800317a:	4603      	mov	r3, r0
 800317c:	4a51      	ldr	r2, [pc, #324]	; (80032c4 <main+0xefc>)
 800317e:	6393      	str	r3, [r2, #56]	; 0x38
				ICM20602.angle_roll -= ICM20602.angle_pitch * sin(ICM20602.gyro_z * 0.001 * DEG2RAD);
 8003180:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <main+0xefc>)
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f9e7 	bl	8000558 <__aeabi_f2d>
 800318a:	4604      	mov	r4, r0
 800318c:	460d      	mov	r5, r1
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <main+0xefc>)
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f9e0 	bl	8000558 <__aeabi_f2d>
 8003198:	4680      	mov	r8, r0
 800319a:	4689      	mov	r9, r1
 800319c:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <main+0xefc>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f9d9 	bl	8000558 <__aeabi_f2d>
 80031a6:	a340      	add	r3, pc, #256	; (adr r3, 80032a8 <main+0xee0>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f7fd fa2c 	bl	8000608 <__aeabi_dmul>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	a33d      	add	r3, pc, #244	; (adr r3, 80032b0 <main+0xee8>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd fa23 	bl	8000608 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	ec43 2b17 	vmov	d7, r2, r3
 80031ca:	eeb0 0a47 	vmov.f32	s0, s14
 80031ce:	eef0 0a67 	vmov.f32	s1, s15
 80031d2:	f005 fc85 	bl	8008ae0 <sin>
 80031d6:	ec53 2b10 	vmov	r2, r3, d0
 80031da:	4640      	mov	r0, r8
 80031dc:	4649      	mov	r1, r9
 80031de:	f7fd fa13 	bl	8000608 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	f7fd f855 	bl	8000298 <__aeabi_dsub>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7fd fcff 	bl	8000bf8 <__aeabi_d2f>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <main+0xefc>)
 80031fe:	6353      	str	r3, [r2, #52]	; 0x34


				ICM20602.acc_total_vect = sqrt((ICM20602.acc_x_raw*ICM20602.acc_x_raw)
 8003200:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <main+0xefc>)
 8003202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003206:	461a      	mov	r2, r3
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <main+0xefc>)
 800320a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800320e:	fb03 f202 	mul.w	r2, r3, r2
											  +(ICM20602.acc_y_raw*ICM20602.acc_y_raw)
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <main+0xefc>)
 8003214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003218:	4619      	mov	r1, r3
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <main+0xefc>)
 800321c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	441a      	add	r2, r3
											  +(ICM20602.acc_z_raw*ICM20602.acc_z_raw));
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <main+0xefc>)
 8003228:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800322c:	4619      	mov	r1, r3
 800322e:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <main+0xefc>)
 8003230:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
				ICM20602.acc_total_vect = sqrt((ICM20602.acc_x_raw*ICM20602.acc_x_raw)
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f97a 	bl	8000534 <__aeabi_i2d>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	ec43 2b10 	vmov	d0, r2, r3
 8003248:	f005 fcd6 	bl	8008bf8 <sqrt>
 800324c:	ec53 2b10 	vmov	r2, r3, d0
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f7fd fcd0 	bl	8000bf8 <__aeabi_d2f>
 8003258:	4603      	mov	r3, r0
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <main+0xefc>)
 800325c:	6293      	str	r3, [r2, #40]	; 0x28


				ICM20602.angle_pitch_acc = asin((float)(ICM20602.acc_x_raw /ICM20602.acc_total_vect))*RAD2DEG;
 800325e:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <main+0xefc>)
 8003260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800326c:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <main+0xefc>)
 800326e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003272:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003276:	ee16 0a90 	vmov	r0, s13
 800327a:	f7fd f96d 	bl	8000558 <__aeabi_f2d>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	ec43 2b10 	vmov	d0, r2, r3
 8003286:	f005 fc83 	bl	8008b90 <asin>
 800328a:	ec51 0b10 	vmov	r0, r1, d0
 800328e:	a30a      	add	r3, pc, #40	; (adr r3, 80032b8 <main+0xef0>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fd f9b8 	bl	8000608 <__aeabi_dmul>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f7fd fcaa 	bl	8000bf8 <__aeabi_d2f>
 80032a4:	e018      	b.n	80032d8 <main+0xf10>
 80032a6:	bf00      	nop
 80032a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80032ac:	3f50624d 	.word	0x3f50624d
 80032b0:	00de4c51 	.word	0x00de4c51
 80032b4:	3f91df33 	.word	0x3f91df33
 80032b8:	1615ebfb 	.word	0x1615ebfb
 80032bc:	404ca5dc 	.word	0x404ca5dc
 80032c0:	2000029c 	.word	0x2000029c
 80032c4:	20000294 	.word	0x20000294
 80032c8:	41833333 	.word	0x41833333
 80032cc:	200002e0 	.word	0x200002e0
 80032d0:	200002d8 	.word	0x200002d8
 80032d4:	200002e8 	.word	0x200002e8
 80032d8:	4603      	mov	r3, r0
 80032da:	4aa3      	ldr	r2, [pc, #652]	; (8003568 <main+0x11a0>)
 80032dc:	62d3      	str	r3, [r2, #44]	; 0x2c
				ICM20602.angle_roll_acc  = asin((float)(-ICM20602.acc_y_raw)/ICM20602.acc_total_vect)*-RAD2DEG;
 80032de:	4ba2      	ldr	r3, [pc, #648]	; (8003568 <main+0x11a0>)
 80032e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032e4:	425b      	negs	r3, r3
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ee:	4b9e      	ldr	r3, [pc, #632]	; (8003568 <main+0x11a0>)
 80032f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80032f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032f8:	ee16 0a90 	vmov	r0, s13
 80032fc:	f7fd f92c 	bl	8000558 <__aeabi_f2d>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	ec43 2b10 	vmov	d0, r2, r3
 8003308:	f005 fc42 	bl	8008b90 <asin>
 800330c:	ec51 0b10 	vmov	r0, r1, d0
 8003310:	a393      	add	r3, pc, #588	; (adr r3, 8003560 <main+0x1198>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd f977 	bl	8000608 <__aeabi_dmul>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	f7fd fc69 	bl	8000bf8 <__aeabi_d2f>
 8003326:	4603      	mov	r3, r0
 8003328:	4a8f      	ldr	r2, [pc, #572]	; (8003568 <main+0x11a0>)
 800332a:	6313      	str	r3, [r2, #48]	; 0x30

				ICM20602.angle_pitch = (ICM20602.angle_pitch * 0.95f + ICM20602.angle_pitch_acc * 0.05f);
 800332c:	4b8e      	ldr	r3, [pc, #568]	; (8003568 <main+0x11a0>)
 800332e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003332:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800356c <main+0x11a4>
 8003336:	ee27 7a87 	vmul.f32	s14, s15, s14
 800333a:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <main+0x11a0>)
 800333c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003340:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8003570 <main+0x11a8>
 8003344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	4b86      	ldr	r3, [pc, #536]	; (8003568 <main+0x11a0>)
 800334e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				ICM20602.angle_roll  = (ICM20602.angle_roll *  0.95f + ICM20602.angle_roll_acc  * 0.05f);
 8003352:	4b85      	ldr	r3, [pc, #532]	; (8003568 <main+0x11a0>)
 8003354:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003358:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800356c <main+0x11a4>
 800335c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003360:	4b81      	ldr	r3, [pc, #516]	; (8003568 <main+0x11a0>)
 8003362:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003366:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003570 <main+0x11a8>
 800336a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003372:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <main+0x11a0>)
 8003374:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

		  /*===============================================================*/
		  /*                       SUMD Receiver part                      */
		  /*===============================================================*/

		  if((sumd_rx_cplt_flag == 1) && (IsGyroCalibrated() == 1)) //Check whether sumd_rx_buf Receive data is completely filled
 8003378:	4b7e      	ldr	r3, [pc, #504]	; (8003574 <main+0x11ac>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	f47f a84b 	bne.w	8002418 <main+0x50>
 8003382:	f000 fa25 	bl	80037d0 <IsGyroCalibrated>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	f47f a845 	bne.w	8002418 <main+0x50>
		  {
			  sumd_rx_cplt_flag = 0;
 800338e:	4b79      	ldr	r3, [pc, #484]	; (8003574 <main+0x11ac>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
			  if(CRC16_check(sumd_rx_buf,  SUMD_BUFFER_LENGTH - 1) == 0) //Check if sumd_rx_buf passed "CRC-16 Sick" Test
 8003394:	2123      	movs	r1, #35	; 0x23
 8003396:	4878      	ldr	r0, [pc, #480]	; (8003578 <main+0x11b0>)
 8003398:	f000 ff56 	bl	8004248 <CRC16_check>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f47f a83a 	bne.w	8002418 <main+0x50>
			  {
				  SUMD_parsing(sumd_rx_buf, &sumd_ch);
 80033a4:	4975      	ldr	r1, [pc, #468]	; (800357c <main+0x11b4>)
 80033a6:	4874      	ldr	r0, [pc, #464]	; (8003578 <main+0x11b0>)
 80033a8:	f000 fc90 	bl	8003ccc <SUMD_parsing>
				  ch_data_to_oneShot125(oneShot125, &sumd_ch);
 80033ac:	4973      	ldr	r1, [pc, #460]	; (800357c <main+0x11b4>)
 80033ae:	4874      	ldr	r0, [pc, #464]	; (8003580 <main+0x11b8>)
 80033b0:	f000 fd9a 	bl	8003ee8 <ch_data_to_oneShot125>
				  /*                        Motor Write Part                       */
				  /*===============================================================*/
				  /*PWM Write with pulsewidth, added min/max saturation for motor pulse width, which is 120us to 250us*/

				  //Arming Flag
				  if (sumd_ch.ch5 < 10000 && sumd_ch.ch1<8725 ) //switch on , throttle minimum
 80033b4:	4b71      	ldr	r3, [pc, #452]	; (800357c <main+0x11b4>)
 80033b6:	891b      	ldrh	r3, [r3, #8]
 80033b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80033bc:	4293      	cmp	r3, r2
 80033be:	d809      	bhi.n	80033d4 <main+0x100c>
 80033c0:	4b6e      	ldr	r3, [pc, #440]	; (800357c <main+0x11b4>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f242 2214 	movw	r2, #8724	; 0x2214
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d803      	bhi.n	80033d4 <main+0x100c>
				  {
					  arm_flag = 1;
 80033cc:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <main+0x11bc>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e008      	b.n	80033e6 <main+0x101e>

				  }
				  else if (sumd_ch.ch5 > 10000)
 80033d4:	4b69      	ldr	r3, [pc, #420]	; (800357c <main+0x11b4>)
 80033d6:	891b      	ldrh	r3, [r3, #8]
 80033d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80033dc:	4293      	cmp	r3, r2
 80033de:	d902      	bls.n	80033e6 <main+0x101e>
				  {
					  arm_flag = 0;
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <main+0x11bc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
				  }
				  //FAILSAFE
				  if (arm_flag == 0)
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <main+0x11bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d117      	bne.n	800341e <main+0x1056>
				  {
					  Motor1_pulsewidth = 125.0;
 80033ee:	4966      	ldr	r1, [pc, #408]	; (8003588 <main+0x11c0>)
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	4b65      	ldr	r3, [pc, #404]	; (800358c <main+0x11c4>)
 80033f6:	e9c1 2300 	strd	r2, r3, [r1]
					  Motor2_pulsewidth = 125.0;
 80033fa:	4965      	ldr	r1, [pc, #404]	; (8003590 <main+0x11c8>)
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	4b62      	ldr	r3, [pc, #392]	; (800358c <main+0x11c4>)
 8003402:	e9c1 2300 	strd	r2, r3, [r1]
					  Motor3_pulsewidth = 125.0;
 8003406:	4963      	ldr	r1, [pc, #396]	; (8003594 <main+0x11cc>)
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	4b5f      	ldr	r3, [pc, #380]	; (800358c <main+0x11c4>)
 800340e:	e9c1 2300 	strd	r2, r3, [r1]
					  Motor4_pulsewidth = 125.0;
 8003412:	4961      	ldr	r1, [pc, #388]	; (8003598 <main+0x11d0>)
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	4b5c      	ldr	r3, [pc, #368]	; (800358c <main+0x11c4>)
 800341a:	e9c1 2300 	strd	r2, r3, [r1]
				  }



				  PWM_pulsewidth_us(&MOTOR[0], (Motor1_pulsewidth > 250.0) ? 250.0 :
 800341e:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <main+0x11c0>)
 8003420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	4b5c      	ldr	r3, [pc, #368]	; (800359c <main+0x11d4>)
 800342a:	f7fd fb7d 	bl	8000b28 <__aeabi_dcmpgt>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <main+0x1070>
 8003434:	4b5a      	ldr	r3, [pc, #360]	; (80035a0 <main+0x11d8>)
 8003436:	e014      	b.n	8003462 <main+0x109a>
						  	  	  	  	  	   (Motor1_pulsewidth < 125.0) ? 125.0 :
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <main+0x11c0>)
 800343a:	e9d3 0100 	ldrd	r0, r1, [r3]
				  PWM_pulsewidth_us(&MOTOR[0], (Motor1_pulsewidth > 250.0) ? 250.0 :
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	4b52      	ldr	r3, [pc, #328]	; (800358c <main+0x11c4>)
 8003444:	f7fd fb52 	bl	8000aec <__aeabi_dcmplt>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <main+0x108a>
 800344e:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <main+0x11dc>)
 8003450:	e007      	b.n	8003462 <main+0x109a>
 8003452:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <main+0x11c0>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd fbcc 	bl	8000bf8 <__aeabi_d2f>
 8003460:	4603      	mov	r3, r0
 8003462:	ee00 3a10 	vmov	s0, r3
 8003466:	4850      	ldr	r0, [pc, #320]	; (80035a8 <main+0x11e0>)
 8003468:	f7fe fae2 	bl	8001a30 <PWM_pulsewidth_us>
						  	  	  	  	  	    Motor1_pulsewidth);

				  PWM_pulsewidth_us(&MOTOR[1], (Motor2_pulsewidth > 250.0) ? 250.0 :
 800346c:	4b48      	ldr	r3, [pc, #288]	; (8003590 <main+0x11c8>)
 800346e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <main+0x11d4>)
 8003478:	f7fd fb56 	bl	8000b28 <__aeabi_dcmpgt>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <main+0x10be>
 8003482:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <main+0x11d8>)
 8003484:	e014      	b.n	80034b0 <main+0x10e8>
						  	  	  	  	  	   (Motor2_pulsewidth < 125.0) ? 125.0 :
 8003486:	4b42      	ldr	r3, [pc, #264]	; (8003590 <main+0x11c8>)
 8003488:	e9d3 0100 	ldrd	r0, r1, [r3]
				  PWM_pulsewidth_us(&MOTOR[1], (Motor2_pulsewidth > 250.0) ? 250.0 :
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	4b3e      	ldr	r3, [pc, #248]	; (800358c <main+0x11c4>)
 8003492:	f7fd fb2b 	bl	8000aec <__aeabi_dcmplt>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <main+0x10d8>
 800349c:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <main+0x11dc>)
 800349e:	e007      	b.n	80034b0 <main+0x10e8>
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <main+0x11c8>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7fd fba5 	bl	8000bf8 <__aeabi_d2f>
 80034ae:	4603      	mov	r3, r0
 80034b0:	ee00 3a10 	vmov	s0, r3
 80034b4:	483d      	ldr	r0, [pc, #244]	; (80035ac <main+0x11e4>)
 80034b6:	f7fe fabb 	bl	8001a30 <PWM_pulsewidth_us>
						  	  	  	  	  	    Motor2_pulsewidth);

				  PWM_pulsewidth_us(&MOTOR[2], (Motor3_pulsewidth > 250.0) ? 250.0 :
 80034ba:	4b36      	ldr	r3, [pc, #216]	; (8003594 <main+0x11cc>)
 80034bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <main+0x11d4>)
 80034c6:	f7fd fb2f 	bl	8000b28 <__aeabi_dcmpgt>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <main+0x110c>
 80034d0:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <main+0x11d8>)
 80034d2:	e014      	b.n	80034fe <main+0x1136>
						  	  	  	  	  	   (Motor3_pulsewidth < 125.0) ? 125.0 :
 80034d4:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <main+0x11cc>)
 80034d6:	e9d3 0100 	ldrd	r0, r1, [r3]
				  PWM_pulsewidth_us(&MOTOR[2], (Motor3_pulsewidth > 250.0) ? 250.0 :
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <main+0x11c4>)
 80034e0:	f7fd fb04 	bl	8000aec <__aeabi_dcmplt>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <main+0x1126>
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <main+0x11dc>)
 80034ec:	e007      	b.n	80034fe <main+0x1136>
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <main+0x11cc>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd fb7e 	bl	8000bf8 <__aeabi_d2f>
 80034fc:	4603      	mov	r3, r0
 80034fe:	ee00 3a10 	vmov	s0, r3
 8003502:	482b      	ldr	r0, [pc, #172]	; (80035b0 <main+0x11e8>)
 8003504:	f7fe fa94 	bl	8001a30 <PWM_pulsewidth_us>
						  	  	  	  	  	    Motor3_pulsewidth);

				  PWM_pulsewidth_us(&MOTOR[3], (Motor4_pulsewidth > 250.0) ? 250.0 :
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <main+0x11d0>)
 800350a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <main+0x11d4>)
 8003514:	f7fd fb08 	bl	8000b28 <__aeabi_dcmpgt>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <main+0x115a>
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <main+0x11d8>)
 8003520:	e014      	b.n	800354c <main+0x1184>
						  	  	  	  	  	   (Motor4_pulsewidth < 125.0) ? 125.0 :
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <main+0x11d0>)
 8003524:	e9d3 0100 	ldrd	r0, r1, [r3]
				  PWM_pulsewidth_us(&MOTOR[3], (Motor4_pulsewidth > 250.0) ? 250.0 :
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <main+0x11c4>)
 800352e:	f7fd fadd 	bl	8000aec <__aeabi_dcmplt>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <main+0x1174>
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <main+0x11dc>)
 800353a:	e007      	b.n	800354c <main+0x1184>
 800353c:	4b16      	ldr	r3, [pc, #88]	; (8003598 <main+0x11d0>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f7fd fb57 	bl	8000bf8 <__aeabi_d2f>
 800354a:	4603      	mov	r3, r0
 800354c:	ee00 3a10 	vmov	s0, r3
 8003550:	4818      	ldr	r0, [pc, #96]	; (80035b4 <main+0x11ec>)
 8003552:	f7fe fa6d 	bl	8001a30 <PWM_pulsewidth_us>
	  if((tim2_1ms_flag == 1) && (IsGyroCalibrated()==1))
 8003556:	f7fe bf5f 	b.w	8002418 <main+0x50>
 800355a:	bf00      	nop
 800355c:	f3af 8000 	nop.w
 8003560:	1615ebfb 	.word	0x1615ebfb
 8003564:	c04ca5dc 	.word	0xc04ca5dc
 8003568:	20000294 	.word	0x20000294
 800356c:	3f733333 	.word	0x3f733333
 8003570:	3d4ccccd 	.word	0x3d4ccccd
 8003574:	2000055d 	.word	0x2000055d
 8003578:	20000538 	.word	0x20000538
 800357c:	20000564 	.word	0x20000564
 8003580:	200004b0 	.word	0x200004b0
 8003584:	20000534 	.word	0x20000534
 8003588:	20000450 	.word	0x20000450
 800358c:	405f4000 	.word	0x405f4000
 8003590:	20000458 	.word	0x20000458
 8003594:	20000460 	.word	0x20000460
 8003598:	20000468 	.word	0x20000468
 800359c:	406f4000 	.word	0x406f4000
 80035a0:	437a0000 	.word	0x437a0000
 80035a4:	42fa0000 	.word	0x42fa0000
 80035a8:	20000470 	.word	0x20000470
 80035ac:	20000480 	.word	0x20000480
 80035b0:	20000490 	.word	0x20000490
 80035b4:	200004a0 	.word	0x200004a0

080035b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b094      	sub	sp, #80	; 0x50
 80035bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035be:	f107 0320 	add.w	r3, r7, #32
 80035c2:	2230      	movs	r2, #48	; 0x30
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f002 fd5e 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	2300      	movs	r3, #0
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <SystemClock_Config+0xc8>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a26      	ldr	r2, [pc, #152]	; (8003680 <SystemClock_Config+0xc8>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <SystemClock_Config+0xc8>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <SystemClock_Config+0xcc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a20      	ldr	r2, [pc, #128]	; (8003684 <SystemClock_Config+0xcc>)
 8003602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <SystemClock_Config+0xcc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003614:	2301      	movs	r3, #1
 8003616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800361e:	2302      	movs	r3, #2
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003628:	2304      	movs	r3, #4
 800362a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800362c:	2360      	movs	r3, #96	; 0x60
 800362e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003630:	2302      	movs	r3, #2
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003634:	2304      	movs	r3, #4
 8003636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003638:	f107 0320 	add.w	r3, r7, #32
 800363c:	4618      	mov	r0, r3
 800363e:	f001 fa6f 	bl	8004b20 <HAL_RCC_OscConfig>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003648:	f000 f8d4 	bl	80037f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800364c:	230f      	movs	r3, #15
 800364e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003650:	2302      	movs	r3, #2
 8003652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800365c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	2103      	movs	r1, #3
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fcd1 	bl	8005010 <HAL_RCC_ClockConfig>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003674:	f000 f8be 	bl	80037f4 <Error_Handler>
  }
}
 8003678:	bf00      	nop
 800367a:	3750      	adds	r7, #80	; 0x50
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	40007000 	.word	0x40007000

08003688 <motor_setup>:

/* USER CODE BEGIN 4 */
void motor_setup(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0

	/*PWM Setup------------------------------------------------------*/
	PWM_init(&MOTOR[0], MOTOR_pin[0].port, MOTOR_pin[0].pin);
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <motor_setup+0x130>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <motor_setup+0x130>)
 8003692:	8892      	ldrh	r2, [r2, #4]
 8003694:	4619      	mov	r1, r3
 8003696:	4849      	ldr	r0, [pc, #292]	; (80037bc <motor_setup+0x134>)
 8003698:	f7fd fed8 	bl	800144c <PWM_init>
	PWM_init(&MOTOR[1], MOTOR_pin[1].port, MOTOR_pin[1].pin);
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <motor_setup+0x130>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a45      	ldr	r2, [pc, #276]	; (80037b8 <motor_setup+0x130>)
 80036a2:	8992      	ldrh	r2, [r2, #12]
 80036a4:	4619      	mov	r1, r3
 80036a6:	4846      	ldr	r0, [pc, #280]	; (80037c0 <motor_setup+0x138>)
 80036a8:	f7fd fed0 	bl	800144c <PWM_init>
	PWM_init(&MOTOR[2], MOTOR_pin[2].port, MOTOR_pin[2].pin);
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <motor_setup+0x130>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	4a41      	ldr	r2, [pc, #260]	; (80037b8 <motor_setup+0x130>)
 80036b2:	8a92      	ldrh	r2, [r2, #20]
 80036b4:	4619      	mov	r1, r3
 80036b6:	4843      	ldr	r0, [pc, #268]	; (80037c4 <motor_setup+0x13c>)
 80036b8:	f7fd fec8 	bl	800144c <PWM_init>
	PWM_init(&MOTOR[3], MOTOR_pin[3].port, MOTOR_pin[3].pin);
 80036bc:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <motor_setup+0x130>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4a3d      	ldr	r2, [pc, #244]	; (80037b8 <motor_setup+0x130>)
 80036c2:	8b92      	ldrh	r2, [r2, #28]
 80036c4:	4619      	mov	r1, r3
 80036c6:	4840      	ldr	r0, [pc, #256]	; (80037c8 <motor_setup+0x140>)
 80036c8:	f7fd fec0 	bl	800144c <PWM_init>
	HAL_Delay(10);
 80036cc:	200a      	movs	r0, #10
 80036ce:	f001 f91d 	bl	800490c <HAL_Delay>

	PWM_period_us(&MOTOR[0], 500);
 80036d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80036d6:	4839      	ldr	r0, [pc, #228]	; (80037bc <motor_setup+0x134>)
 80036d8:	f7fe f98c 	bl	80019f4 <PWM_period_us>
	PWM_period_us(&MOTOR[1], 500);
 80036dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80036e0:	4837      	ldr	r0, [pc, #220]	; (80037c0 <motor_setup+0x138>)
 80036e2:	f7fe f987 	bl	80019f4 <PWM_period_us>
	PWM_period_us(&MOTOR[2], 500);
 80036e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80036ea:	4836      	ldr	r0, [pc, #216]	; (80037c4 <motor_setup+0x13c>)
 80036ec:	f7fe f982 	bl	80019f4 <PWM_period_us>
	PWM_period_us(&MOTOR[3], 500);
 80036f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80036f4:	4834      	ldr	r0, [pc, #208]	; (80037c8 <motor_setup+0x140>)
 80036f6:	f7fe f97d 	bl	80019f4 <PWM_period_us>
	HAL_Delay(10);
 80036fa:	200a      	movs	r0, #10
 80036fc:	f001 f906 	bl	800490c <HAL_Delay>

	PWM_pulsewidth_us(&MOTOR[0], 125.0);
 8003700:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80037cc <motor_setup+0x144>
 8003704:	482d      	ldr	r0, [pc, #180]	; (80037bc <motor_setup+0x134>)
 8003706:	f7fe f993 	bl	8001a30 <PWM_pulsewidth_us>
	PWM_pulsewidth_us(&MOTOR[1], 125.0);
 800370a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80037cc <motor_setup+0x144>
 800370e:	482c      	ldr	r0, [pc, #176]	; (80037c0 <motor_setup+0x138>)
 8003710:	f7fe f98e 	bl	8001a30 <PWM_pulsewidth_us>
	PWM_pulsewidth_us(&MOTOR[2], 125.0);
 8003714:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80037cc <motor_setup+0x144>
 8003718:	482a      	ldr	r0, [pc, #168]	; (80037c4 <motor_setup+0x13c>)
 800371a:	f7fe f989 	bl	8001a30 <PWM_pulsewidth_us>
	PWM_pulsewidth_us(&MOTOR[3], 125.0);
 800371e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80037cc <motor_setup+0x144>
 8003722:	4829      	ldr	r0, [pc, #164]	; (80037c8 <motor_setup+0x140>)
 8003724:	f7fe f984 	bl	8001a30 <PWM_pulsewidth_us>


	PWM_2kHz_init(&MOTOR[0], MOTOR_pin[0].port, MOTOR_pin[0].pin);
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <motor_setup+0x130>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <motor_setup+0x130>)
 800372e:	8892      	ldrh	r2, [r2, #4]
 8003730:	4619      	mov	r1, r3
 8003732:	4822      	ldr	r0, [pc, #136]	; (80037bc <motor_setup+0x134>)
 8003734:	f7fd ffec 	bl	8001710 <PWM_2kHz_init>
	PWM_2kHz_init(&MOTOR[1], MOTOR_pin[1].port, MOTOR_pin[1].pin);
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <motor_setup+0x130>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <motor_setup+0x130>)
 800373e:	8992      	ldrh	r2, [r2, #12]
 8003740:	4619      	mov	r1, r3
 8003742:	481f      	ldr	r0, [pc, #124]	; (80037c0 <motor_setup+0x138>)
 8003744:	f7fd ffe4 	bl	8001710 <PWM_2kHz_init>
	PWM_2kHz_init(&MOTOR[2], MOTOR_pin[2].port, MOTOR_pin[2].pin);
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <motor_setup+0x130>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	4a1a      	ldr	r2, [pc, #104]	; (80037b8 <motor_setup+0x130>)
 800374e:	8a92      	ldrh	r2, [r2, #20]
 8003750:	4619      	mov	r1, r3
 8003752:	481c      	ldr	r0, [pc, #112]	; (80037c4 <motor_setup+0x13c>)
 8003754:	f7fd ffdc 	bl	8001710 <PWM_2kHz_init>
	PWM_2kHz_init(&MOTOR[3], MOTOR_pin[3].port, MOTOR_pin[3].pin);
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <motor_setup+0x130>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <motor_setup+0x130>)
 800375e:	8b92      	ldrh	r2, [r2, #28]
 8003760:	4619      	mov	r1, r3
 8003762:	4819      	ldr	r0, [pc, #100]	; (80037c8 <motor_setup+0x140>)
 8003764:	f7fd ffd4 	bl	8001710 <PWM_2kHz_init>
	HAL_Delay(10);
 8003768:	200a      	movs	r0, #10
 800376a:	f001 f8cf 	bl	800490c <HAL_Delay>

	PWM_2kHz(&MOTOR[0]);
 800376e:	4813      	ldr	r0, [pc, #76]	; (80037bc <motor_setup+0x134>)
 8003770:	f7fe f950 	bl	8001a14 <PWM_2kHz>
	PWM_2kHz(&MOTOR[1]);
 8003774:	4812      	ldr	r0, [pc, #72]	; (80037c0 <motor_setup+0x138>)
 8003776:	f7fe f94d 	bl	8001a14 <PWM_2kHz>
	PWM_2kHz(&MOTOR[2]);
 800377a:	4812      	ldr	r0, [pc, #72]	; (80037c4 <motor_setup+0x13c>)
 800377c:	f7fe f94a 	bl	8001a14 <PWM_2kHz>
	PWM_2kHz(&MOTOR[3]);
 8003780:	4811      	ldr	r0, [pc, #68]	; (80037c8 <motor_setup+0x140>)
 8003782:	f7fe f947 	bl	8001a14 <PWM_2kHz>
	HAL_Delay(10);
 8003786:	200a      	movs	r0, #10
 8003788:	f001 f8c0 	bl	800490c <HAL_Delay>

	PWM_2kHz_pulsewidth_us(&MOTOR[0], 125.0);
 800378c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80037cc <motor_setup+0x144>
 8003790:	480a      	ldr	r0, [pc, #40]	; (80037bc <motor_setup+0x134>)
 8003792:	f7fe f9bb 	bl	8001b0c <PWM_2kHz_pulsewidth_us>
	PWM_2kHz_pulsewidth_us(&MOTOR[1], 125.0);
 8003796:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80037cc <motor_setup+0x144>
 800379a:	4809      	ldr	r0, [pc, #36]	; (80037c0 <motor_setup+0x138>)
 800379c:	f7fe f9b6 	bl	8001b0c <PWM_2kHz_pulsewidth_us>
	PWM_2kHz_pulsewidth_us(&MOTOR[2], 125.0);
 80037a0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80037cc <motor_setup+0x144>
 80037a4:	4807      	ldr	r0, [pc, #28]	; (80037c4 <motor_setup+0x13c>)
 80037a6:	f7fe f9b1 	bl	8001b0c <PWM_2kHz_pulsewidth_us>
	PWM_2kHz_pulsewidth_us(&MOTOR[3], 125.0);
 80037aa:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80037cc <motor_setup+0x144>
 80037ae:	4806      	ldr	r0, [pc, #24]	; (80037c8 <motor_setup+0x140>)
 80037b0:	f7fe f9ac 	bl	8001b0c <PWM_2kHz_pulsewidth_us>




}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000078 	.word	0x20000078
 80037bc:	20000470 	.word	0x20000470
 80037c0:	20000480 	.word	0x20000480
 80037c4:	20000490 	.word	0x20000490
 80037c8:	200004a0 	.word	0x200004a0
 80037cc:	42fa0000 	.word	0x42fa0000

080037d0 <IsGyroCalibrated>:
uint8_t IsGyroCalibrated(void){
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
	if (gyro_offset_cnt > 5000){
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <IsGyroCalibrated+0x20>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	dd01      	ble.n	80037e4 <IsGyroCalibrated+0x14>
		return 1;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <IsGyroCalibrated+0x16>
	}
	else{
		return 0;
 80037e4:	2300      	movs	r3, #0
	}
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20000530 	.word	0x20000530

080037f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037f8:	b672      	cpsid	i
}
 80037fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037fc:	e7fe      	b.n	80037fc <Error_Handler+0x8>
	...

08003800 <__NVIC_GetPriorityGrouping>:
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	; (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LL_SPI_SetStandard>:
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 0210 	bic.w	r2, r3, #16
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <LL_AHB1_GRP1_EnableClock>:
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003944:	4907      	ldr	r1, [pc, #28]	; (8003964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4313      	orrs	r3, r2
 800394a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800394e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40023800 	.word	0x40023800

08003968 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4313      	orrs	r3, r2
 800397a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <LL_APB2_GRP1_EnableClock+0x2c>)
 800397e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40023800 	.word	0x40023800

08003998 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b090      	sub	sp, #64	; 0x40
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800399e:	f107 0318 	add.w	r3, r7, #24
 80039a2:	2228      	movs	r2, #40	; 0x28
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f002 fb6e 	bl	8006088 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ac:	463b      	mov	r3, r7
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	60da      	str	r2, [r3, #12]
 80039b8:	611a      	str	r2, [r3, #16]
 80039ba:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80039bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80039c0:	f7ff ffd2 	bl	8003968 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7ff ffb7 	bl	8003938 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = GYRO_SCK_Pin|GYRO_MISO_Pin|GYRO_MOSI_Pin;
 80039ca:	23e0      	movs	r3, #224	; 0xe0
 80039cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80039ce:	2302      	movs	r3, #2
 80039d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80039de:	2305      	movs	r3, #5
 80039e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	463b      	mov	r3, r7
 80039e4:	4619      	mov	r1, r3
 80039e6:	481b      	ldr	r0, [pc, #108]	; (8003a54 <MX_SPI1_Init+0xbc>)
 80039e8:	f001 fe03 	bl	80055f2 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80039ec:	f7ff ff08 	bl	8003800 <__NVIC_GetPriorityGrouping>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2200      	movs	r2, #0
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff58 	bl	80038ac <NVIC_EncodePriority>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4619      	mov	r1, r3
 8003a00:	2023      	movs	r0, #35	; 0x23
 8003a02:	f7ff ff29 	bl	8003858 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8003a06:	2023      	movs	r0, #35	; 0x23
 8003a08:	f7ff ff08 	bl	800381c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003a10:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003a14:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8003a28:	2330      	movs	r3, #48	; 0x30
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003a34:	230a      	movs	r3, #10
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003a38:	f107 0318 	add.w	r3, r7, #24
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4806      	ldr	r0, [pc, #24]	; (8003a58 <MX_SPI1_Init+0xc0>)
 8003a40:	f001 ffa7 	bl	8005992 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003a44:	2100      	movs	r1, #0
 8003a46:	4804      	ldr	r0, [pc, #16]	; (8003a58 <MX_SPI1_Init+0xc0>)
 8003a48:	f7ff ff63 	bl	8003912 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	3740      	adds	r7, #64	; 0x40
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40013000 	.word	0x40013000

08003a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_MspInit+0x4c>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a0f      	ldr	r2, [pc, #60]	; (8003aa8 <HAL_MspInit+0x4c>)
 8003a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_MspInit+0x4c>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_MspInit+0x4c>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <HAL_MspInit+0x4c>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_MspInit+0x4c>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800

08003aac <LL_USART_IsActiveFlag_RXNE>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <LL_USART_ClearFlag_RXNE>:
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f06f 0220 	mvn.w	r2, #32
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_USART_ReceiveData8>:
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	b2db      	uxtb	r3, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <NMI_Handler+0x4>

08003b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <HardFault_Handler+0x4>

08003b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <MemManage_Handler+0x4>

08003b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b1e:	e7fe      	b.n	8003b1e <BusFault_Handler+0x4>

08003b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <UsageFault_Handler+0x4>

08003b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b54:	f000 feba 	bl	80048cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1)) // if external command detected
 8003b70:	480a      	ldr	r0, [pc, #40]	; (8003b9c <USART1_IRQHandler+0x30>)
 8003b72:	f7ff ff9b 	bl	8003aac <LL_USART_IsActiveFlag_RXNE>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <USART1_IRQHandler+0x2a>
	{
	    LL_USART_ClearFlag_RXNE(USART1);
 8003b7c:	4807      	ldr	r0, [pc, #28]	; (8003b9c <USART1_IRQHandler+0x30>)
 8003b7e:	f7ff ffa8 	bl	8003ad2 <LL_USART_ClearFlag_RXNE>
	    uart1_rx_data = LL_USART_ReceiveData8(USART1);
 8003b82:	4806      	ldr	r0, [pc, #24]	; (8003b9c <USART1_IRQHandler+0x30>)
 8003b84:	f7ff ffb3 	bl	8003aee <LL_USART_ReceiveData8>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <USART1_IRQHandler+0x34>)
 8003b8e:	701a      	strb	r2, [r3, #0]
	    uart1_rx_flag = 1;
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <USART1_IRQHandler+0x38>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40011000 	.word	0x40011000
 8003ba0:	20000561 	.word	0x20000561
 8003ba4:	20000560 	.word	0x20000560

08003ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	static unsigned char cnt = 0; // does not refresh

		  if(LL_USART_IsActiveFlag_RXNE(USART2))
 8003bac:	4837      	ldr	r0, [pc, #220]	; (8003c8c <USART2_IRQHandler+0xe4>)
 8003bae:	f7ff ff7d 	bl	8003aac <LL_USART_IsActiveFlag_RXNE>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d063      	beq.n	8003c80 <USART2_IRQHandler+0xd8>
		  {
		    LL_USART_ClearFlag_RXNE(USART2);
 8003bb8:	4834      	ldr	r0, [pc, #208]	; (8003c8c <USART2_IRQHandler+0xe4>)
 8003bba:	f7ff ff8a 	bl	8003ad2 <LL_USART_ClearFlag_RXNE>
		    uart2_rx_data = LL_USART_ReceiveData8(USART2);
 8003bbe:	4833      	ldr	r0, [pc, #204]	; (8003c8c <USART2_IRQHandler+0xe4>)
 8003bc0:	f7ff ff95 	bl	8003aee <LL_USART_ReceiveData8>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003bca:	701a      	strb	r2, [r3, #0]
		    uart2_rx_flag = 1;
 8003bcc:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <USART2_IRQHandler+0xec>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]

		    switch (cnt)
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b24      	cmp	r3, #36	; 0x24
 8003bd8:	d036      	beq.n	8003c48 <USART2_IRQHandler+0xa0>
 8003bda:	2b24      	cmp	r3, #36	; 0x24
 8003bdc:	dc42      	bgt.n	8003c64 <USART2_IRQHandler+0xbc>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <USART2_IRQHandler+0x40>
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d012      	beq.n	8003c0c <USART2_IRQHandler+0x64>
 8003be6:	e03d      	b.n	8003c64 <USART2_IRQHandler+0xbc>
		    {
		      case 0:
		        if(uart2_rx_data == 0xA8) //graupner vendor id
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2ba8      	cmp	r3, #168	; 0xa8
 8003bee:	d149      	bne.n	8003c84 <USART2_IRQHandler+0xdc>
		        {
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8003bf0:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003bf8:	7819      	ldrb	r1, [r3, #0]
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <USART2_IRQHandler+0xf4>)
 8003bfc:	5499      	strb	r1, [r3, r2]
		          cnt++;
 8003bfe:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c08:	701a      	strb	r2, [r3, #0]
		        }
		        break;
 8003c0a:	e03b      	b.n	8003c84 <USART2_IRQHandler+0xdc>

		      case 1:
		        if(uart2_rx_data == 0x01) //correct
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10d      	bne.n	8003c30 <USART2_IRQHandler+0x88>
		        {
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003c1c:	7819      	ldrb	r1, [r3, #0]
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <USART2_IRQHandler+0xf4>)
 8003c20:	5499      	strb	r1, [r3, r2]
		          cnt++;
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	3301      	adds	r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c2c:	701a      	strb	r2, [r3, #0]
		        else //no valid data.
		        {
		          cnt = 0;
		        }

		        break;
 8003c2e:	e02a      	b.n	8003c86 <USART2_IRQHandler+0xde>
		        else if (uart2_rx_data == 0x81) //Fail Safe mode.
 8003c30:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b81      	cmp	r3, #129	; 0x81
 8003c36:	d103      	bne.n	8003c40 <USART2_IRQHandler+0x98>
		         cnt = 0;
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
		        break;
 8003c3e:	e022      	b.n	8003c86 <USART2_IRQHandler+0xde>
		          cnt = 0;
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
		        break;
 8003c46:	e01e      	b.n	8003c86 <USART2_IRQHandler+0xde>

		      case 36:
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003c50:	7819      	ldrb	r1, [r3, #0]
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <USART2_IRQHandler+0xf4>)
 8003c54:	5499      	strb	r1, [r3, r2]
		          cnt = 0;
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
		          sumd_rx_cplt_flag = 1;
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <USART2_IRQHandler+0xf8>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]

		        break;
 8003c62:	e010      	b.n	8003c86 <USART2_IRQHandler+0xde>

		      default:
		          sumd_rx_buf[cnt] = uart2_rx_data;
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <USART2_IRQHandler+0xe8>)
 8003c6c:	7819      	ldrb	r1, [r3, #0]
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <USART2_IRQHandler+0xf4>)
 8003c70:	5499      	strb	r1, [r3, r2]
		          cnt++;
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	3301      	adds	r3, #1
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <USART2_IRQHandler+0xf0>)
 8003c7c:	701a      	strb	r2, [r3, #0]
		        break;
 8003c7e:	e002      	b.n	8003c86 <USART2_IRQHandler+0xde>
		    }
		  }
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <USART2_IRQHandler+0xde>
		        break;
 8003c84:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40004400 	.word	0x40004400
 8003c90:	2000055f 	.word	0x2000055f
 8003c94:	2000055e 	.word	0x2000055e
 8003c98:	20000563 	.word	0x20000563
 8003c9c:	20000538 	.word	0x20000538
 8003ca0:	2000055d 	.word	0x2000055d

08003ca4 <TIM2_IRQHandler>:

/* USER CODE BEGIN 1 */

void TIM2_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	if(is_UIF(TIM2))
 8003ca8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003cac:	f7fe faa0 	bl	80021f0 <is_UIF>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <TIM2_IRQHandler+0x20>
	{                 // Update interrupt
		tim2_1ms_flag = 1;
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <TIM2_IRQHandler+0x24>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
		clear_UIF(TIM2);     // clear update interrupt flag
 8003cbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003cc0:	f7fe faa4 	bl	800220c <clear_UIF>
	}
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000562 	.word	0x20000562

08003ccc <SUMD_parsing>:
  * @retval none
  */


void SUMD_parsing(uint8_t sumd_rx_buf[], SUMD_channel sumd_ch[])
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	sumd_ch ->  ch1 =  sumd_rx_buf[3]  << 8  |  sumd_rx_buf[4]  >> 3;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3303      	adds	r3, #3
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	b21a      	sxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	08db      	lsrs	r3, r3, #3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	b21b      	sxth	r3, r3
 8003cec:	4313      	orrs	r3, r2
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	801a      	strh	r2, [r3, #0]
	sumd_ch ->  ch2 =  sumd_rx_buf[5]  << 8  |  sumd_rx_buf[6]  >> 3;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3305      	adds	r3, #5
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	b21a      	sxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3306      	adds	r3, #6
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	08db      	lsrs	r3, r3, #3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	b21b      	sxth	r3, r3
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	805a      	strh	r2, [r3, #2]
	sumd_ch ->  ch3 =  sumd_rx_buf[7]  << 8  |  sumd_rx_buf[8]  >> 3;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3307      	adds	r3, #7
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3308      	adds	r3, #8
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	08db      	lsrs	r3, r3, #3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	b21b      	sxth	r3, r3
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	809a      	strh	r2, [r3, #4]
	sumd_ch ->  ch4 =  sumd_rx_buf[9]  << 8  |  sumd_rx_buf[10] >> 3;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3309      	adds	r3, #9
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	330a      	adds	r3, #10
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b21b      	sxth	r3, r3
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	80da      	strh	r2, [r3, #6]
	sumd_ch ->  ch5 =  sumd_rx_buf[11] << 8  |  sumd_rx_buf[12] >> 3;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	330b      	adds	r3, #11
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	b21a      	sxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	330c      	adds	r3, #12
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	08db      	lsrs	r3, r3, #3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	b21b      	sxth	r3, r3
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	811a      	strh	r2, [r3, #8]

	sumd_ch ->  ch6 =  sumd_rx_buf[13] << 8  |  sumd_rx_buf[14] >> 3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	330d      	adds	r3, #13
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	b21a      	sxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	330e      	adds	r3, #14
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	08db      	lsrs	r3, r3, #3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b21b      	sxth	r3, r3
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	815a      	strh	r2, [r3, #10]
	sumd_ch ->  ch7 =  sumd_rx_buf[15] << 8  |  sumd_rx_buf[16] >> 3;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	330f      	adds	r3, #15
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	b21a      	sxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3310      	adds	r3, #16
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	08db      	lsrs	r3, r3, #3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	b21b      	sxth	r3, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	819a      	strh	r2, [r3, #12]
	sumd_ch ->  ch8 =  sumd_rx_buf[17] << 8  |  sumd_rx_buf[18] >> 3;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3311      	adds	r3, #17
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3312      	adds	r3, #18
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	08db      	lsrs	r3, r3, #3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	81da      	strh	r2, [r3, #14]
	sumd_ch ->  ch9 =  sumd_rx_buf[19] << 8  |  sumd_rx_buf[20] >> 3;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3313      	adds	r3, #19
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	b21a      	sxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3314      	adds	r3, #20
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	08db      	lsrs	r3, r3, #3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	b21b      	sxth	r3, r3
 8003dec:	4313      	orrs	r3, r2
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	821a      	strh	r2, [r3, #16]
	sumd_ch ->  ch10 = sumd_rx_buf[21] << 8  |  sumd_rx_buf[22] >> 3;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3315      	adds	r3, #21
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	b21a      	sxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3316      	adds	r3, #22
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	08db      	lsrs	r3, r3, #3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	b21b      	sxth	r3, r3
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	825a      	strh	r2, [r3, #18]

	sumd_ch ->  ch11 = sumd_rx_buf[23] << 8  |  sumd_rx_buf[24] >> 3;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3317      	adds	r3, #23
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3318      	adds	r3, #24
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	08db      	lsrs	r3, r3, #3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	829a      	strh	r2, [r3, #20]
	sumd_ch ->  ch12 = sumd_rx_buf[25] << 8  |  sumd_rx_buf[26] >> 3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3319      	adds	r3, #25
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	b21a      	sxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	331a      	adds	r3, #26
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	08db      	lsrs	r3, r3, #3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	b21b      	sxth	r3, r3
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	82da      	strh	r2, [r3, #22]
	sumd_ch ->  ch13 = sumd_rx_buf[27] << 8  |  sumd_rx_buf[28] >> 3;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	331b      	adds	r3, #27
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	b21a      	sxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	331c      	adds	r3, #28
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	08db      	lsrs	r3, r3, #3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	b21b      	sxth	r3, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b21b      	sxth	r3, r3
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	831a      	strh	r2, [r3, #24]
	sumd_ch ->  ch14 = sumd_rx_buf[29] << 8  |  sumd_rx_buf[30] >> 3;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	331d      	adds	r3, #29
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	b21a      	sxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	331e      	adds	r3, #30
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	835a      	strh	r2, [r3, #26]
	sumd_ch ->  ch15 = sumd_rx_buf[31] << 8  |  sumd_rx_buf[32] >> 3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	331f      	adds	r3, #31
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	b21a      	sxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3320      	adds	r3, #32
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	b21b      	sxth	r3, r3
 8003eac:	4313      	orrs	r3, r2
 8003eae:	b21b      	sxth	r3, r3
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	839a      	strh	r2, [r3, #28]

	sumd_ch ->  ch16 = sumd_rx_buf[33] << 8  |  sumd_rx_buf[34] >> 3;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3321      	adds	r3, #33	; 0x21
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	b21a      	sxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3322      	adds	r3, #34	; 0x22
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	b21b      	sxth	r3, r3
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b21b      	sxth	r3, r3
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	83da      	strh	r2, [r3, #30]

}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	0000      	movs	r0, r0
 8003ee4:	0000      	movs	r0, r0
	...

08003ee8 <ch_data_to_oneShot125>:
  * @param  oneShot125[]: converted 125-250 us values are saved here
  * 		sumd_ch[]: function gets SUMD channel data from here
  * @retval none
  */
void ch_data_to_oneShot125(double oneShot125[], SUMD_channel sumd_ch[])
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]

		oneShot125[0] = (sumd_ch -> ch1)/51.2 - 45.234375;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fb1c 	bl	8000534 <__aeabi_i2d>
 8003efc:	a3ce      	add	r3, pc, #824	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f7fc fcab 	bl	800085c <__aeabi_ddiv>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	a3cc      	add	r3, pc, #816	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc f9c0 	bl	8000298 <__aeabi_dsub>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	e9c1 2300 	strd	r2, r3, [r1]
		oneShot125[1] = (sumd_ch -> ch2)/51.2 - 45.234375;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	885b      	ldrh	r3, [r3, #2]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fb04 	bl	8000534 <__aeabi_i2d>
 8003f2c:	a3c2      	add	r3, pc, #776	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc fc93 	bl	800085c <__aeabi_ddiv>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f103 0408 	add.w	r4, r3, #8
 8003f44:	a3be      	add	r3, pc, #760	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f7fc f9a5 	bl	8000298 <__aeabi_dsub>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[2] = (sumd_ch -> ch3)/51.2 - 45.234375;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	889b      	ldrh	r3, [r3, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc faea 	bl	8000534 <__aeabi_i2d>
 8003f60:	a3b5      	add	r3, pc, #724	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f7fc fc79 	bl	800085c <__aeabi_ddiv>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f103 0410 	add.w	r4, r3, #16
 8003f78:	a3b1      	add	r3, pc, #708	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f7fc f98b 	bl	8000298 <__aeabi_dsub>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[3] = (sumd_ch -> ch4)/51.2 - 45.234375;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	88db      	ldrh	r3, [r3, #6]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc fad0 	bl	8000534 <__aeabi_i2d>
 8003f94:	a3a8      	add	r3, pc, #672	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f7fc fc5f 	bl	800085c <__aeabi_ddiv>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f103 0418 	add.w	r4, r3, #24
 8003fac:	a3a4      	add	r3, pc, #656	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f7fc f971 	bl	8000298 <__aeabi_dsub>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[4] = (sumd_ch -> ch5)/51.2 - 45.234375;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	891b      	ldrh	r3, [r3, #8]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fab6 	bl	8000534 <__aeabi_i2d>
 8003fc8:	a39b      	add	r3, pc, #620	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc fc45 	bl	800085c <__aeabi_ddiv>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f103 0420 	add.w	r4, r3, #32
 8003fe0:	a397      	add	r3, pc, #604	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc f957 	bl	8000298 <__aeabi_dsub>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	e9c4 2300 	strd	r2, r3, [r4]

		oneShot125[5] = (sumd_ch -> ch6)/51.2 - 45.234375;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	895b      	ldrh	r3, [r3, #10]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc fa9c 	bl	8000534 <__aeabi_i2d>
 8003ffc:	a38e      	add	r3, pc, #568	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f7fc fc2b 	bl	800085c <__aeabi_ddiv>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8004014:	a38a      	add	r3, pc, #552	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f7fc f93d 	bl	8000298 <__aeabi_dsub>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[6] = (sumd_ch -> ch7)/51.2 - 45.234375;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	899b      	ldrh	r3, [r3, #12]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fc fa82 	bl	8000534 <__aeabi_i2d>
 8004030:	a381      	add	r3, pc, #516	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f7fc fc11 	bl	800085c <__aeabi_ddiv>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004048:	a37d      	add	r3, pc, #500	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	f7fc f923 	bl	8000298 <__aeabi_dsub>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[7] = (sumd_ch -> ch8)/51.2 - 45.234375;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	89db      	ldrh	r3, [r3, #14]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fa68 	bl	8000534 <__aeabi_i2d>
 8004064:	a374      	add	r3, pc, #464	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc fbf7 	bl	800085c <__aeabi_ddiv>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800407c:	a370      	add	r3, pc, #448	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f7fc f909 	bl	8000298 <__aeabi_dsub>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[8] = (sumd_ch -> ch9)/51.2 - 45.234375;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	8a1b      	ldrh	r3, [r3, #16]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa4e 	bl	8000534 <__aeabi_i2d>
 8004098:	a367      	add	r3, pc, #412	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc fbdd 	bl	800085c <__aeabi_ddiv>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80040b0:	a363      	add	r3, pc, #396	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc f8ef 	bl	8000298 <__aeabi_dsub>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[9] = (sumd_ch -> ch10)/51.2 - 45.234375;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	8a5b      	ldrh	r3, [r3, #18]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc fa34 	bl	8000534 <__aeabi_i2d>
 80040cc:	a35a      	add	r3, pc, #360	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f7fc fbc3 	bl	800085c <__aeabi_ddiv>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80040e4:	a356      	add	r3, pc, #344	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f8d5 	bl	8000298 <__aeabi_dsub>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	e9c4 2300 	strd	r2, r3, [r4]

		oneShot125[10] = (sumd_ch -> ch11)/51.2 - 45.234375;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	8a9b      	ldrh	r3, [r3, #20]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fc fa1a 	bl	8000534 <__aeabi_i2d>
 8004100:	a34d      	add	r3, pc, #308	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc fba9 	bl	800085c <__aeabi_ddiv>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004118:	a349      	add	r3, pc, #292	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f7fc f8bb 	bl	8000298 <__aeabi_dsub>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[11] = (sumd_ch -> ch12)/51.2 - 45.234375;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	8adb      	ldrh	r3, [r3, #22]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc fa00 	bl	8000534 <__aeabi_i2d>
 8004134:	a340      	add	r3, pc, #256	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f7fc fb8f 	bl	800085c <__aeabi_ddiv>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800414c:	a33c      	add	r3, pc, #240	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc f8a1 	bl	8000298 <__aeabi_dsub>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[12] = (sumd_ch -> ch13)/51.2 - 45.234375;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	8b1b      	ldrh	r3, [r3, #24]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc f9e6 	bl	8000534 <__aeabi_i2d>
 8004168:	a333      	add	r3, pc, #204	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f7fc fb75 	bl	800085c <__aeabi_ddiv>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8004180:	a32f      	add	r3, pc, #188	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f7fc f887 	bl	8000298 <__aeabi_dsub>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[13] = (sumd_ch -> ch14)/51.2 - 45.234375;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	8b5b      	ldrh	r3, [r3, #26]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc f9cc 	bl	8000534 <__aeabi_i2d>
 800419c:	a326      	add	r3, pc, #152	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f7fc fb5b 	bl	800085c <__aeabi_ddiv>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80041b4:	a322      	add	r3, pc, #136	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fc f86d 	bl	8000298 <__aeabi_dsub>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	e9c4 2300 	strd	r2, r3, [r4]
		oneShot125[15] = (sumd_ch -> ch15)/51.2 - 45.234375;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	8b9b      	ldrh	r3, [r3, #28]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f9b2 	bl	8000534 <__aeabi_i2d>
 80041d0:	a319      	add	r3, pc, #100	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc fb41 	bl	800085c <__aeabi_ddiv>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80041e8:	a315      	add	r3, pc, #84	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fc f853 	bl	8000298 <__aeabi_dsub>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	e9c4 2300 	strd	r2, r3, [r4]

		oneShot125[15] = (sumd_ch -> ch16)/51.2 - 45.234375;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	8bdb      	ldrh	r3, [r3, #30]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc f998 	bl	8000534 <__aeabi_i2d>
 8004204:	a30c      	add	r3, pc, #48	; (adr r3, 8004238 <ch_data_to_oneShot125+0x350>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc fb27 	bl	800085c <__aeabi_ddiv>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800421c:	a308      	add	r3, pc, #32	; (adr r3, 8004240 <ch_data_to_oneShot125+0x358>)
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f7fc f839 	bl	8000298 <__aeabi_dsub>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	e9c4 2300 	strd	r2, r3, [r4]


}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bd90      	pop	{r4, r7, pc}
 8004236:	bf00      	nop
 8004238:	9999999a 	.word	0x9999999a
 800423c:	40499999 	.word	0x40499999
 8004240:	00000000 	.word	0x00000000
 8004244:	40469e00 	.word	0x40469e00

08004248 <CRC16_check>:
  * @brief  Check whether CRC16-Sick output is valid
  * @param  sumd received data buffer array, length of the buffer.
  * @retval calculated crc validity. 0 when valid.
  */
uint8_t CRC16_check(uint8_t sumd_rx_buf[], uint8_t len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	73bb      	strb	r3, [r7, #14]
 800425c:	e00d      	b.n	800427a <CRC16_check+0x32>
    {
        crc = CRC16(crc,sumd_rx_buf[i]);
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	b298      	uxth	r0, r3
 8004262:	7bbb      	ldrb	r3, [r7, #14]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	f000 f80e 	bl	800428c <CRC16>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++)
 8004274:	7bbb      	ldrb	r3, [r7, #14]
 8004276:	3301      	adds	r3, #1
 8004278:	73bb      	strb	r3, [r7, #14]
 800427a:	7bba      	ldrb	r2, [r7, #14]
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	429a      	cmp	r2, r3
 8004280:	d3ed      	bcc.n	800425e <CRC16_check+0x16>
    }

    return crc;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <CRC16>:
  * @brief  calculate CRC16-Sick
  * @param
  * @retval calculated crc.
  */
uint16_t CRC16(uint16_t crc, uint8_t value)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	460a      	mov	r2, r1
 8004296:	80fb      	strh	r3, [r7, #6]
 8004298:	4613      	mov	r3, r2
 800429a:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	crc = crc ^ (int16_t)value<<8;
 800429c:	797b      	ldrb	r3, [r7, #5]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	b21a      	sxth	r2, r3
 80042a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a6:	4053      	eors	r3, r2
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	80fb      	strh	r3, [r7, #6]
	for(i=0; i<8; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	e013      	b.n	80042da <CRC16+0x4e>
		{
		 if (crc & 0x8000)
 80042b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	da09      	bge.n	80042ce <CRC16+0x42>
		 crc = (crc << 1) ^ CRC_POLYNOME;
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	b21b      	sxth	r3, r3
 80042c0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80042c4:	f083 0301 	eor.w	r3, r3, #1
 80042c8:	b21b      	sxth	r3, r3
 80042ca:	80fb      	strh	r3, [r7, #6]
 80042cc:	e002      	b.n	80042d4 <CRC16+0x48>

		 else
		 crc = (crc << 1);
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	80fb      	strh	r3, [r7, #6]
	for(i=0; i<8; i++)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	3301      	adds	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b07      	cmp	r3, #7
 80042de:	d9e8      	bls.n	80042b2 <CRC16+0x26>
		}
	return crc;
 80042e0:	88fb      	ldrh	r3, [r7, #6]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0
  return 1;
 80042f2:	2301      	movs	r3, #1
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_kill>:

int _kill(int pid, int sig)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004308:	f001 fe86 	bl	8006018 <__errno>
 800430c:	4603      	mov	r3, r0
 800430e:	2216      	movs	r2, #22
 8004310:	601a      	str	r2, [r3, #0]
  return -1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_exit>:

void _exit (int status)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004326:	f04f 31ff 	mov.w	r1, #4294967295
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff ffe7 	bl	80042fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8004330:	e7fe      	b.n	8004330 <_exit+0x12>

08004332 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e00a      	b.n	800435a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004344:	f3af 8000 	nop.w
 8004348:	4601      	mov	r1, r0
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	60ba      	str	r2, [r7, #8]
 8004350:	b2ca      	uxtb	r2, r1
 8004352:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3301      	adds	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	dbf0      	blt.n	8004344 <_read+0x12>
  }

  return len;
 8004362:	687b      	ldr	r3, [r7, #4]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_close>:
  }
  return len;
}

int _close(int file)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004394:	605a      	str	r2, [r3, #4]
  return 0;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <_isatty>:

int _isatty(int file)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043ac:	2301      	movs	r3, #1
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043dc:	4a14      	ldr	r2, [pc, #80]	; (8004430 <_sbrk+0x5c>)
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <_sbrk+0x60>)
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043e8:	4b13      	ldr	r3, [pc, #76]	; (8004438 <_sbrk+0x64>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <_sbrk+0x64>)
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <_sbrk+0x68>)
 80043f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <_sbrk+0x64>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	429a      	cmp	r2, r3
 8004402:	d207      	bcs.n	8004414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004404:	f001 fe08 	bl	8006018 <__errno>
 8004408:	4603      	mov	r3, r0
 800440a:	220c      	movs	r2, #12
 800440c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e009      	b.n	8004428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <_sbrk+0x64>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <_sbrk+0x64>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	4a05      	ldr	r2, [pc, #20]	; (8004438 <_sbrk+0x64>)
 8004424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004426:	68fb      	ldr	r3, [r7, #12]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20020000 	.word	0x20020000
 8004434:	00000400 	.word	0x00000400
 8004438:	20000584 	.word	0x20000584
 800443c:	200005a0 	.word	0x200005a0

08004440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <SystemInit+0x20>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	4a05      	ldr	r2, [pc, #20]	; (8004460 <SystemInit+0x20>)
 800444c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <__NVIC_GetPriorityGrouping>:
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <__NVIC_GetPriorityGrouping+0x18>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f003 0307 	and.w	r3, r3, #7
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <__NVIC_EnableIRQ>:
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	db0b      	blt.n	80044aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	f003 021f 	and.w	r2, r3, #31
 8004498:	4907      	ldr	r1, [pc, #28]	; (80044b8 <__NVIC_EnableIRQ+0x38>)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2001      	movs	r0, #1
 80044a2:	fa00 f202 	lsl.w	r2, r0, r2
 80044a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000e100 	.word	0xe000e100

080044bc <__NVIC_SetPriority>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	6039      	str	r1, [r7, #0]
 80044c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	db0a      	blt.n	80044e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	490c      	ldr	r1, [pc, #48]	; (8004508 <__NVIC_SetPriority+0x4c>)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	0112      	lsls	r2, r2, #4
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	440b      	add	r3, r1
 80044e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044e4:	e00a      	b.n	80044fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <__NVIC_SetPriority+0x50>)
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	3b04      	subs	r3, #4
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	440b      	add	r3, r1
 80044fa:	761a      	strb	r2, [r3, #24]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000e100 	.word	0xe000e100
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <NVIC_EncodePriority>:
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f1c3 0307 	rsb	r3, r3, #7
 800452a:	2b04      	cmp	r3, #4
 800452c:	bf28      	it	cs
 800452e:	2304      	movcs	r3, #4
 8004530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3304      	adds	r3, #4
 8004536:	2b06      	cmp	r3, #6
 8004538:	d902      	bls.n	8004540 <NVIC_EncodePriority+0x30>
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3b03      	subs	r3, #3
 800453e:	e000      	b.n	8004542 <NVIC_EncodePriority+0x32>
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	401a      	ands	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004558:	f04f 31ff 	mov.w	r1, #4294967295
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	43d9      	mvns	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004568:	4313      	orrs	r3, r2
}
 800456a:	4618      	mov	r0, r3
 800456c:	3724      	adds	r7, #36	; 0x24
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <LL_USART_Enable>:
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_USART_ConfigAsyncMode>:
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <LL_AHB1_GRP1_EnableClock>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80045cc:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80045ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d0:	4907      	ldr	r1, [pc, #28]	; (80045f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80045da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4013      	ands	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40023800 	.word	0x40023800

080045f4 <LL_APB1_GRP1_EnableClock>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <LL_APB1_GRP1_EnableClock+0x2c>)
 80045fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004600:	4907      	ldr	r1, [pc, #28]	; (8004620 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4313      	orrs	r3, r2
 8004606:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <LL_APB1_GRP1_EnableClock+0x2c>)
 800460a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4013      	ands	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40023800 	.word	0x40023800

08004624 <LL_APB2_GRP1_EnableClock>:
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <LL_APB2_GRP1_EnableClock+0x2c>)
 800462e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004630:	4907      	ldr	r1, [pc, #28]	; (8004650 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4313      	orrs	r3, r2
 8004636:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <LL_APB2_GRP1_EnableClock+0x2c>)
 800463a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4013      	ands	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40023800 	.word	0x40023800

08004654 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800465a:	f107 031c 	add.w	r3, r7, #28
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	609a      	str	r2, [r3, #8]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	615a      	str	r2, [r3, #20]
 800466c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
 800467c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800467e:	2010      	movs	r0, #16
 8004680:	f7ff ffd0 	bl	8004624 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004684:	2001      	movs	r0, #1
 8004686:	f7ff ff9d 	bl	80045c4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = SUMD_TX_Pin|SUMD_RX_Pin;
 800468a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800468e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004690:	2302      	movs	r3, #2
 8004692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004694:	2303      	movs	r3, #3
 8004696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80046a0:	2307      	movs	r3, #7
 80046a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4818      	ldr	r0, [pc, #96]	; (800470c <MX_USART1_UART_Init+0xb8>)
 80046aa:	f000 ffa2 	bl	80055f2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80046ae:	f7ff fed9 	bl	8004464 <__NVIC_GetPriorityGrouping>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2200      	movs	r2, #0
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff29 	bl	8004510 <NVIC_EncodePriority>
 80046be:	4603      	mov	r3, r0
 80046c0:	4619      	mov	r1, r3
 80046c2:	2025      	movs	r0, #37	; 0x25
 80046c4:	f7ff fefa 	bl	80044bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80046c8:	2025      	movs	r0, #37	; 0x25
 80046ca:	f7ff fed9 	bl	8004480 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80046ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80046d2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80046d8:	2300      	movs	r3, #0
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80046dc:	2300      	movs	r3, #0
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80046e0:	230c      	movs	r3, #12
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80046e8:	2300      	movs	r3, #0
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80046ec:	f107 031c 	add.w	r3, r7, #28
 80046f0:	4619      	mov	r1, r3
 80046f2:	4807      	ldr	r0, [pc, #28]	; (8004710 <MX_USART1_UART_Init+0xbc>)
 80046f4:	f001 fc06 	bl	8005f04 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80046f8:	4805      	ldr	r0, [pc, #20]	; (8004710 <MX_USART1_UART_Init+0xbc>)
 80046fa:	f7ff ff4c 	bl	8004596 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80046fe:	4804      	ldr	r0, [pc, #16]	; (8004710 <MX_USART1_UART_Init+0xbc>)
 8004700:	f7ff ff39 	bl	8004576 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004704:	bf00      	nop
 8004706:	3738      	adds	r7, #56	; 0x38
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40020000 	.word	0x40020000
 8004710:	40011000 	.word	0x40011000

08004714 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08e      	sub	sp, #56	; 0x38
 8004718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800471a:	f107 031c 	add.w	r3, r7, #28
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	609a      	str	r2, [r3, #8]
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	611a      	str	r2, [r3, #16]
 800472a:	615a      	str	r2, [r3, #20]
 800472c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
 800473c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800473e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004742:	f7ff ff57 	bl	80045f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004746:	2001      	movs	r0, #1
 8004748:	f7ff ff3c 	bl	80045c4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = BLUETOOTH_TX_Pin|BLUETOOTH_RX_Pin;
 800474c:	230c      	movs	r3, #12
 800474e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004750:	2302      	movs	r3, #2
 8004752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004754:	2303      	movs	r3, #3
 8004756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004760:	2307      	movs	r3, #7
 8004762:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4818      	ldr	r0, [pc, #96]	; (80047cc <MX_USART2_UART_Init+0xb8>)
 800476a:	f000 ff42 	bl	80055f2 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800476e:	f7ff fe79 	bl	8004464 <__NVIC_GetPriorityGrouping>
 8004772:	4603      	mov	r3, r0
 8004774:	2200      	movs	r2, #0
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fec9 	bl	8004510 <NVIC_EncodePriority>
 800477e:	4603      	mov	r3, r0
 8004780:	4619      	mov	r1, r3
 8004782:	2026      	movs	r0, #38	; 0x26
 8004784:	f7ff fe9a 	bl	80044bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8004788:	2026      	movs	r0, #38	; 0x26
 800478a:	f7ff fe79 	bl	8004480 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800478e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004792:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800479c:	2300      	movs	r3, #0
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80047a0:	230c      	movs	r3, #12
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80047a8:	2300      	movs	r3, #0
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80047ac:	f107 031c 	add.w	r3, r7, #28
 80047b0:	4619      	mov	r1, r3
 80047b2:	4807      	ldr	r0, [pc, #28]	; (80047d0 <MX_USART2_UART_Init+0xbc>)
 80047b4:	f001 fba6 	bl	8005f04 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80047b8:	4805      	ldr	r0, [pc, #20]	; (80047d0 <MX_USART2_UART_Init+0xbc>)
 80047ba:	f7ff feec 	bl	8004596 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80047be:	4804      	ldr	r0, [pc, #16]	; (80047d0 <MX_USART2_UART_Init+0xbc>)
 80047c0:	f7ff fed9 	bl	8004576 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80047c4:	bf00      	nop
 80047c6:	3738      	adds	r7, #56	; 0x38
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40020000 	.word	0x40020000
 80047d0:	40004400 	.word	0x40004400

080047d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80047d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800480c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047d8:	480d      	ldr	r0, [pc, #52]	; (8004810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80047da:	490e      	ldr	r1, [pc, #56]	; (8004814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047dc:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047e0:	e002      	b.n	80047e8 <LoopCopyDataInit>

080047e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047e6:	3304      	adds	r3, #4

080047e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047ec:	d3f9      	bcc.n	80047e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80047f0:	4c0b      	ldr	r4, [pc, #44]	; (8004820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80047f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f4:	e001      	b.n	80047fa <LoopFillZerobss>

080047f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047f8:	3204      	adds	r2, #4

080047fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047fc:	d3fb      	bcc.n	80047f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047fe:	f7ff fe1f 	bl	8004440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004802:	f001 fc0f 	bl	8006024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004806:	f7fd fddf 	bl	80023c8 <main>
  bx  lr    
 800480a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800480c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004814:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8004818:	0800a880 	.word	0x0800a880
  ldr r2, =_sbss
 800481c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8004820:	2000059c 	.word	0x2000059c

08004824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004824:	e7fe      	b.n	8004824 <ADC_IRQHandler>
	...

08004828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <HAL_Init+0x40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_Init+0x40>)
 8004832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_Init+0x40>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_Init+0x40>)
 800483e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_Init+0x40>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <HAL_Init+0x40>)
 800484a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004850:	2003      	movs	r0, #3
 8004852:	f000 f931 	bl	8004ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004856:	200f      	movs	r0, #15
 8004858:	f000 f808 	bl	800486c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800485c:	f7ff f8fe 	bl	8003a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00

0800486c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_InitTick+0x54>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_InitTick+0x58>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004882:	fbb3 f3f1 	udiv	r3, r3, r1
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f93b 	bl	8004b06 <HAL_SYSTICK_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e00e      	b.n	80048b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d80a      	bhi.n	80048b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048a0:	2200      	movs	r2, #0
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	f000 f911 	bl	8004ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048ac:	4a06      	ldr	r2, [pc, #24]	; (80048c8 <HAL_InitTick+0x5c>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000098 	.word	0x20000098
 80048c4:	200000a0 	.word	0x200000a0
 80048c8:	2000009c 	.word	0x2000009c

080048cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_IncTick+0x20>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_IncTick+0x24>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4413      	add	r3, r2
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <HAL_IncTick+0x24>)
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	200000a0 	.word	0x200000a0
 80048f0:	20000588 	.word	0x20000588

080048f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return uwTick;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <HAL_GetTick+0x14>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000588 	.word	0x20000588

0800490c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004914:	f7ff ffee 	bl	80048f4 <HAL_GetTick>
 8004918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d005      	beq.n	8004932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_Delay+0x44>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004932:	bf00      	nop
 8004934:	f7ff ffde 	bl	80048f4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	429a      	cmp	r2, r3
 8004942:	d8f7      	bhi.n	8004934 <HAL_Delay+0x28>
  {
  }
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200000a0 	.word	0x200000a0

08004954 <__NVIC_SetPriorityGrouping>:
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <__NVIC_SetPriorityGrouping+0x44>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004970:	4013      	ands	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800497c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <__NVIC_SetPriorityGrouping+0x44>)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <__NVIC_GetPriorityGrouping>:
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <__NVIC_GetPriorityGrouping+0x18>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	f003 0307 	and.w	r3, r3, #7
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <__NVIC_SetPriority>:
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	6039      	str	r1, [r7, #0]
 80049c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	db0a      	blt.n	80049e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	490c      	ldr	r1, [pc, #48]	; (8004a04 <__NVIC_SetPriority+0x4c>)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	0112      	lsls	r2, r2, #4
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	440b      	add	r3, r1
 80049dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049e0:	e00a      	b.n	80049f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	4908      	ldr	r1, [pc, #32]	; (8004a08 <__NVIC_SetPriority+0x50>)
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	3b04      	subs	r3, #4
 80049f0:	0112      	lsls	r2, r2, #4
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	440b      	add	r3, r1
 80049f6:	761a      	strb	r2, [r3, #24]
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000e100 	.word	0xe000e100
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <NVIC_EncodePriority>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f1c3 0307 	rsb	r3, r3, #7
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	bf28      	it	cs
 8004a2a:	2304      	movcs	r3, #4
 8004a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d902      	bls.n	8004a3c <NVIC_EncodePriority+0x30>
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3b03      	subs	r3, #3
 8004a3a:	e000      	b.n	8004a3e <NVIC_EncodePriority+0x32>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	401a      	ands	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a54:	f04f 31ff 	mov.w	r1, #4294967295
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	43d9      	mvns	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a64:	4313      	orrs	r3, r2
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3724      	adds	r7, #36	; 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a84:	d301      	bcc.n	8004a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a86:	2301      	movs	r3, #1
 8004a88:	e00f      	b.n	8004aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <SysTick_Config+0x40>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a92:	210f      	movs	r1, #15
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	f7ff ff8e 	bl	80049b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <SysTick_Config+0x40>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aa2:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <SysTick_Config+0x40>)
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	e000e010 	.word	0xe000e010

08004ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ff47 	bl	8004954 <__NVIC_SetPriorityGrouping>
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b086      	sub	sp, #24
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ae0:	f7ff ff5c 	bl	800499c <__NVIC_GetPriorityGrouping>
 8004ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f7ff ff8e 	bl	8004a0c <NVIC_EncodePriority>
 8004af0:	4602      	mov	r2, r0
 8004af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ff5d 	bl	80049b8 <__NVIC_SetPriority>
}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ffb0 	bl	8004a74 <SysTick_Config>
 8004b14:	4603      	mov	r3, r0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e267      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d075      	beq.n	8004c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	4b88      	ldr	r3, [pc, #544]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d00c      	beq.n	8004b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b4a:	4b85      	ldr	r3, [pc, #532]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d112      	bne.n	8004b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b56:	4b82      	ldr	r3, [pc, #520]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b62:	d10b      	bne.n	8004b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b64:	4b7e      	ldr	r3, [pc, #504]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05b      	beq.n	8004c28 <HAL_RCC_OscConfig+0x108>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d157      	bne.n	8004c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e242      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b84:	d106      	bne.n	8004b94 <HAL_RCC_OscConfig+0x74>
 8004b86:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a75      	ldr	r2, [pc, #468]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e01d      	b.n	8004bd0 <HAL_RCC_OscConfig+0xb0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x98>
 8004b9e:	4b70      	ldr	r3, [pc, #448]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6f      	ldr	r2, [pc, #444]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b6d      	ldr	r3, [pc, #436]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a6c      	ldr	r2, [pc, #432]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCC_OscConfig+0xb0>
 8004bb8:	4b69      	ldr	r3, [pc, #420]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a68      	ldr	r2, [pc, #416]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4b66      	ldr	r3, [pc, #408]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a65      	ldr	r2, [pc, #404]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d013      	beq.n	8004c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7ff fe8c 	bl	80048f4 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be0:	f7ff fe88 	bl	80048f4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e207      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	4b5b      	ldr	r3, [pc, #364]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0xc0>
 8004bfe:	e014      	b.n	8004c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7ff fe78 	bl	80048f4 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c08:	f7ff fe74 	bl	80048f4 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	; 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e1f3      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1a:	4b51      	ldr	r3, [pc, #324]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0xe8>
 8004c26:	e000      	b.n	8004c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d063      	beq.n	8004cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c36:	4b4a      	ldr	r3, [pc, #296]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c42:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d11c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4e:	4b44      	ldr	r3, [pc, #272]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d116      	bne.n	8004c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5a:	4b41      	ldr	r3, [pc, #260]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_RCC_OscConfig+0x152>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e1c7      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c72:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4937      	ldr	r1, [pc, #220]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c86:	e03a      	b.n	8004cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c90:	4b34      	ldr	r3, [pc, #208]	; (8004d64 <HAL_RCC_OscConfig+0x244>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7ff fe2d 	bl	80048f4 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9e:	f7ff fe29 	bl	80048f4 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e1a8      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb0:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4925      	ldr	r1, [pc, #148]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	600b      	str	r3, [r1, #0]
 8004cd0:	e015      	b.n	8004cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7ff fe0c 	bl	80048f4 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce0:	f7ff fe08 	bl	80048f4 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e187      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d036      	beq.n	8004d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <HAL_RCC_OscConfig+0x248>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7ff fdec 	bl	80048f4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d20:	f7ff fde8 	bl	80048f4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e167      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <HAL_RCC_OscConfig+0x240>)
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x200>
 8004d3e:	e01b      	b.n	8004d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_OscConfig+0x248>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7ff fdd5 	bl	80048f4 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	e00e      	b.n	8004d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d4e:	f7ff fdd1 	bl	80048f4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d907      	bls.n	8004d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e150      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	42470000 	.word	0x42470000
 8004d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d6c:	4b88      	ldr	r3, [pc, #544]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1ea      	bne.n	8004d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8097 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8a:	4b81      	ldr	r3, [pc, #516]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10f      	bne.n	8004db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	4b7d      	ldr	r3, [pc, #500]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	4a7c      	ldr	r2, [pc, #496]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6413      	str	r3, [r2, #64]	; 0x40
 8004da6:	4b7a      	ldr	r3, [pc, #488]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db6:	4b77      	ldr	r3, [pc, #476]	; (8004f94 <HAL_RCC_OscConfig+0x474>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d118      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc2:	4b74      	ldr	r3, [pc, #464]	; (8004f94 <HAL_RCC_OscConfig+0x474>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a73      	ldr	r2, [pc, #460]	; (8004f94 <HAL_RCC_OscConfig+0x474>)
 8004dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dce:	f7ff fd91 	bl	80048f4 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd6:	f7ff fd8d 	bl	80048f4 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e10c      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de8:	4b6a      	ldr	r3, [pc, #424]	; (8004f94 <HAL_RCC_OscConfig+0x474>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x2ea>
 8004dfc:	4b64      	ldr	r3, [pc, #400]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a63      	ldr	r2, [pc, #396]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	e01c      	b.n	8004e44 <HAL_RCC_OscConfig+0x324>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b05      	cmp	r3, #5
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x30c>
 8004e12:	4b5f      	ldr	r3, [pc, #380]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	4a5e      	ldr	r2, [pc, #376]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1e:	4b5c      	ldr	r3, [pc, #368]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a5b      	ldr	r2, [pc, #364]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCC_OscConfig+0x324>
 8004e2c:	4b58      	ldr	r3, [pc, #352]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e30:	4a57      	ldr	r2, [pc, #348]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e32:	f023 0301 	bic.w	r3, r3, #1
 8004e36:	6713      	str	r3, [r2, #112]	; 0x70
 8004e38:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	4a54      	ldr	r2, [pc, #336]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	f023 0304 	bic.w	r3, r3, #4
 8004e42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d015      	beq.n	8004e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7ff fd52 	bl	80048f4 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7ff fd4e 	bl	80048f4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0cb      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6a:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ee      	beq.n	8004e54 <HAL_RCC_OscConfig+0x334>
 8004e76:	e014      	b.n	8004ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e78:	f7ff fd3c 	bl	80048f4 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	f7ff fd38 	bl	80048f4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e0b5      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e96:	4b3e      	ldr	r3, [pc, #248]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1ee      	bne.n	8004e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea8:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	4a38      	ldr	r2, [pc, #224]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80a1 	beq.w	8005000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ebe:	4b34      	ldr	r3, [pc, #208]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d05c      	beq.n	8004f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d141      	bne.n	8004f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <HAL_RCC_OscConfig+0x478>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7ff fd0c 	bl	80048f4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7ff fd08 	bl	80048f4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e087      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	3b01      	subs	r3, #1
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	061b      	lsls	r3, r3, #24
 8004f22:	491b      	ldr	r1, [pc, #108]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f28:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <HAL_RCC_OscConfig+0x478>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2e:	f7ff fce1 	bl	80048f4 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f36:	f7ff fcdd 	bl	80048f4 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e05c      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f48:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x416>
 8004f54:	e054      	b.n	8005000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_RCC_OscConfig+0x478>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7ff fcca 	bl	80048f4 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f64:	f7ff fcc6 	bl	80048f4 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e045      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCC_OscConfig+0x470>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x444>
 8004f82:	e03d      	b.n	8005000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d107      	bne.n	8004f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e038      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40007000 	.word	0x40007000
 8004f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x4ec>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d028      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d121      	bne.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d11a      	bne.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d111      	bne.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d107      	bne.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800

08005010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0cc      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005024:	4b68      	ldr	r3, [pc, #416]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d90c      	bls.n	800504c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b65      	ldr	r3, [pc, #404]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b63      	ldr	r3, [pc, #396]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0b8      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d020      	beq.n	800509a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005064:	4b59      	ldr	r3, [pc, #356]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4a58      	ldr	r2, [pc, #352]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800506e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800507c:	4b53      	ldr	r3, [pc, #332]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a52      	ldr	r2, [pc, #328]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005088:	4b50      	ldr	r3, [pc, #320]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	494d      	ldr	r1, [pc, #308]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d044      	beq.n	8005130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	4b47      	ldr	r3, [pc, #284]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d119      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e07f      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d003      	beq.n	80050ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ce:	4b3f      	ldr	r3, [pc, #252]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e06f      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050de:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e067      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	4b37      	ldr	r3, [pc, #220]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 0203 	bic.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4934      	ldr	r1, [pc, #208]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005100:	f7ff fbf8 	bl	80048f4 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7ff fbf4 	bl	80048f4 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e04f      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 020c 	and.w	r2, r3, #12
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	429a      	cmp	r2, r3
 800512e:	d1eb      	bne.n	8005108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d20c      	bcs.n	8005158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e032      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005164:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4916      	ldr	r1, [pc, #88]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	490e      	ldr	r1, [pc, #56]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005196:	f000 f821 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 800519a:	4602      	mov	r2, r0
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	490a      	ldr	r1, [pc, #40]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	5ccb      	ldrb	r3, [r1, r3]
 80051aa:	fa22 f303 	lsr.w	r3, r2, r3
 80051ae:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <HAL_RCC_ClockConfig+0x1c8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fb58 	bl	800486c <HAL_InitTick>

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40023c00 	.word	0x40023c00
 80051cc:	40023800 	.word	0x40023800
 80051d0:	0800a2a4 	.word	0x0800a2a4
 80051d4:	20000098 	.word	0x20000098
 80051d8:	2000009c 	.word	0x2000009c

080051dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e0:	b094      	sub	sp, #80	; 0x50
 80051e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	647b      	str	r3, [r7, #68]	; 0x44
 80051e8:	2300      	movs	r3, #0
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ec:	2300      	movs	r3, #0
 80051ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f4:	4b79      	ldr	r3, [pc, #484]	; (80053dc <HAL_RCC_GetSysClockFreq+0x200>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 030c 	and.w	r3, r3, #12
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d00d      	beq.n	800521c <HAL_RCC_GetSysClockFreq+0x40>
 8005200:	2b08      	cmp	r3, #8
 8005202:	f200 80e1 	bhi.w	80053c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x34>
 800520a:	2b04      	cmp	r3, #4
 800520c:	d003      	beq.n	8005216 <HAL_RCC_GetSysClockFreq+0x3a>
 800520e:	e0db      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b73      	ldr	r3, [pc, #460]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005212:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005214:	e0db      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005216:	4b73      	ldr	r3, [pc, #460]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800521a:	e0d8      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800521c:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005224:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005226:	4b6d      	ldr	r3, [pc, #436]	; (80053dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d063      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005232:	4b6a      	ldr	r3, [pc, #424]	; (80053dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	2200      	movs	r2, #0
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
 800523c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005244:	633b      	str	r3, [r7, #48]	; 0x30
 8005246:	2300      	movs	r3, #0
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
 800524a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800524e:	4622      	mov	r2, r4
 8005250:	462b      	mov	r3, r5
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	0159      	lsls	r1, r3, #5
 800525c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005260:	0150      	lsls	r0, r2, #5
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4621      	mov	r1, r4
 8005268:	1a51      	subs	r1, r2, r1
 800526a:	6139      	str	r1, [r7, #16]
 800526c:	4629      	mov	r1, r5
 800526e:	eb63 0301 	sbc.w	r3, r3, r1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005280:	4659      	mov	r1, fp
 8005282:	018b      	lsls	r3, r1, #6
 8005284:	4651      	mov	r1, sl
 8005286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800528a:	4651      	mov	r1, sl
 800528c:	018a      	lsls	r2, r1, #6
 800528e:	4651      	mov	r1, sl
 8005290:	ebb2 0801 	subs.w	r8, r2, r1
 8005294:	4659      	mov	r1, fp
 8005296:	eb63 0901 	sbc.w	r9, r3, r1
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ae:	4690      	mov	r8, r2
 80052b0:	4699      	mov	r9, r3
 80052b2:	4623      	mov	r3, r4
 80052b4:	eb18 0303 	adds.w	r3, r8, r3
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	462b      	mov	r3, r5
 80052bc:	eb49 0303 	adc.w	r3, r9, r3
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ce:	4629      	mov	r1, r5
 80052d0:	024b      	lsls	r3, r1, #9
 80052d2:	4621      	mov	r1, r4
 80052d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052d8:	4621      	mov	r1, r4
 80052da:	024a      	lsls	r2, r1, #9
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e2:	2200      	movs	r2, #0
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ec:	f7fb fcd4 	bl	8000c98 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4613      	mov	r3, r2
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f8:	e058      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fa:	4b38      	ldr	r3, [pc, #224]	; (80053dc <HAL_RCC_GetSysClockFreq+0x200>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	099b      	lsrs	r3, r3, #6
 8005300:	2200      	movs	r2, #0
 8005302:	4618      	mov	r0, r3
 8005304:	4611      	mov	r1, r2
 8005306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800530a:	623b      	str	r3, [r7, #32]
 800530c:	2300      	movs	r3, #0
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
 8005310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005314:	4642      	mov	r2, r8
 8005316:	464b      	mov	r3, r9
 8005318:	f04f 0000 	mov.w	r0, #0
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	0159      	lsls	r1, r3, #5
 8005322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005326:	0150      	lsls	r0, r2, #5
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4641      	mov	r1, r8
 800532e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005332:	4649      	mov	r1, r9
 8005334:	eb63 0b01 	sbc.w	fp, r3, r1
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800534c:	ebb2 040a 	subs.w	r4, r2, sl
 8005350:	eb63 050b 	sbc.w	r5, r3, fp
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	00eb      	lsls	r3, r5, #3
 800535e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005362:	00e2      	lsls	r2, r4, #3
 8005364:	4614      	mov	r4, r2
 8005366:	461d      	mov	r5, r3
 8005368:	4643      	mov	r3, r8
 800536a:	18e3      	adds	r3, r4, r3
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	464b      	mov	r3, r9
 8005370:	eb45 0303 	adc.w	r3, r5, r3
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005382:	4629      	mov	r1, r5
 8005384:	028b      	lsls	r3, r1, #10
 8005386:	4621      	mov	r1, r4
 8005388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800538c:	4621      	mov	r1, r4
 800538e:	028a      	lsls	r2, r1, #10
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005396:	2200      	movs	r2, #0
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	61fa      	str	r2, [r7, #28]
 800539c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a0:	f7fb fc7a 	bl	8000c98 <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4613      	mov	r3, r2
 80053aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCC_GetSysClockFreq+0x200>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	3301      	adds	r3, #1
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053c6:	e002      	b.n	80053ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3750      	adds	r7, #80	; 0x50
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800
 80053e0:	00f42400 	.word	0x00f42400
 80053e4:	007a1200 	.word	0x007a1200

080053e8 <LL_GPIO_SetPinMode>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	fa93 f3a3 	rbit	r3, r3
 8005402:	613b      	str	r3, [r7, #16]
  return result;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	2103      	movs	r1, #3
 8005410:	fa01 f303 	lsl.w	r3, r1, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	401a      	ands	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	fa93 f3a3 	rbit	r3, r3
 8005422:	61bb      	str	r3, [r7, #24]
  return result;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_GPIO_SetPinOutputType>:
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	43db      	mvns	r3, r3
 800545a:	401a      	ands	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	605a      	str	r2, [r3, #4]
}
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_GPIO_SetPinSpeed>:
{
 8005476:	b480      	push	{r7}
 8005478:	b089      	sub	sp, #36	; 0x24
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	fa93 f3a3 	rbit	r3, r3
 8005490:	613b      	str	r3, [r7, #16]
  return result;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	2103      	movs	r1, #3
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	401a      	ands	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	fa93 f3a3 	rbit	r3, r3
 80054b0:	61bb      	str	r3, [r7, #24]
  return result;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	fab3 f383 	clz	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	431a      	orrs	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	609a      	str	r2, [r3, #8]
}
 80054c8:	bf00      	nop
 80054ca:	3724      	adds	r7, #36	; 0x24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <LL_GPIO_SetPinPull>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	fa93 f3a3 	rbit	r3, r3
 80054ee:	613b      	str	r3, [r7, #16]
  return result;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	fab3 f383 	clz	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2103      	movs	r1, #3
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	61bb      	str	r3, [r7, #24]
  return result;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	fab3 f383 	clz	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	60da      	str	r2, [r3, #12]
}
 8005526:	bf00      	nop
 8005528:	3724      	adds	r7, #36	; 0x24
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <LL_GPIO_SetAFPin_0_7>:
{
 8005532:	b480      	push	{r7}
 8005534:	b089      	sub	sp, #36	; 0x24
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	fa93 f3a3 	rbit	r3, r3
 800554c:	613b      	str	r3, [r7, #16]
  return result;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	b2db      	uxtb	r3, r3
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	210f      	movs	r1, #15
 800555a:	fa01 f303 	lsl.w	r3, r1, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	401a      	ands	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	fa93 f3a3 	rbit	r3, r3
 800556c:	61bb      	str	r3, [r7, #24]
  return result;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	fab3 f383 	clz	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	431a      	orrs	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	3724      	adds	r7, #36	; 0x24
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_GPIO_SetAFPin_8_15>:
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	613b      	str	r3, [r7, #16]
  return result;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	210f      	movs	r1, #15
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	401a      	ands	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	fa93 f3a3 	rbit	r3, r3
 80055ce:	61bb      	str	r3, [r7, #24]
  return result;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	fab3 f383 	clz	r3, r3
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	431a      	orrs	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80055e6:	bf00      	nop
 80055e8:	3724      	adds	r7, #36	; 0x24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b088      	sub	sp, #32
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	613b      	str	r3, [r7, #16]
  return result;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	fab3 f383 	clz	r3, r3
 8005618:	b2db      	uxtb	r3, r3
 800561a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800561c:	e050      	b.n	80056c0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2101      	movs	r1, #1
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d042      	beq.n	80056ba <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d003      	beq.n	8005644 <LL_GPIO_Init+0x52>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d10d      	bne.n	8005660 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	461a      	mov	r2, r3
 800564a:	69b9      	ldr	r1, [r7, #24]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ff12 	bl	8005476 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	461a      	mov	r2, r3
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fef3 	bl	8005446 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	461a      	mov	r2, r3
 8005666:	69b9      	ldr	r1, [r7, #24]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff33 	bl	80054d4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d11a      	bne.n	80056ac <LL_GPIO_Init+0xba>
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	fa93 f3a3 	rbit	r3, r3
 8005680:	60bb      	str	r3, [r7, #8]
  return result;
 8005682:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005684:	fab3 f383 	clz	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b07      	cmp	r3, #7
 800568c:	d807      	bhi.n	800569e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	461a      	mov	r2, r3
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff ff4b 	bl	8005532 <LL_GPIO_SetAFPin_0_7>
 800569c:	e006      	b.n	80056ac <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	461a      	mov	r2, r3
 80056a4:	69b9      	ldr	r1, [r7, #24]
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff ff72 	bl	8005590 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	461a      	mov	r2, r3
 80056b2:	69b9      	ldr	r1, [r7, #24]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fe97 	bl	80053e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3301      	adds	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1a7      	bne.n	800561e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <LL_RCC_GetSysClkSource+0x18>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 030c 	and.w	r3, r3, #12
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40023800 	.word	0x40023800

080056f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <LL_RCC_GetAHBPrescaler+0x18>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800

08005710 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40023800 	.word	0x40023800

0800572c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005730:	4b04      	ldr	r3, [pc, #16]	; (8005744 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005738:	4618      	mov	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800

08005748 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <LL_RCC_PLL_GetMainSource+0x18>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800

08005764 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <LL_RCC_PLL_GetN+0x18>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	099b      	lsrs	r3, r3, #6
 800576e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005772:	4618      	mov	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40023800 	.word	0x40023800

08005780 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005784:	4b04      	ldr	r3, [pc, #16]	; (8005798 <LL_RCC_PLL_GetP+0x18>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800578c:	4618      	mov	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800

0800579c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <LL_RCC_PLL_GetDivider+0x18>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800

080057b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80057c0:	f000 f820 	bl	8005804 <RCC_GetSystemClockFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f840 	bl	8005854 <RCC_GetHCLKClockFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f84e 	bl	8005880 <RCC_GetPCLK1ClockFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f85a 	bl	80058a8 <RCC_GetPCLK2ClockFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60da      	str	r2, [r3, #12]
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800580e:	f7ff ff63 	bl	80056d8 <LL_RCC_GetSysClkSource>
 8005812:	4603      	mov	r3, r0
 8005814:	2b08      	cmp	r3, #8
 8005816:	d00c      	beq.n	8005832 <RCC_GetSystemClockFreq+0x2e>
 8005818:	2b08      	cmp	r3, #8
 800581a:	d80f      	bhi.n	800583c <RCC_GetSystemClockFreq+0x38>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <RCC_GetSystemClockFreq+0x22>
 8005820:	2b04      	cmp	r3, #4
 8005822:	d003      	beq.n	800582c <RCC_GetSystemClockFreq+0x28>
 8005824:	e00a      	b.n	800583c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <RCC_GetSystemClockFreq+0x48>)
 8005828:	607b      	str	r3, [r7, #4]
      break;
 800582a:	e00a      	b.n	8005842 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800582c:	4b08      	ldr	r3, [pc, #32]	; (8005850 <RCC_GetSystemClockFreq+0x4c>)
 800582e:	607b      	str	r3, [r7, #4]
      break;
 8005830:	e007      	b.n	8005842 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005832:	2008      	movs	r0, #8
 8005834:	f000 f84c 	bl	80058d0 <RCC_PLL_GetFreqDomain_SYS>
 8005838:	6078      	str	r0, [r7, #4]
      break;
 800583a:	e002      	b.n	8005842 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <RCC_GetSystemClockFreq+0x48>)
 800583e:	607b      	str	r3, [r7, #4]
      break;
 8005840:	bf00      	nop
  }

  return frequency;
 8005842:	687b      	ldr	r3, [r7, #4]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	00f42400 	.word	0x00f42400
 8005850:	007a1200 	.word	0x007a1200

08005854 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800585c:	f7ff ff4a 	bl	80056f4 <LL_RCC_GetAHBPrescaler>
 8005860:	4603      	mov	r3, r0
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	4a04      	ldr	r2, [pc, #16]	; (800587c <RCC_GetHCLKClockFreq+0x28>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	461a      	mov	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	40d3      	lsrs	r3, r2
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	0800a2a4 	.word	0x0800a2a4

08005880 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005888:	f7ff ff42 	bl	8005710 <LL_RCC_GetAPB1Prescaler>
 800588c:	4603      	mov	r3, r0
 800588e:	0a9b      	lsrs	r3, r3, #10
 8005890:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8005892:	5cd3      	ldrb	r3, [r2, r3]
 8005894:	461a      	mov	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	40d3      	lsrs	r3, r2
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	0800a2b4 	.word	0x0800a2b4

080058a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80058b0:	f7ff ff3c 	bl	800572c <LL_RCC_GetAPB2Prescaler>
 80058b4:	4603      	mov	r3, r0
 80058b6:	0b5b      	lsrs	r3, r3, #13
 80058b8:	4a04      	ldr	r2, [pc, #16]	; (80058cc <RCC_GetPCLK2ClockFreq+0x24>)
 80058ba:	5cd3      	ldrb	r3, [r2, r3]
 80058bc:	461a      	mov	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	40d3      	lsrs	r3, r2
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	0800a2b4 	.word	0x0800a2b4

080058d0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80058d0:	b590      	push	{r4, r7, lr}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80058e4:	f7ff ff30 	bl	8005748 <LL_RCC_PLL_GetMainSource>
 80058e8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f6:	d003      	beq.n	8005900 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80058f8:	e005      	b.n	8005906 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80058fc:	617b      	str	r3, [r7, #20]
      break;
 80058fe:	e005      	b.n	800590c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005902:	617b      	str	r3, [r7, #20]
      break;
 8005904:	e002      	b.n	800590c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005908:	617b      	str	r3, [r7, #20]
      break;
 800590a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b08      	cmp	r3, #8
 8005910:	d113      	bne.n	800593a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005912:	f7ff ff43 	bl	800579c <LL_RCC_PLL_GetDivider>
 8005916:	4602      	mov	r2, r0
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	fbb3 f4f2 	udiv	r4, r3, r2
 800591e:	f7ff ff21 	bl	8005764 <LL_RCC_PLL_GetN>
 8005922:	4603      	mov	r3, r0
 8005924:	fb03 f404 	mul.w	r4, r3, r4
 8005928:	f7ff ff2a 	bl	8005780 <LL_RCC_PLL_GetP>
 800592c:	4603      	mov	r3, r0
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	3301      	adds	r3, #1
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	fbb4 f3f3 	udiv	r3, r4, r3
 8005938:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800593a:	693b      	ldr	r3, [r7, #16]
}
 800593c:	4618      	mov	r0, r3
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	bd90      	pop	{r4, r7, pc}
 8005944:	00f42400 	.word	0x00f42400
 8005948:	007a1200 	.word	0x007a1200

0800594c <LL_SPI_IsEnabled>:
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d101      	bne.n	8005964 <LL_SPI_IsEnabled+0x18>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <LL_SPI_IsEnabled+0x1a>
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <LL_SPI_SetCRCPolynomial>:
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffd3 	bl	800594c <LL_SPI_IsEnabled>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d139      	bne.n	8005a20 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	6811      	ldr	r1, [r2, #0]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	6852      	ldr	r2, [r2, #4]
 80059c0:	4311      	orrs	r1, r2
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	6892      	ldr	r2, [r2, #8]
 80059c6:	4311      	orrs	r1, r2
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	68d2      	ldr	r2, [r2, #12]
 80059cc:	4311      	orrs	r1, r2
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	6912      	ldr	r2, [r2, #16]
 80059d2:	4311      	orrs	r1, r2
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	6952      	ldr	r2, [r2, #20]
 80059d8:	4311      	orrs	r1, r2
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	6992      	ldr	r2, [r2, #24]
 80059de:	4311      	orrs	r1, r2
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	69d2      	ldr	r2, [r2, #28]
 80059e4:	4311      	orrs	r1, r2
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	6a12      	ldr	r2, [r2, #32]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f023 0204 	bic.w	r2, r3, #4
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0e:	d105      	bne.n	8005a1c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff ffab 	bl	8005972 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	61da      	str	r2, [r3, #28]
  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <LL_USART_IsEnabled>:
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2301      	moveq	r3, #1
 8005a4e:	2300      	movne	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_USART_SetStopBitsLength>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	611a      	str	r2, [r3, #16]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <LL_USART_SetHWFlowCtrl>:
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	615a      	str	r2, [r3, #20]
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <LL_USART_SetBaudRate>:
{
 8005aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab0:	b0c0      	sub	sp, #256	; 0x100
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ab8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005abc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005ac0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005acc:	f040 810c 	bne.w	8005ce8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005ad0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ada:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ade:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	1891      	adds	r1, r2, r2
 8005ae8:	6639      	str	r1, [r7, #96]	; 0x60
 8005aea:	415b      	adcs	r3, r3
 8005aec:	667b      	str	r3, [r7, #100]	; 0x64
 8005aee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005af2:	4621      	mov	r1, r4
 8005af4:	eb12 0801 	adds.w	r8, r2, r1
 8005af8:	4629      	mov	r1, r5
 8005afa:	eb43 0901 	adc.w	r9, r3, r1
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b12:	4690      	mov	r8, r2
 8005b14:	4699      	mov	r9, r3
 8005b16:	4623      	mov	r3, r4
 8005b18:	eb18 0303 	adds.w	r3, r8, r3
 8005b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b20:	462b      	mov	r3, r5
 8005b22:	eb49 0303 	adc.w	r3, r9, r3
 8005b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b2e:	2200      	movs	r2, #0
 8005b30:	469a      	mov	sl, r3
 8005b32:	4693      	mov	fp, r2
 8005b34:	eb1a 030a 	adds.w	r3, sl, sl
 8005b38:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b3a:	eb4b 030b 	adc.w	r3, fp, fp
 8005b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b48:	f7fb f8a6 	bl	8000c98 <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4b64      	ldr	r3, [pc, #400]	; (8005ce4 <LL_USART_SetBaudRate+0x238>)
 8005b52:	fba3 2302 	umull	r2, r3, r3, r2
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	b29c      	uxth	r4, r3
 8005b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b68:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b6c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	1891      	adds	r1, r2, r2
 8005b76:	6539      	str	r1, [r7, #80]	; 0x50
 8005b78:	415b      	adcs	r3, r3
 8005b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b80:	4641      	mov	r1, r8
 8005b82:	1851      	adds	r1, r2, r1
 8005b84:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b86:	4649      	mov	r1, r9
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005b98:	4659      	mov	r1, fp
 8005b9a:	00cb      	lsls	r3, r1, #3
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	00ca      	lsls	r2, r1, #3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	4642      	mov	r2, r8
 8005bae:	189b      	adds	r3, r3, r2
 8005bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	eb42 0303 	adc.w	r3, r2, r3
 8005bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bca:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005bce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	18db      	adds	r3, r3, r3
 8005bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd8:	4613      	mov	r3, r2
 8005bda:	eb42 0303 	adc.w	r3, r2, r3
 8005bde:	647b      	str	r3, [r7, #68]	; 0x44
 8005be0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005be4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005be8:	f7fb f856 	bl	8000c98 <__aeabi_uldivmod>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4b3c      	ldr	r3, [pc, #240]	; (8005ce4 <LL_USART_SetBaudRate+0x238>)
 8005bf4:	fba3 2301 	umull	r2, r3, r3, r1
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	2264      	movs	r2, #100	; 0x64
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	1acb      	subs	r3, r1, r3
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c08:	4b36      	ldr	r3, [pc, #216]	; (8005ce4 <LL_USART_SetBaudRate+0x238>)
 8005c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	4423      	add	r3, r4
 8005c1e:	b29c      	uxth	r4, r3
 8005c20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c2a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c2e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005c32:	4642      	mov	r2, r8
 8005c34:	464b      	mov	r3, r9
 8005c36:	1891      	adds	r1, r2, r2
 8005c38:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c3a:	415b      	adcs	r3, r3
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c42:	4641      	mov	r1, r8
 8005c44:	1851      	adds	r1, r2, r1
 8005c46:	6339      	str	r1, [r7, #48]	; 0x30
 8005c48:	4649      	mov	r1, r9
 8005c4a:	414b      	adcs	r3, r1
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	00cb      	lsls	r3, r1, #3
 8005c5e:	4651      	mov	r1, sl
 8005c60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c64:	4651      	mov	r1, sl
 8005c66:	00ca      	lsls	r2, r1, #3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4642      	mov	r2, r8
 8005c70:	189b      	adds	r3, r3, r2
 8005c72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c76:	464b      	mov	r3, r9
 8005c78:	460a      	mov	r2, r1
 8005c7a:	eb42 0303 	adc.w	r3, r2, r3
 8005c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c8c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005c90:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c94:	460b      	mov	r3, r1
 8005c96:	18db      	adds	r3, r3, r3
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ca6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005caa:	f7fa fff5 	bl	8000c98 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <LL_USART_SetBaudRate+0x238>)
 8005cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	2164      	movs	r1, #100	; 0x64
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	3332      	adds	r3, #50	; 0x32
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <LL_USART_SetBaudRate+0x238>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4423      	add	r3, r4
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce0:	609a      	str	r2, [r3, #8]
}
 8005ce2:	e107      	b.n	8005ef4 <LL_USART_SetBaudRate+0x448>
 8005ce4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005ce8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cf2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cf6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	1891      	adds	r1, r2, r2
 8005d00:	6239      	str	r1, [r7, #32]
 8005d02:	415b      	adcs	r3, r3
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
 8005d06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	1854      	adds	r4, r2, r1
 8005d0e:	4649      	mov	r1, r9
 8005d10:	eb43 0501 	adc.w	r5, r3, r1
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	00eb      	lsls	r3, r5, #3
 8005d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d22:	00e2      	lsls	r2, r4, #3
 8005d24:	4614      	mov	r4, r2
 8005d26:	461d      	mov	r5, r3
 8005d28:	4643      	mov	r3, r8
 8005d2a:	18e3      	adds	r3, r4, r3
 8005d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d30:	464b      	mov	r3, r9
 8005d32:	eb45 0303 	adc.w	r3, r5, r3
 8005d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005d54:	4629      	mov	r1, r5
 8005d56:	008b      	lsls	r3, r1, #2
 8005d58:	4621      	mov	r1, r4
 8005d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5e:	4621      	mov	r1, r4
 8005d60:	008a      	lsls	r2, r1, #2
 8005d62:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005d66:	f7fa ff97 	bl	8000c98 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4b64      	ldr	r3, [pc, #400]	; (8005f00 <LL_USART_SetBaudRate+0x454>)
 8005d70:	fba3 2302 	umull	r2, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	b29c      	uxth	r4, r3
 8005d7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d8a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005d8e:	4642      	mov	r2, r8
 8005d90:	464b      	mov	r3, r9
 8005d92:	1891      	adds	r1, r2, r2
 8005d94:	61b9      	str	r1, [r7, #24]
 8005d96:	415b      	adcs	r3, r3
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d9e:	4641      	mov	r1, r8
 8005da0:	1851      	adds	r1, r2, r1
 8005da2:	6139      	str	r1, [r7, #16]
 8005da4:	4649      	mov	r1, r9
 8005da6:	414b      	adcs	r3, r1
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db6:	4659      	mov	r1, fp
 8005db8:	00cb      	lsls	r3, r1, #3
 8005dba:	4651      	mov	r1, sl
 8005dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc0:	4651      	mov	r1, sl
 8005dc2:	00ca      	lsls	r2, r1, #3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4642      	mov	r2, r8
 8005dcc:	189b      	adds	r3, r3, r2
 8005dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	460a      	mov	r2, r1
 8005dd6:	eb42 0303 	adc.w	r3, r2, r3
 8005dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005dde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005de8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005df8:	4649      	mov	r1, r9
 8005dfa:	008b      	lsls	r3, r1, #2
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e02:	4641      	mov	r1, r8
 8005e04:	008a      	lsls	r2, r1, #2
 8005e06:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005e0a:	f7fa ff45 	bl	8000c98 <__aeabi_uldivmod>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <LL_USART_SetBaudRate+0x454>)
 8005e14:	fba3 1302 	umull	r1, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	2164      	movs	r1, #100	; 0x64
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	3332      	adds	r3, #50	; 0x32
 8005e26:	4a36      	ldr	r2, [pc, #216]	; (8005f00 <LL_USART_SetBaudRate+0x454>)
 8005e28:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4423      	add	r3, r4
 8005e38:	b29c      	uxth	r4, r3
 8005e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e3e:	2200      	movs	r2, #0
 8005e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	415b      	adcs	r3, r3
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e58:	4641      	mov	r1, r8
 8005e5a:	1851      	adds	r1, r2, r1
 8005e5c:	6039      	str	r1, [r7, #0]
 8005e5e:	4649      	mov	r1, r9
 8005e60:	414b      	adcs	r3, r1
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e70:	4659      	mov	r1, fp
 8005e72:	00cb      	lsls	r3, r1, #3
 8005e74:	4651      	mov	r1, sl
 8005e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	00ca      	lsls	r2, r1, #3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	4642      	mov	r2, r8
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	673b      	str	r3, [r7, #112]	; 0x70
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	460a      	mov	r2, r1
 8005e8e:	eb42 0303 	adc.w	r3, r2, r3
 8005e92:	677b      	str	r3, [r7, #116]	; 0x74
 8005e94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e98:	2200      	movs	r2, #0
 8005e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e9c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8005eaa:	4649      	mov	r1, r9
 8005eac:	008b      	lsls	r3, r1, #2
 8005eae:	4641      	mov	r1, r8
 8005eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	008a      	lsls	r2, r1, #2
 8005eb8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005ebc:	f7fa feec 	bl	8000c98 <__aeabi_uldivmod>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <LL_USART_SetBaudRate+0x454>)
 8005ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	2164      	movs	r1, #100	; 0x64
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	3332      	adds	r3, #50	; 0x32
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <LL_USART_SetBaudRate+0x454>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4423      	add	r3, r4
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005efa:	46bd      	mov	sp, r7
 8005efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f00:	51eb851f 	.word	0x51eb851f

08005f04 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fd8d 	bl	8005a36 <LL_USART_IsEnabled>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d149      	bne.n	8005fb6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f2a:	f023 030c 	bic.w	r3, r3, #12
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	6851      	ldr	r1, [r2, #4]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68d2      	ldr	r2, [r2, #12]
 8005f36:	4311      	orrs	r1, r2
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	6912      	ldr	r2, [r2, #16]
 8005f3c:	4311      	orrs	r1, r2
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	6992      	ldr	r2, [r2, #24]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fd84 	bl	8005a5e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fd91 	bl	8005a84 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fc26 	bl	80057b8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a14      	ldr	r2, [pc, #80]	; (8005fc0 <LL_USART_Init+0xbc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d102      	bne.n	8005f7a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e00c      	b.n	8005f94 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <LL_USART_Init+0xc0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d102      	bne.n	8005f88 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	e005      	b.n	8005f94 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a0f      	ldr	r2, [pc, #60]	; (8005fc8 <LL_USART_Init+0xc4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d101      	bne.n	8005f94 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69b9      	ldr	r1, [r7, #24]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fd7b 	bl	8005aac <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	40004400 	.word	0x40004400
 8005fc8:	40011400 	.word	0x40011400

08005fcc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <LL_mDelay+0x48>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005fda:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d00c      	beq.n	8005ffe <LL_mDelay+0x32>
  {
    Delay++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8005fea:	e008      	b.n	8005ffe <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005fec:	4b09      	ldr	r3, [pc, #36]	; (8006014 <LL_mDelay+0x48>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <LL_mDelay+0x32>
    {
      Delay--;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	607b      	str	r3, [r7, #4]
  while (Delay)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f3      	bne.n	8005fec <LL_mDelay+0x20>
    }
  }
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	e000e010 	.word	0xe000e010

08006018 <__errno>:
 8006018:	4b01      	ldr	r3, [pc, #4]	; (8006020 <__errno+0x8>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	200000a4 	.word	0x200000a4

08006024 <__libc_init_array>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4d0d      	ldr	r5, [pc, #52]	; (800605c <__libc_init_array+0x38>)
 8006028:	4c0d      	ldr	r4, [pc, #52]	; (8006060 <__libc_init_array+0x3c>)
 800602a:	1b64      	subs	r4, r4, r5
 800602c:	10a4      	asrs	r4, r4, #2
 800602e:	2600      	movs	r6, #0
 8006030:	42a6      	cmp	r6, r4
 8006032:	d109      	bne.n	8006048 <__libc_init_array+0x24>
 8006034:	4d0b      	ldr	r5, [pc, #44]	; (8006064 <__libc_init_array+0x40>)
 8006036:	4c0c      	ldr	r4, [pc, #48]	; (8006068 <__libc_init_array+0x44>)
 8006038:	f004 f8cc 	bl	800a1d4 <_init>
 800603c:	1b64      	subs	r4, r4, r5
 800603e:	10a4      	asrs	r4, r4, #2
 8006040:	2600      	movs	r6, #0
 8006042:	42a6      	cmp	r6, r4
 8006044:	d105      	bne.n	8006052 <__libc_init_array+0x2e>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	f855 3b04 	ldr.w	r3, [r5], #4
 800604c:	4798      	blx	r3
 800604e:	3601      	adds	r6, #1
 8006050:	e7ee      	b.n	8006030 <__libc_init_array+0xc>
 8006052:	f855 3b04 	ldr.w	r3, [r5], #4
 8006056:	4798      	blx	r3
 8006058:	3601      	adds	r6, #1
 800605a:	e7f2      	b.n	8006042 <__libc_init_array+0x1e>
 800605c:	0800a878 	.word	0x0800a878
 8006060:	0800a878 	.word	0x0800a878
 8006064:	0800a878 	.word	0x0800a878
 8006068:	0800a87c 	.word	0x0800a87c

0800606c <memcpy>:
 800606c:	440a      	add	r2, r1
 800606e:	4291      	cmp	r1, r2
 8006070:	f100 33ff 	add.w	r3, r0, #4294967295
 8006074:	d100      	bne.n	8006078 <memcpy+0xc>
 8006076:	4770      	bx	lr
 8006078:	b510      	push	{r4, lr}
 800607a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006082:	4291      	cmp	r1, r2
 8006084:	d1f9      	bne.n	800607a <memcpy+0xe>
 8006086:	bd10      	pop	{r4, pc}

08006088 <memset>:
 8006088:	4402      	add	r2, r0
 800608a:	4603      	mov	r3, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <__cvt>:
 8006098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	ec55 4b10 	vmov	r4, r5, d0
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	460e      	mov	r6, r1
 80060a4:	4619      	mov	r1, r3
 80060a6:	462b      	mov	r3, r5
 80060a8:	bfbb      	ittet	lt
 80060aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060ae:	461d      	movlt	r5, r3
 80060b0:	2300      	movge	r3, #0
 80060b2:	232d      	movlt	r3, #45	; 0x2d
 80060b4:	700b      	strb	r3, [r1, #0]
 80060b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060bc:	4691      	mov	r9, r2
 80060be:	f023 0820 	bic.w	r8, r3, #32
 80060c2:	bfbc      	itt	lt
 80060c4:	4622      	movlt	r2, r4
 80060c6:	4614      	movlt	r4, r2
 80060c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060cc:	d005      	beq.n	80060da <__cvt+0x42>
 80060ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060d2:	d100      	bne.n	80060d6 <__cvt+0x3e>
 80060d4:	3601      	adds	r6, #1
 80060d6:	2102      	movs	r1, #2
 80060d8:	e000      	b.n	80060dc <__cvt+0x44>
 80060da:	2103      	movs	r1, #3
 80060dc:	ab03      	add	r3, sp, #12
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	ab02      	add	r3, sp, #8
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	ec45 4b10 	vmov	d0, r4, r5
 80060e8:	4653      	mov	r3, sl
 80060ea:	4632      	mov	r2, r6
 80060ec:	f000 fce4 	bl	8006ab8 <_dtoa_r>
 80060f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060f4:	4607      	mov	r7, r0
 80060f6:	d102      	bne.n	80060fe <__cvt+0x66>
 80060f8:	f019 0f01 	tst.w	r9, #1
 80060fc:	d022      	beq.n	8006144 <__cvt+0xac>
 80060fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006102:	eb07 0906 	add.w	r9, r7, r6
 8006106:	d110      	bne.n	800612a <__cvt+0x92>
 8006108:	783b      	ldrb	r3, [r7, #0]
 800610a:	2b30      	cmp	r3, #48	; 0x30
 800610c:	d10a      	bne.n	8006124 <__cvt+0x8c>
 800610e:	2200      	movs	r2, #0
 8006110:	2300      	movs	r3, #0
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fcdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800611a:	b918      	cbnz	r0, 8006124 <__cvt+0x8c>
 800611c:	f1c6 0601 	rsb	r6, r6, #1
 8006120:	f8ca 6000 	str.w	r6, [sl]
 8006124:	f8da 3000 	ldr.w	r3, [sl]
 8006128:	4499      	add	r9, r3
 800612a:	2200      	movs	r2, #0
 800612c:	2300      	movs	r3, #0
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	f7fa fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006136:	b108      	cbz	r0, 800613c <__cvt+0xa4>
 8006138:	f8cd 900c 	str.w	r9, [sp, #12]
 800613c:	2230      	movs	r2, #48	; 0x30
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	454b      	cmp	r3, r9
 8006142:	d307      	bcc.n	8006154 <__cvt+0xbc>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006148:	1bdb      	subs	r3, r3, r7
 800614a:	4638      	mov	r0, r7
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	b004      	add	sp, #16
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	1c59      	adds	r1, r3, #1
 8006156:	9103      	str	r1, [sp, #12]
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e7f0      	b.n	800613e <__cvt+0xa6>

0800615c <__exponent>:
 800615c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800615e:	4603      	mov	r3, r0
 8006160:	2900      	cmp	r1, #0
 8006162:	bfb8      	it	lt
 8006164:	4249      	neglt	r1, r1
 8006166:	f803 2b02 	strb.w	r2, [r3], #2
 800616a:	bfb4      	ite	lt
 800616c:	222d      	movlt	r2, #45	; 0x2d
 800616e:	222b      	movge	r2, #43	; 0x2b
 8006170:	2909      	cmp	r1, #9
 8006172:	7042      	strb	r2, [r0, #1]
 8006174:	dd2a      	ble.n	80061cc <__exponent+0x70>
 8006176:	f10d 0407 	add.w	r4, sp, #7
 800617a:	46a4      	mov	ip, r4
 800617c:	270a      	movs	r7, #10
 800617e:	46a6      	mov	lr, r4
 8006180:	460a      	mov	r2, r1
 8006182:	fb91 f6f7 	sdiv	r6, r1, r7
 8006186:	fb07 1516 	mls	r5, r7, r6, r1
 800618a:	3530      	adds	r5, #48	; 0x30
 800618c:	2a63      	cmp	r2, #99	; 0x63
 800618e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006192:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006196:	4631      	mov	r1, r6
 8006198:	dcf1      	bgt.n	800617e <__exponent+0x22>
 800619a:	3130      	adds	r1, #48	; 0x30
 800619c:	f1ae 0502 	sub.w	r5, lr, #2
 80061a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061a4:	1c44      	adds	r4, r0, #1
 80061a6:	4629      	mov	r1, r5
 80061a8:	4561      	cmp	r1, ip
 80061aa:	d30a      	bcc.n	80061c2 <__exponent+0x66>
 80061ac:	f10d 0209 	add.w	r2, sp, #9
 80061b0:	eba2 020e 	sub.w	r2, r2, lr
 80061b4:	4565      	cmp	r5, ip
 80061b6:	bf88      	it	hi
 80061b8:	2200      	movhi	r2, #0
 80061ba:	4413      	add	r3, r2
 80061bc:	1a18      	subs	r0, r3, r0
 80061be:	b003      	add	sp, #12
 80061c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061ca:	e7ed      	b.n	80061a8 <__exponent+0x4c>
 80061cc:	2330      	movs	r3, #48	; 0x30
 80061ce:	3130      	adds	r1, #48	; 0x30
 80061d0:	7083      	strb	r3, [r0, #2]
 80061d2:	70c1      	strb	r1, [r0, #3]
 80061d4:	1d03      	adds	r3, r0, #4
 80061d6:	e7f1      	b.n	80061bc <__exponent+0x60>

080061d8 <_printf_float>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	ed2d 8b02 	vpush	{d8}
 80061e0:	b08d      	sub	sp, #52	; 0x34
 80061e2:	460c      	mov	r4, r1
 80061e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80061e8:	4616      	mov	r6, r2
 80061ea:	461f      	mov	r7, r3
 80061ec:	4605      	mov	r5, r0
 80061ee:	f001 fb47 	bl	8007880 <_localeconv_r>
 80061f2:	f8d0 a000 	ldr.w	sl, [r0]
 80061f6:	4650      	mov	r0, sl
 80061f8:	f7f9 fff2 	bl	80001e0 <strlen>
 80061fc:	2300      	movs	r3, #0
 80061fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	f8d8 3000 	ldr.w	r3, [r8]
 8006208:	f894 b018 	ldrb.w	fp, [r4, #24]
 800620c:	3307      	adds	r3, #7
 800620e:	f023 0307 	bic.w	r3, r3, #7
 8006212:	f103 0208 	add.w	r2, r3, #8
 8006216:	f8c8 2000 	str.w	r2, [r8]
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006222:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006226:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800622a:	9307      	str	r3, [sp, #28]
 800622c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006230:	ee08 0a10 	vmov	s16, r0
 8006234:	4b9f      	ldr	r3, [pc, #636]	; (80064b4 <_printf_float+0x2dc>)
 8006236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800623a:	f04f 32ff 	mov.w	r2, #4294967295
 800623e:	f7fa fc7d 	bl	8000b3c <__aeabi_dcmpun>
 8006242:	bb88      	cbnz	r0, 80062a8 <_printf_float+0xd0>
 8006244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006248:	4b9a      	ldr	r3, [pc, #616]	; (80064b4 <_printf_float+0x2dc>)
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	f7fa fc57 	bl	8000b00 <__aeabi_dcmple>
 8006252:	bb48      	cbnz	r0, 80062a8 <_printf_float+0xd0>
 8006254:	2200      	movs	r2, #0
 8006256:	2300      	movs	r3, #0
 8006258:	4640      	mov	r0, r8
 800625a:	4649      	mov	r1, r9
 800625c:	f7fa fc46 	bl	8000aec <__aeabi_dcmplt>
 8006260:	b110      	cbz	r0, 8006268 <_printf_float+0x90>
 8006262:	232d      	movs	r3, #45	; 0x2d
 8006264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006268:	4b93      	ldr	r3, [pc, #588]	; (80064b8 <_printf_float+0x2e0>)
 800626a:	4894      	ldr	r0, [pc, #592]	; (80064bc <_printf_float+0x2e4>)
 800626c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006270:	bf94      	ite	ls
 8006272:	4698      	movls	r8, r3
 8006274:	4680      	movhi	r8, r0
 8006276:	2303      	movs	r3, #3
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	9b05      	ldr	r3, [sp, #20]
 800627c:	f023 0204 	bic.w	r2, r3, #4
 8006280:	6022      	str	r2, [r4, #0]
 8006282:	f04f 0900 	mov.w	r9, #0
 8006286:	9700      	str	r7, [sp, #0]
 8006288:	4633      	mov	r3, r6
 800628a:	aa0b      	add	r2, sp, #44	; 0x2c
 800628c:	4621      	mov	r1, r4
 800628e:	4628      	mov	r0, r5
 8006290:	f000 f9d8 	bl	8006644 <_printf_common>
 8006294:	3001      	adds	r0, #1
 8006296:	f040 8090 	bne.w	80063ba <_printf_float+0x1e2>
 800629a:	f04f 30ff 	mov.w	r0, #4294967295
 800629e:	b00d      	add	sp, #52	; 0x34
 80062a0:	ecbd 8b02 	vpop	{d8}
 80062a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a8:	4642      	mov	r2, r8
 80062aa:	464b      	mov	r3, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	4649      	mov	r1, r9
 80062b0:	f7fa fc44 	bl	8000b3c <__aeabi_dcmpun>
 80062b4:	b140      	cbz	r0, 80062c8 <_printf_float+0xf0>
 80062b6:	464b      	mov	r3, r9
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bfbc      	itt	lt
 80062bc:	232d      	movlt	r3, #45	; 0x2d
 80062be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062c2:	487f      	ldr	r0, [pc, #508]	; (80064c0 <_printf_float+0x2e8>)
 80062c4:	4b7f      	ldr	r3, [pc, #508]	; (80064c4 <_printf_float+0x2ec>)
 80062c6:	e7d1      	b.n	800626c <_printf_float+0x94>
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80062ce:	9206      	str	r2, [sp, #24]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	d13f      	bne.n	8006354 <_printf_float+0x17c>
 80062d4:	2306      	movs	r3, #6
 80062d6:	6063      	str	r3, [r4, #4]
 80062d8:	9b05      	ldr	r3, [sp, #20]
 80062da:	6861      	ldr	r1, [r4, #4]
 80062dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062e0:	2300      	movs	r3, #0
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	ab0a      	add	r3, sp, #40	; 0x28
 80062e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80062ea:	ab09      	add	r3, sp, #36	; 0x24
 80062ec:	ec49 8b10 	vmov	d0, r8, r9
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	6022      	str	r2, [r4, #0]
 80062f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062f8:	4628      	mov	r0, r5
 80062fa:	f7ff fecd 	bl	8006098 <__cvt>
 80062fe:	9b06      	ldr	r3, [sp, #24]
 8006300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006302:	2b47      	cmp	r3, #71	; 0x47
 8006304:	4680      	mov	r8, r0
 8006306:	d108      	bne.n	800631a <_printf_float+0x142>
 8006308:	1cc8      	adds	r0, r1, #3
 800630a:	db02      	blt.n	8006312 <_printf_float+0x13a>
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	4299      	cmp	r1, r3
 8006310:	dd41      	ble.n	8006396 <_printf_float+0x1be>
 8006312:	f1ab 0b02 	sub.w	fp, fp, #2
 8006316:	fa5f fb8b 	uxtb.w	fp, fp
 800631a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800631e:	d820      	bhi.n	8006362 <_printf_float+0x18a>
 8006320:	3901      	subs	r1, #1
 8006322:	465a      	mov	r2, fp
 8006324:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006328:	9109      	str	r1, [sp, #36]	; 0x24
 800632a:	f7ff ff17 	bl	800615c <__exponent>
 800632e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006330:	1813      	adds	r3, r2, r0
 8006332:	2a01      	cmp	r2, #1
 8006334:	4681      	mov	r9, r0
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	dc02      	bgt.n	8006340 <_printf_float+0x168>
 800633a:	6822      	ldr	r2, [r4, #0]
 800633c:	07d2      	lsls	r2, r2, #31
 800633e:	d501      	bpl.n	8006344 <_printf_float+0x16c>
 8006340:	3301      	adds	r3, #1
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006348:	2b00      	cmp	r3, #0
 800634a:	d09c      	beq.n	8006286 <_printf_float+0xae>
 800634c:	232d      	movs	r3, #45	; 0x2d
 800634e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006352:	e798      	b.n	8006286 <_printf_float+0xae>
 8006354:	9a06      	ldr	r2, [sp, #24]
 8006356:	2a47      	cmp	r2, #71	; 0x47
 8006358:	d1be      	bne.n	80062d8 <_printf_float+0x100>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1bc      	bne.n	80062d8 <_printf_float+0x100>
 800635e:	2301      	movs	r3, #1
 8006360:	e7b9      	b.n	80062d6 <_printf_float+0xfe>
 8006362:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006366:	d118      	bne.n	800639a <_printf_float+0x1c2>
 8006368:	2900      	cmp	r1, #0
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	dd0b      	ble.n	8006386 <_printf_float+0x1ae>
 800636e:	6121      	str	r1, [r4, #16]
 8006370:	b913      	cbnz	r3, 8006378 <_printf_float+0x1a0>
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	07d0      	lsls	r0, r2, #31
 8006376:	d502      	bpl.n	800637e <_printf_float+0x1a6>
 8006378:	3301      	adds	r3, #1
 800637a:	440b      	add	r3, r1
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006380:	f04f 0900 	mov.w	r9, #0
 8006384:	e7de      	b.n	8006344 <_printf_float+0x16c>
 8006386:	b913      	cbnz	r3, 800638e <_printf_float+0x1b6>
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	07d2      	lsls	r2, r2, #31
 800638c:	d501      	bpl.n	8006392 <_printf_float+0x1ba>
 800638e:	3302      	adds	r3, #2
 8006390:	e7f4      	b.n	800637c <_printf_float+0x1a4>
 8006392:	2301      	movs	r3, #1
 8006394:	e7f2      	b.n	800637c <_printf_float+0x1a4>
 8006396:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800639a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639c:	4299      	cmp	r1, r3
 800639e:	db05      	blt.n	80063ac <_printf_float+0x1d4>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	6121      	str	r1, [r4, #16]
 80063a4:	07d8      	lsls	r0, r3, #31
 80063a6:	d5ea      	bpl.n	800637e <_printf_float+0x1a6>
 80063a8:	1c4b      	adds	r3, r1, #1
 80063aa:	e7e7      	b.n	800637c <_printf_float+0x1a4>
 80063ac:	2900      	cmp	r1, #0
 80063ae:	bfd4      	ite	le
 80063b0:	f1c1 0202 	rsble	r2, r1, #2
 80063b4:	2201      	movgt	r2, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	e7e0      	b.n	800637c <_printf_float+0x1a4>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	055a      	lsls	r2, r3, #21
 80063be:	d407      	bmi.n	80063d0 <_printf_float+0x1f8>
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	4642      	mov	r2, r8
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b8      	blx	r7
 80063ca:	3001      	adds	r0, #1
 80063cc:	d12c      	bne.n	8006428 <_printf_float+0x250>
 80063ce:	e764      	b.n	800629a <_printf_float+0xc2>
 80063d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063d4:	f240 80e0 	bls.w	8006598 <_printf_float+0x3c0>
 80063d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063dc:	2200      	movs	r2, #0
 80063de:	2300      	movs	r3, #0
 80063e0:	f7fa fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d034      	beq.n	8006452 <_printf_float+0x27a>
 80063e8:	4a37      	ldr	r2, [pc, #220]	; (80064c8 <_printf_float+0x2f0>)
 80063ea:	2301      	movs	r3, #1
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f af51 	beq.w	800629a <_printf_float+0xc2>
 80063f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063fc:	429a      	cmp	r2, r3
 80063fe:	db02      	blt.n	8006406 <_printf_float+0x22e>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	07d8      	lsls	r0, r3, #31
 8006404:	d510      	bpl.n	8006428 <_printf_float+0x250>
 8006406:	ee18 3a10 	vmov	r3, s16
 800640a:	4652      	mov	r2, sl
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	f43f af41 	beq.w	800629a <_printf_float+0xc2>
 8006418:	f04f 0800 	mov.w	r8, #0
 800641c:	f104 091a 	add.w	r9, r4, #26
 8006420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006422:	3b01      	subs	r3, #1
 8006424:	4543      	cmp	r3, r8
 8006426:	dc09      	bgt.n	800643c <_printf_float+0x264>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	079b      	lsls	r3, r3, #30
 800642c:	f100 8105 	bmi.w	800663a <_printf_float+0x462>
 8006430:	68e0      	ldr	r0, [r4, #12]
 8006432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006434:	4298      	cmp	r0, r3
 8006436:	bfb8      	it	lt
 8006438:	4618      	movlt	r0, r3
 800643a:	e730      	b.n	800629e <_printf_float+0xc6>
 800643c:	2301      	movs	r3, #1
 800643e:	464a      	mov	r2, r9
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	f43f af27 	beq.w	800629a <_printf_float+0xc2>
 800644c:	f108 0801 	add.w	r8, r8, #1
 8006450:	e7e6      	b.n	8006420 <_printf_float+0x248>
 8006452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	dc39      	bgt.n	80064cc <_printf_float+0x2f4>
 8006458:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <_printf_float+0x2f0>)
 800645a:	2301      	movs	r3, #1
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	f43f af19 	beq.w	800629a <_printf_float+0xc2>
 8006468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800646c:	4313      	orrs	r3, r2
 800646e:	d102      	bne.n	8006476 <_printf_float+0x29e>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	07d9      	lsls	r1, r3, #31
 8006474:	d5d8      	bpl.n	8006428 <_printf_float+0x250>
 8006476:	ee18 3a10 	vmov	r3, s16
 800647a:	4652      	mov	r2, sl
 800647c:	4631      	mov	r1, r6
 800647e:	4628      	mov	r0, r5
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	f43f af09 	beq.w	800629a <_printf_float+0xc2>
 8006488:	f04f 0900 	mov.w	r9, #0
 800648c:	f104 0a1a 	add.w	sl, r4, #26
 8006490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006492:	425b      	negs	r3, r3
 8006494:	454b      	cmp	r3, r9
 8006496:	dc01      	bgt.n	800649c <_printf_float+0x2c4>
 8006498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649a:	e792      	b.n	80063c2 <_printf_float+0x1ea>
 800649c:	2301      	movs	r3, #1
 800649e:	4652      	mov	r2, sl
 80064a0:	4631      	mov	r1, r6
 80064a2:	4628      	mov	r0, r5
 80064a4:	47b8      	blx	r7
 80064a6:	3001      	adds	r0, #1
 80064a8:	f43f aef7 	beq.w	800629a <_printf_float+0xc2>
 80064ac:	f109 0901 	add.w	r9, r9, #1
 80064b0:	e7ee      	b.n	8006490 <_printf_float+0x2b8>
 80064b2:	bf00      	nop
 80064b4:	7fefffff 	.word	0x7fefffff
 80064b8:	0800a2c0 	.word	0x0800a2c0
 80064bc:	0800a2c4 	.word	0x0800a2c4
 80064c0:	0800a2cc 	.word	0x0800a2cc
 80064c4:	0800a2c8 	.word	0x0800a2c8
 80064c8:	0800a2d0 	.word	0x0800a2d0
 80064cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064d0:	429a      	cmp	r2, r3
 80064d2:	bfa8      	it	ge
 80064d4:	461a      	movge	r2, r3
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	4691      	mov	r9, r2
 80064da:	dc37      	bgt.n	800654c <_printf_float+0x374>
 80064dc:	f04f 0b00 	mov.w	fp, #0
 80064e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064e4:	f104 021a 	add.w	r2, r4, #26
 80064e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	eba3 0309 	sub.w	r3, r3, r9
 80064f0:	455b      	cmp	r3, fp
 80064f2:	dc33      	bgt.n	800655c <_printf_float+0x384>
 80064f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f8:	429a      	cmp	r2, r3
 80064fa:	db3b      	blt.n	8006574 <_printf_float+0x39c>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	07da      	lsls	r2, r3, #31
 8006500:	d438      	bmi.n	8006574 <_printf_float+0x39c>
 8006502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006504:	9a05      	ldr	r2, [sp, #20]
 8006506:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006508:	1a9a      	subs	r2, r3, r2
 800650a:	eba3 0901 	sub.w	r9, r3, r1
 800650e:	4591      	cmp	r9, r2
 8006510:	bfa8      	it	ge
 8006512:	4691      	movge	r9, r2
 8006514:	f1b9 0f00 	cmp.w	r9, #0
 8006518:	dc35      	bgt.n	8006586 <_printf_float+0x3ae>
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006522:	f104 0a1a 	add.w	sl, r4, #26
 8006526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	eba3 0309 	sub.w	r3, r3, r9
 8006530:	4543      	cmp	r3, r8
 8006532:	f77f af79 	ble.w	8006428 <_printf_float+0x250>
 8006536:	2301      	movs	r3, #1
 8006538:	4652      	mov	r2, sl
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f aeaa 	beq.w	800629a <_printf_float+0xc2>
 8006546:	f108 0801 	add.w	r8, r8, #1
 800654a:	e7ec      	b.n	8006526 <_printf_float+0x34e>
 800654c:	4613      	mov	r3, r2
 800654e:	4631      	mov	r1, r6
 8006550:	4642      	mov	r2, r8
 8006552:	4628      	mov	r0, r5
 8006554:	47b8      	blx	r7
 8006556:	3001      	adds	r0, #1
 8006558:	d1c0      	bne.n	80064dc <_printf_float+0x304>
 800655a:	e69e      	b.n	800629a <_printf_float+0xc2>
 800655c:	2301      	movs	r3, #1
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	9205      	str	r2, [sp, #20]
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f ae97 	beq.w	800629a <_printf_float+0xc2>
 800656c:	9a05      	ldr	r2, [sp, #20]
 800656e:	f10b 0b01 	add.w	fp, fp, #1
 8006572:	e7b9      	b.n	80064e8 <_printf_float+0x310>
 8006574:	ee18 3a10 	vmov	r3, s16
 8006578:	4652      	mov	r2, sl
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	47b8      	blx	r7
 8006580:	3001      	adds	r0, #1
 8006582:	d1be      	bne.n	8006502 <_printf_float+0x32a>
 8006584:	e689      	b.n	800629a <_printf_float+0xc2>
 8006586:	9a05      	ldr	r2, [sp, #20]
 8006588:	464b      	mov	r3, r9
 800658a:	4442      	add	r2, r8
 800658c:	4631      	mov	r1, r6
 800658e:	4628      	mov	r0, r5
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	d1c1      	bne.n	800651a <_printf_float+0x342>
 8006596:	e680      	b.n	800629a <_printf_float+0xc2>
 8006598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800659a:	2a01      	cmp	r2, #1
 800659c:	dc01      	bgt.n	80065a2 <_printf_float+0x3ca>
 800659e:	07db      	lsls	r3, r3, #31
 80065a0:	d538      	bpl.n	8006614 <_printf_float+0x43c>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4642      	mov	r2, r8
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	f43f ae74 	beq.w	800629a <_printf_float+0xc2>
 80065b2:	ee18 3a10 	vmov	r3, s16
 80065b6:	4652      	mov	r2, sl
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	f43f ae6b 	beq.w	800629a <_printf_float+0xc2>
 80065c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c8:	2200      	movs	r2, #0
 80065ca:	2300      	movs	r3, #0
 80065cc:	f7fa fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d0:	b9d8      	cbnz	r0, 800660a <_printf_float+0x432>
 80065d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d4:	f108 0201 	add.w	r2, r8, #1
 80065d8:	3b01      	subs	r3, #1
 80065da:	4631      	mov	r1, r6
 80065dc:	4628      	mov	r0, r5
 80065de:	47b8      	blx	r7
 80065e0:	3001      	adds	r0, #1
 80065e2:	d10e      	bne.n	8006602 <_printf_float+0x42a>
 80065e4:	e659      	b.n	800629a <_printf_float+0xc2>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4652      	mov	r2, sl
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	f43f ae52 	beq.w	800629a <_printf_float+0xc2>
 80065f6:	f108 0801 	add.w	r8, r8, #1
 80065fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4543      	cmp	r3, r8
 8006600:	dcf1      	bgt.n	80065e6 <_printf_float+0x40e>
 8006602:	464b      	mov	r3, r9
 8006604:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006608:	e6dc      	b.n	80063c4 <_printf_float+0x1ec>
 800660a:	f04f 0800 	mov.w	r8, #0
 800660e:	f104 0a1a 	add.w	sl, r4, #26
 8006612:	e7f2      	b.n	80065fa <_printf_float+0x422>
 8006614:	2301      	movs	r3, #1
 8006616:	4642      	mov	r2, r8
 8006618:	e7df      	b.n	80065da <_printf_float+0x402>
 800661a:	2301      	movs	r3, #1
 800661c:	464a      	mov	r2, r9
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	f43f ae38 	beq.w	800629a <_printf_float+0xc2>
 800662a:	f108 0801 	add.w	r8, r8, #1
 800662e:	68e3      	ldr	r3, [r4, #12]
 8006630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006632:	1a5b      	subs	r3, r3, r1
 8006634:	4543      	cmp	r3, r8
 8006636:	dcf0      	bgt.n	800661a <_printf_float+0x442>
 8006638:	e6fa      	b.n	8006430 <_printf_float+0x258>
 800663a:	f04f 0800 	mov.w	r8, #0
 800663e:	f104 0919 	add.w	r9, r4, #25
 8006642:	e7f4      	b.n	800662e <_printf_float+0x456>

08006644 <_printf_common>:
 8006644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	4616      	mov	r6, r2
 800664a:	4699      	mov	r9, r3
 800664c:	688a      	ldr	r2, [r1, #8]
 800664e:	690b      	ldr	r3, [r1, #16]
 8006650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006654:	4293      	cmp	r3, r2
 8006656:	bfb8      	it	lt
 8006658:	4613      	movlt	r3, r2
 800665a:	6033      	str	r3, [r6, #0]
 800665c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006660:	4607      	mov	r7, r0
 8006662:	460c      	mov	r4, r1
 8006664:	b10a      	cbz	r2, 800666a <_printf_common+0x26>
 8006666:	3301      	adds	r3, #1
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	0699      	lsls	r1, r3, #26
 800666e:	bf42      	ittt	mi
 8006670:	6833      	ldrmi	r3, [r6, #0]
 8006672:	3302      	addmi	r3, #2
 8006674:	6033      	strmi	r3, [r6, #0]
 8006676:	6825      	ldr	r5, [r4, #0]
 8006678:	f015 0506 	ands.w	r5, r5, #6
 800667c:	d106      	bne.n	800668c <_printf_common+0x48>
 800667e:	f104 0a19 	add.w	sl, r4, #25
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	6832      	ldr	r2, [r6, #0]
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	42ab      	cmp	r3, r5
 800668a:	dc26      	bgt.n	80066da <_printf_common+0x96>
 800668c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006690:	1e13      	subs	r3, r2, #0
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	bf18      	it	ne
 8006696:	2301      	movne	r3, #1
 8006698:	0692      	lsls	r2, r2, #26
 800669a:	d42b      	bmi.n	80066f4 <_printf_common+0xb0>
 800669c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a0:	4649      	mov	r1, r9
 80066a2:	4638      	mov	r0, r7
 80066a4:	47c0      	blx	r8
 80066a6:	3001      	adds	r0, #1
 80066a8:	d01e      	beq.n	80066e8 <_printf_common+0xa4>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	68e5      	ldr	r5, [r4, #12]
 80066ae:	6832      	ldr	r2, [r6, #0]
 80066b0:	f003 0306 	and.w	r3, r3, #6
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	bf08      	it	eq
 80066b8:	1aad      	subeq	r5, r5, r2
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	6922      	ldr	r2, [r4, #16]
 80066be:	bf0c      	ite	eq
 80066c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c4:	2500      	movne	r5, #0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bfc4      	itt	gt
 80066ca:	1a9b      	subgt	r3, r3, r2
 80066cc:	18ed      	addgt	r5, r5, r3
 80066ce:	2600      	movs	r6, #0
 80066d0:	341a      	adds	r4, #26
 80066d2:	42b5      	cmp	r5, r6
 80066d4:	d11a      	bne.n	800670c <_printf_common+0xc8>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e008      	b.n	80066ec <_printf_common+0xa8>
 80066da:	2301      	movs	r3, #1
 80066dc:	4652      	mov	r2, sl
 80066de:	4649      	mov	r1, r9
 80066e0:	4638      	mov	r0, r7
 80066e2:	47c0      	blx	r8
 80066e4:	3001      	adds	r0, #1
 80066e6:	d103      	bne.n	80066f0 <_printf_common+0xac>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	3501      	adds	r5, #1
 80066f2:	e7c6      	b.n	8006682 <_printf_common+0x3e>
 80066f4:	18e1      	adds	r1, r4, r3
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	2030      	movs	r0, #48	; 0x30
 80066fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066fe:	4422      	add	r2, r4
 8006700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006708:	3302      	adds	r3, #2
 800670a:	e7c7      	b.n	800669c <_printf_common+0x58>
 800670c:	2301      	movs	r3, #1
 800670e:	4622      	mov	r2, r4
 8006710:	4649      	mov	r1, r9
 8006712:	4638      	mov	r0, r7
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d0e6      	beq.n	80066e8 <_printf_common+0xa4>
 800671a:	3601      	adds	r6, #1
 800671c:	e7d9      	b.n	80066d2 <_printf_common+0x8e>
	...

08006720 <_printf_i>:
 8006720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	7e0f      	ldrb	r7, [r1, #24]
 8006726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006728:	2f78      	cmp	r7, #120	; 0x78
 800672a:	4691      	mov	r9, r2
 800672c:	4680      	mov	r8, r0
 800672e:	460c      	mov	r4, r1
 8006730:	469a      	mov	sl, r3
 8006732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006736:	d807      	bhi.n	8006748 <_printf_i+0x28>
 8006738:	2f62      	cmp	r7, #98	; 0x62
 800673a:	d80a      	bhi.n	8006752 <_printf_i+0x32>
 800673c:	2f00      	cmp	r7, #0
 800673e:	f000 80d8 	beq.w	80068f2 <_printf_i+0x1d2>
 8006742:	2f58      	cmp	r7, #88	; 0x58
 8006744:	f000 80a3 	beq.w	800688e <_printf_i+0x16e>
 8006748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800674c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006750:	e03a      	b.n	80067c8 <_printf_i+0xa8>
 8006752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006756:	2b15      	cmp	r3, #21
 8006758:	d8f6      	bhi.n	8006748 <_printf_i+0x28>
 800675a:	a101      	add	r1, pc, #4	; (adr r1, 8006760 <_printf_i+0x40>)
 800675c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067cd 	.word	0x080067cd
 8006768:	08006749 	.word	0x08006749
 800676c:	08006749 	.word	0x08006749
 8006770:	08006749 	.word	0x08006749
 8006774:	08006749 	.word	0x08006749
 8006778:	080067cd 	.word	0x080067cd
 800677c:	08006749 	.word	0x08006749
 8006780:	08006749 	.word	0x08006749
 8006784:	08006749 	.word	0x08006749
 8006788:	08006749 	.word	0x08006749
 800678c:	080068d9 	.word	0x080068d9
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080068bb 	.word	0x080068bb
 8006798:	08006749 	.word	0x08006749
 800679c:	08006749 	.word	0x08006749
 80067a0:	080068fb 	.word	0x080068fb
 80067a4:	08006749 	.word	0x08006749
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	08006749 	.word	0x08006749
 80067b0:	08006749 	.word	0x08006749
 80067b4:	080068c3 	.word	0x080068c3
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	1d1a      	adds	r2, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	602a      	str	r2, [r5, #0]
 80067c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0a3      	b.n	8006914 <_printf_i+0x1f4>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	6829      	ldr	r1, [r5, #0]
 80067d0:	0606      	lsls	r6, r0, #24
 80067d2:	f101 0304 	add.w	r3, r1, #4
 80067d6:	d50a      	bpl.n	80067ee <_printf_i+0xce>
 80067d8:	680e      	ldr	r6, [r1, #0]
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	2e00      	cmp	r6, #0
 80067de:	da03      	bge.n	80067e8 <_printf_i+0xc8>
 80067e0:	232d      	movs	r3, #45	; 0x2d
 80067e2:	4276      	negs	r6, r6
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e8:	485e      	ldr	r0, [pc, #376]	; (8006964 <_printf_i+0x244>)
 80067ea:	230a      	movs	r3, #10
 80067ec:	e019      	b.n	8006822 <_printf_i+0x102>
 80067ee:	680e      	ldr	r6, [r1, #0]
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067f6:	bf18      	it	ne
 80067f8:	b236      	sxthne	r6, r6
 80067fa:	e7ef      	b.n	80067dc <_printf_i+0xbc>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	1d19      	adds	r1, r3, #4
 8006802:	6029      	str	r1, [r5, #0]
 8006804:	0601      	lsls	r1, r0, #24
 8006806:	d501      	bpl.n	800680c <_printf_i+0xec>
 8006808:	681e      	ldr	r6, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0xf2>
 800680c:	0646      	lsls	r6, r0, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0xe8>
 8006810:	881e      	ldrh	r6, [r3, #0]
 8006812:	4854      	ldr	r0, [pc, #336]	; (8006964 <_printf_i+0x244>)
 8006814:	2f6f      	cmp	r7, #111	; 0x6f
 8006816:	bf0c      	ite	eq
 8006818:	2308      	moveq	r3, #8
 800681a:	230a      	movne	r3, #10
 800681c:	2100      	movs	r1, #0
 800681e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006822:	6865      	ldr	r5, [r4, #4]
 8006824:	60a5      	str	r5, [r4, #8]
 8006826:	2d00      	cmp	r5, #0
 8006828:	bfa2      	ittt	ge
 800682a:	6821      	ldrge	r1, [r4, #0]
 800682c:	f021 0104 	bicge.w	r1, r1, #4
 8006830:	6021      	strge	r1, [r4, #0]
 8006832:	b90e      	cbnz	r6, 8006838 <_printf_i+0x118>
 8006834:	2d00      	cmp	r5, #0
 8006836:	d04d      	beq.n	80068d4 <_printf_i+0x1b4>
 8006838:	4615      	mov	r5, r2
 800683a:	fbb6 f1f3 	udiv	r1, r6, r3
 800683e:	fb03 6711 	mls	r7, r3, r1, r6
 8006842:	5dc7      	ldrb	r7, [r0, r7]
 8006844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006848:	4637      	mov	r7, r6
 800684a:	42bb      	cmp	r3, r7
 800684c:	460e      	mov	r6, r1
 800684e:	d9f4      	bls.n	800683a <_printf_i+0x11a>
 8006850:	2b08      	cmp	r3, #8
 8006852:	d10b      	bne.n	800686c <_printf_i+0x14c>
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	07de      	lsls	r6, r3, #31
 8006858:	d508      	bpl.n	800686c <_printf_i+0x14c>
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	6861      	ldr	r1, [r4, #4]
 800685e:	4299      	cmp	r1, r3
 8006860:	bfde      	ittt	le
 8006862:	2330      	movle	r3, #48	; 0x30
 8006864:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800686c:	1b52      	subs	r2, r2, r5
 800686e:	6122      	str	r2, [r4, #16]
 8006870:	f8cd a000 	str.w	sl, [sp]
 8006874:	464b      	mov	r3, r9
 8006876:	aa03      	add	r2, sp, #12
 8006878:	4621      	mov	r1, r4
 800687a:	4640      	mov	r0, r8
 800687c:	f7ff fee2 	bl	8006644 <_printf_common>
 8006880:	3001      	adds	r0, #1
 8006882:	d14c      	bne.n	800691e <_printf_i+0x1fe>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	b004      	add	sp, #16
 800688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688e:	4835      	ldr	r0, [pc, #212]	; (8006964 <_printf_i+0x244>)
 8006890:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006894:	6829      	ldr	r1, [r5, #0]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f851 6b04 	ldr.w	r6, [r1], #4
 800689c:	6029      	str	r1, [r5, #0]
 800689e:	061d      	lsls	r5, r3, #24
 80068a0:	d514      	bpl.n	80068cc <_printf_i+0x1ac>
 80068a2:	07df      	lsls	r7, r3, #31
 80068a4:	bf44      	itt	mi
 80068a6:	f043 0320 	orrmi.w	r3, r3, #32
 80068aa:	6023      	strmi	r3, [r4, #0]
 80068ac:	b91e      	cbnz	r6, 80068b6 <_printf_i+0x196>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f023 0320 	bic.w	r3, r3, #32
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	2310      	movs	r3, #16
 80068b8:	e7b0      	b.n	800681c <_printf_i+0xfc>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f043 0320 	orr.w	r3, r3, #32
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	2378      	movs	r3, #120	; 0x78
 80068c4:	4828      	ldr	r0, [pc, #160]	; (8006968 <_printf_i+0x248>)
 80068c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068ca:	e7e3      	b.n	8006894 <_printf_i+0x174>
 80068cc:	0659      	lsls	r1, r3, #25
 80068ce:	bf48      	it	mi
 80068d0:	b2b6      	uxthmi	r6, r6
 80068d2:	e7e6      	b.n	80068a2 <_printf_i+0x182>
 80068d4:	4615      	mov	r5, r2
 80068d6:	e7bb      	b.n	8006850 <_printf_i+0x130>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	6826      	ldr	r6, [r4, #0]
 80068dc:	6961      	ldr	r1, [r4, #20]
 80068de:	1d18      	adds	r0, r3, #4
 80068e0:	6028      	str	r0, [r5, #0]
 80068e2:	0635      	lsls	r5, r6, #24
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	d501      	bpl.n	80068ec <_printf_i+0x1cc>
 80068e8:	6019      	str	r1, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <_printf_i+0x1d2>
 80068ec:	0670      	lsls	r0, r6, #25
 80068ee:	d5fb      	bpl.n	80068e8 <_printf_i+0x1c8>
 80068f0:	8019      	strh	r1, [r3, #0]
 80068f2:	2300      	movs	r3, #0
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	4615      	mov	r5, r2
 80068f8:	e7ba      	b.n	8006870 <_printf_i+0x150>
 80068fa:	682b      	ldr	r3, [r5, #0]
 80068fc:	1d1a      	adds	r2, r3, #4
 80068fe:	602a      	str	r2, [r5, #0]
 8006900:	681d      	ldr	r5, [r3, #0]
 8006902:	6862      	ldr	r2, [r4, #4]
 8006904:	2100      	movs	r1, #0
 8006906:	4628      	mov	r0, r5
 8006908:	f7f9 fc72 	bl	80001f0 <memchr>
 800690c:	b108      	cbz	r0, 8006912 <_printf_i+0x1f2>
 800690e:	1b40      	subs	r0, r0, r5
 8006910:	6060      	str	r0, [r4, #4]
 8006912:	6863      	ldr	r3, [r4, #4]
 8006914:	6123      	str	r3, [r4, #16]
 8006916:	2300      	movs	r3, #0
 8006918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691c:	e7a8      	b.n	8006870 <_printf_i+0x150>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	462a      	mov	r2, r5
 8006922:	4649      	mov	r1, r9
 8006924:	4640      	mov	r0, r8
 8006926:	47d0      	blx	sl
 8006928:	3001      	adds	r0, #1
 800692a:	d0ab      	beq.n	8006884 <_printf_i+0x164>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	079b      	lsls	r3, r3, #30
 8006930:	d413      	bmi.n	800695a <_printf_i+0x23a>
 8006932:	68e0      	ldr	r0, [r4, #12]
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	4298      	cmp	r0, r3
 8006938:	bfb8      	it	lt
 800693a:	4618      	movlt	r0, r3
 800693c:	e7a4      	b.n	8006888 <_printf_i+0x168>
 800693e:	2301      	movs	r3, #1
 8006940:	4632      	mov	r2, r6
 8006942:	4649      	mov	r1, r9
 8006944:	4640      	mov	r0, r8
 8006946:	47d0      	blx	sl
 8006948:	3001      	adds	r0, #1
 800694a:	d09b      	beq.n	8006884 <_printf_i+0x164>
 800694c:	3501      	adds	r5, #1
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	9903      	ldr	r1, [sp, #12]
 8006952:	1a5b      	subs	r3, r3, r1
 8006954:	42ab      	cmp	r3, r5
 8006956:	dcf2      	bgt.n	800693e <_printf_i+0x21e>
 8006958:	e7eb      	b.n	8006932 <_printf_i+0x212>
 800695a:	2500      	movs	r5, #0
 800695c:	f104 0619 	add.w	r6, r4, #25
 8006960:	e7f5      	b.n	800694e <_printf_i+0x22e>
 8006962:	bf00      	nop
 8006964:	0800a2d2 	.word	0x0800a2d2
 8006968:	0800a2e3 	.word	0x0800a2e3

0800696c <iprintf>:
 800696c:	b40f      	push	{r0, r1, r2, r3}
 800696e:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <iprintf+0x2c>)
 8006970:	b513      	push	{r0, r1, r4, lr}
 8006972:	681c      	ldr	r4, [r3, #0]
 8006974:	b124      	cbz	r4, 8006980 <iprintf+0x14>
 8006976:	69a3      	ldr	r3, [r4, #24]
 8006978:	b913      	cbnz	r3, 8006980 <iprintf+0x14>
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fee2 	bl	8007744 <__sinit>
 8006980:	ab05      	add	r3, sp, #20
 8006982:	9a04      	ldr	r2, [sp, #16]
 8006984:	68a1      	ldr	r1, [r4, #8]
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	4620      	mov	r0, r4
 800698a:	f001 fc2d 	bl	80081e8 <_vfiprintf_r>
 800698e:	b002      	add	sp, #8
 8006990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006994:	b004      	add	sp, #16
 8006996:	4770      	bx	lr
 8006998:	200000a4 	.word	0x200000a4

0800699c <quorem>:
 800699c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	6903      	ldr	r3, [r0, #16]
 80069a2:	690c      	ldr	r4, [r1, #16]
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	4607      	mov	r7, r0
 80069a8:	f2c0 8081 	blt.w	8006aae <quorem+0x112>
 80069ac:	3c01      	subs	r4, #1
 80069ae:	f101 0814 	add.w	r8, r1, #20
 80069b2:	f100 0514 	add.w	r5, r0, #20
 80069b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069c4:	3301      	adds	r3, #1
 80069c6:	429a      	cmp	r2, r3
 80069c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80069d4:	d331      	bcc.n	8006a3a <quorem+0x9e>
 80069d6:	f04f 0e00 	mov.w	lr, #0
 80069da:	4640      	mov	r0, r8
 80069dc:	46ac      	mov	ip, r5
 80069de:	46f2      	mov	sl, lr
 80069e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80069e4:	b293      	uxth	r3, r2
 80069e6:	fb06 e303 	mla	r3, r6, r3, lr
 80069ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	ebaa 0303 	sub.w	r3, sl, r3
 80069f4:	f8dc a000 	ldr.w	sl, [ip]
 80069f8:	0c12      	lsrs	r2, r2, #16
 80069fa:	fa13 f38a 	uxtah	r3, r3, sl
 80069fe:	fb06 e202 	mla	r2, r6, r2, lr
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	9b00      	ldr	r3, [sp, #0]
 8006a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a18:	4581      	cmp	r9, r0
 8006a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8006a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a26:	d2db      	bcs.n	80069e0 <quorem+0x44>
 8006a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a2c:	b92b      	cbnz	r3, 8006a3a <quorem+0x9e>
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	3b04      	subs	r3, #4
 8006a32:	429d      	cmp	r5, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	d32e      	bcc.n	8006a96 <quorem+0xfa>
 8006a38:	613c      	str	r4, [r7, #16]
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	f001 f9b2 	bl	8007da4 <__mcmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	db24      	blt.n	8006a8e <quorem+0xf2>
 8006a44:	3601      	adds	r6, #1
 8006a46:	4628      	mov	r0, r5
 8006a48:	f04f 0c00 	mov.w	ip, #0
 8006a4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a50:	f8d0 e000 	ldr.w	lr, [r0]
 8006a54:	b293      	uxth	r3, r2
 8006a56:	ebac 0303 	sub.w	r3, ip, r3
 8006a5a:	0c12      	lsrs	r2, r2, #16
 8006a5c:	fa13 f38e 	uxtah	r3, r3, lr
 8006a60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a6e:	45c1      	cmp	r9, r8
 8006a70:	f840 3b04 	str.w	r3, [r0], #4
 8006a74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a78:	d2e8      	bcs.n	8006a4c <quorem+0xb0>
 8006a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a82:	b922      	cbnz	r2, 8006a8e <quorem+0xf2>
 8006a84:	3b04      	subs	r3, #4
 8006a86:	429d      	cmp	r5, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	d30a      	bcc.n	8006aa2 <quorem+0x106>
 8006a8c:	613c      	str	r4, [r7, #16]
 8006a8e:	4630      	mov	r0, r6
 8006a90:	b003      	add	sp, #12
 8006a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	3b04      	subs	r3, #4
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	d1cc      	bne.n	8006a38 <quorem+0x9c>
 8006a9e:	3c01      	subs	r4, #1
 8006aa0:	e7c7      	b.n	8006a32 <quorem+0x96>
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	3b04      	subs	r3, #4
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	d1f0      	bne.n	8006a8c <quorem+0xf0>
 8006aaa:	3c01      	subs	r4, #1
 8006aac:	e7eb      	b.n	8006a86 <quorem+0xea>
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e7ee      	b.n	8006a90 <quorem+0xf4>
 8006ab2:	0000      	movs	r0, r0
 8006ab4:	0000      	movs	r0, r0
	...

08006ab8 <_dtoa_r>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	ed2d 8b04 	vpush	{d8-d9}
 8006ac0:	ec57 6b10 	vmov	r6, r7, d0
 8006ac4:	b093      	sub	sp, #76	; 0x4c
 8006ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006acc:	9106      	str	r1, [sp, #24]
 8006ace:	ee10 aa10 	vmov	sl, s0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ad8:	46bb      	mov	fp, r7
 8006ada:	b975      	cbnz	r5, 8006afa <_dtoa_r+0x42>
 8006adc:	2010      	movs	r0, #16
 8006ade:	f000 fed7 	bl	8007890 <malloc>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8006ae6:	b920      	cbnz	r0, 8006af2 <_dtoa_r+0x3a>
 8006ae8:	4ba7      	ldr	r3, [pc, #668]	; (8006d88 <_dtoa_r+0x2d0>)
 8006aea:	21ea      	movs	r1, #234	; 0xea
 8006aec:	48a7      	ldr	r0, [pc, #668]	; (8006d8c <_dtoa_r+0x2d4>)
 8006aee:	f001 fdd1 	bl	8008694 <__assert_func>
 8006af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006af6:	6005      	str	r5, [r0, #0]
 8006af8:	60c5      	str	r5, [r0, #12]
 8006afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afc:	6819      	ldr	r1, [r3, #0]
 8006afe:	b151      	cbz	r1, 8006b16 <_dtoa_r+0x5e>
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	604a      	str	r2, [r1, #4]
 8006b04:	2301      	movs	r3, #1
 8006b06:	4093      	lsls	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 ff08 	bl	8007920 <_Bfree>
 8006b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	1e3b      	subs	r3, r7, #0
 8006b18:	bfaa      	itet	ge
 8006b1a:	2300      	movge	r3, #0
 8006b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b20:	f8c8 3000 	strge.w	r3, [r8]
 8006b24:	4b9a      	ldr	r3, [pc, #616]	; (8006d90 <_dtoa_r+0x2d8>)
 8006b26:	bfbc      	itt	lt
 8006b28:	2201      	movlt	r2, #1
 8006b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8006b2e:	ea33 030b 	bics.w	r3, r3, fp
 8006b32:	d11b      	bne.n	8006b6c <_dtoa_r+0xb4>
 8006b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b40:	4333      	orrs	r3, r6
 8006b42:	f000 8592 	beq.w	800766a <_dtoa_r+0xbb2>
 8006b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b48:	b963      	cbnz	r3, 8006b64 <_dtoa_r+0xac>
 8006b4a:	4b92      	ldr	r3, [pc, #584]	; (8006d94 <_dtoa_r+0x2dc>)
 8006b4c:	e022      	b.n	8006b94 <_dtoa_r+0xdc>
 8006b4e:	4b92      	ldr	r3, [pc, #584]	; (8006d98 <_dtoa_r+0x2e0>)
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	3308      	adds	r3, #8
 8006b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	9801      	ldr	r0, [sp, #4]
 8006b5a:	b013      	add	sp, #76	; 0x4c
 8006b5c:	ecbd 8b04 	vpop	{d8-d9}
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	4b8b      	ldr	r3, [pc, #556]	; (8006d94 <_dtoa_r+0x2dc>)
 8006b66:	9301      	str	r3, [sp, #4]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	e7f3      	b.n	8006b54 <_dtoa_r+0x9c>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	f7f9 ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b78:	ec4b ab19 	vmov	d9, sl, fp
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	b158      	cbz	r0, 8006b98 <_dtoa_r+0xe0>
 8006b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b82:	2301      	movs	r3, #1
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 856b 	beq.w	8007664 <_dtoa_r+0xbac>
 8006b8e:	4883      	ldr	r0, [pc, #524]	; (8006d9c <_dtoa_r+0x2e4>)
 8006b90:	6018      	str	r0, [r3, #0]
 8006b92:	1e43      	subs	r3, r0, #1
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	e7df      	b.n	8006b58 <_dtoa_r+0xa0>
 8006b98:	ec4b ab10 	vmov	d0, sl, fp
 8006b9c:	aa10      	add	r2, sp, #64	; 0x40
 8006b9e:	a911      	add	r1, sp, #68	; 0x44
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f001 f9a5 	bl	8007ef0 <__d2b>
 8006ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006baa:	ee08 0a10 	vmov	s16, r0
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	f000 8084 	beq.w	8006cbc <_dtoa_r+0x204>
 8006bb4:	ee19 3a90 	vmov	r3, s19
 8006bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006bc0:	4656      	mov	r6, sl
 8006bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006bce:	4b74      	ldr	r3, [pc, #464]	; (8006da0 <_dtoa_r+0x2e8>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	f7f9 fb5f 	bl	8000298 <__aeabi_dsub>
 8006bda:	a365      	add	r3, pc, #404	; (adr r3, 8006d70 <_dtoa_r+0x2b8>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7f9 fd12 	bl	8000608 <__aeabi_dmul>
 8006be4:	a364      	add	r3, pc, #400	; (adr r3, 8006d78 <_dtoa_r+0x2c0>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7f9 fb57 	bl	800029c <__adddf3>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	460f      	mov	r7, r1
 8006bf4:	f7f9 fc9e 	bl	8000534 <__aeabi_i2d>
 8006bf8:	a361      	add	r3, pc, #388	; (adr r3, 8006d80 <_dtoa_r+0x2c8>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fd03 	bl	8000608 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4630      	mov	r0, r6
 8006c08:	4639      	mov	r1, r7
 8006c0a:	f7f9 fb47 	bl	800029c <__adddf3>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460f      	mov	r7, r1
 8006c12:	f7f9 ffa9 	bl	8000b68 <__aeabi_d2iz>
 8006c16:	2200      	movs	r2, #0
 8006c18:	9000      	str	r0, [sp, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	4639      	mov	r1, r7
 8006c20:	f7f9 ff64 	bl	8000aec <__aeabi_dcmplt>
 8006c24:	b150      	cbz	r0, 8006c3c <_dtoa_r+0x184>
 8006c26:	9800      	ldr	r0, [sp, #0]
 8006c28:	f7f9 fc84 	bl	8000534 <__aeabi_i2d>
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	463b      	mov	r3, r7
 8006c30:	f7f9 ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c34:	b910      	cbnz	r0, 8006c3c <_dtoa_r+0x184>
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	9b00      	ldr	r3, [sp, #0]
 8006c3e:	2b16      	cmp	r3, #22
 8006c40:	d85a      	bhi.n	8006cf8 <_dtoa_r+0x240>
 8006c42:	9a00      	ldr	r2, [sp, #0]
 8006c44:	4b57      	ldr	r3, [pc, #348]	; (8006da4 <_dtoa_r+0x2ec>)
 8006c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	ec51 0b19 	vmov	r0, r1, d9
 8006c52:	f7f9 ff4b 	bl	8000aec <__aeabi_dcmplt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d050      	beq.n	8006cfc <_dtoa_r+0x244>
 8006c5a:	9b00      	ldr	r3, [sp, #0]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	2300      	movs	r3, #0
 8006c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c66:	1b5d      	subs	r5, r3, r5
 8006c68:	1e6b      	subs	r3, r5, #1
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	bf45      	ittet	mi
 8006c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c72:	9304      	strmi	r3, [sp, #16]
 8006c74:	2300      	movpl	r3, #0
 8006c76:	2300      	movmi	r3, #0
 8006c78:	bf4c      	ite	mi
 8006c7a:	9305      	strmi	r3, [sp, #20]
 8006c7c:	9304      	strpl	r3, [sp, #16]
 8006c7e:	9b00      	ldr	r3, [sp, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	db3d      	blt.n	8006d00 <_dtoa_r+0x248>
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	9a00      	ldr	r2, [sp, #0]
 8006c88:	920a      	str	r2, [sp, #40]	; 0x28
 8006c8a:	4413      	add	r3, r2
 8006c8c:	9305      	str	r3, [sp, #20]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9307      	str	r3, [sp, #28]
 8006c92:	9b06      	ldr	r3, [sp, #24]
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	f200 8089 	bhi.w	8006dac <_dtoa_r+0x2f4>
 8006c9a:	2b05      	cmp	r3, #5
 8006c9c:	bfc4      	itt	gt
 8006c9e:	3b04      	subgt	r3, #4
 8006ca0:	9306      	strgt	r3, [sp, #24]
 8006ca2:	9b06      	ldr	r3, [sp, #24]
 8006ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ca8:	bfcc      	ite	gt
 8006caa:	2500      	movgt	r5, #0
 8006cac:	2501      	movle	r5, #1
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	f200 8087 	bhi.w	8006dc2 <_dtoa_r+0x30a>
 8006cb4:	e8df f003 	tbb	[pc, r3]
 8006cb8:	59383a2d 	.word	0x59383a2d
 8006cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006cc0:	441d      	add	r5, r3
 8006cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	bfc1      	itttt	gt
 8006cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cda:	bfda      	itte	le
 8006cdc:	f1c3 0320 	rsble	r3, r3, #32
 8006ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ce4:	4318      	orrgt	r0, r3
 8006ce6:	f7f9 fc15 	bl	8000514 <__aeabi_ui2d>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4606      	mov	r6, r0
 8006cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006cf2:	3d01      	subs	r5, #1
 8006cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8006cf6:	e76a      	b.n	8006bce <_dtoa_r+0x116>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e7b2      	b.n	8006c62 <_dtoa_r+0x1aa>
 8006cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006cfe:	e7b1      	b.n	8006c64 <_dtoa_r+0x1ac>
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	9a00      	ldr	r2, [sp, #0]
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	4253      	negs	r3, r2
 8006d0a:	9307      	str	r3, [sp, #28]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d10:	e7bf      	b.n	8006c92 <_dtoa_r+0x1da>
 8006d12:	2300      	movs	r3, #0
 8006d14:	9308      	str	r3, [sp, #32]
 8006d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc55      	bgt.n	8006dc8 <_dtoa_r+0x310>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d22:	461a      	mov	r2, r3
 8006d24:	9209      	str	r2, [sp, #36]	; 0x24
 8006d26:	e00c      	b.n	8006d42 <_dtoa_r+0x28a>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e7f3      	b.n	8006d14 <_dtoa_r+0x25c>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d30:	9308      	str	r3, [sp, #32]
 8006d32:	9b00      	ldr	r3, [sp, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	9302      	str	r3, [sp, #8]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	bfb8      	it	lt
 8006d40:	2301      	movlt	r3, #1
 8006d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d44:	2200      	movs	r2, #0
 8006d46:	6042      	str	r2, [r0, #4]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	f102 0614 	add.w	r6, r2, #20
 8006d4e:	429e      	cmp	r6, r3
 8006d50:	6841      	ldr	r1, [r0, #4]
 8006d52:	d93d      	bls.n	8006dd0 <_dtoa_r+0x318>
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 fda3 	bl	80078a0 <_Balloc>
 8006d5a:	9001      	str	r0, [sp, #4]
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d13b      	bne.n	8006dd8 <_dtoa_r+0x320>
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <_dtoa_r+0x2f0>)
 8006d62:	4602      	mov	r2, r0
 8006d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d68:	e6c0      	b.n	8006aec <_dtoa_r+0x34>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e7df      	b.n	8006d2e <_dtoa_r+0x276>
 8006d6e:	bf00      	nop
 8006d70:	636f4361 	.word	0x636f4361
 8006d74:	3fd287a7 	.word	0x3fd287a7
 8006d78:	8b60c8b3 	.word	0x8b60c8b3
 8006d7c:	3fc68a28 	.word	0x3fc68a28
 8006d80:	509f79fb 	.word	0x509f79fb
 8006d84:	3fd34413 	.word	0x3fd34413
 8006d88:	0800a301 	.word	0x0800a301
 8006d8c:	0800a318 	.word	0x0800a318
 8006d90:	7ff00000 	.word	0x7ff00000
 8006d94:	0800a2fd 	.word	0x0800a2fd
 8006d98:	0800a2f4 	.word	0x0800a2f4
 8006d9c:	0800a2d1 	.word	0x0800a2d1
 8006da0:	3ff80000 	.word	0x3ff80000
 8006da4:	0800a468 	.word	0x0800a468
 8006da8:	0800a373 	.word	0x0800a373
 8006dac:	2501      	movs	r5, #1
 8006dae:	2300      	movs	r3, #0
 8006db0:	9306      	str	r3, [sp, #24]
 8006db2:	9508      	str	r5, [sp, #32]
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295
 8006db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2312      	movs	r3, #18
 8006dc0:	e7b0      	b.n	8006d24 <_dtoa_r+0x26c>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	9308      	str	r3, [sp, #32]
 8006dc6:	e7f5      	b.n	8006db4 <_dtoa_r+0x2fc>
 8006dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dce:	e7b8      	b.n	8006d42 <_dtoa_r+0x28a>
 8006dd0:	3101      	adds	r1, #1
 8006dd2:	6041      	str	r1, [r0, #4]
 8006dd4:	0052      	lsls	r2, r2, #1
 8006dd6:	e7b8      	b.n	8006d4a <_dtoa_r+0x292>
 8006dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dda:	9a01      	ldr	r2, [sp, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	2b0e      	cmp	r3, #14
 8006de2:	f200 809d 	bhi.w	8006f20 <_dtoa_r+0x468>
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	f000 809a 	beq.w	8006f20 <_dtoa_r+0x468>
 8006dec:	9b00      	ldr	r3, [sp, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dd32      	ble.n	8006e58 <_dtoa_r+0x3a0>
 8006df2:	4ab7      	ldr	r2, [pc, #732]	; (80070d0 <_dtoa_r+0x618>)
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	05d8      	lsls	r0, r3, #23
 8006e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e08:	d516      	bpl.n	8006e38 <_dtoa_r+0x380>
 8006e0a:	4bb2      	ldr	r3, [pc, #712]	; (80070d4 <_dtoa_r+0x61c>)
 8006e0c:	ec51 0b19 	vmov	r0, r1, d9
 8006e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e14:	f7f9 fd22 	bl	800085c <__aeabi_ddiv>
 8006e18:	f007 070f 	and.w	r7, r7, #15
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	468b      	mov	fp, r1
 8006e20:	2503      	movs	r5, #3
 8006e22:	4eac      	ldr	r6, [pc, #688]	; (80070d4 <_dtoa_r+0x61c>)
 8006e24:	b957      	cbnz	r7, 8006e3c <_dtoa_r+0x384>
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	f7f9 fd15 	bl	800085c <__aeabi_ddiv>
 8006e32:	4682      	mov	sl, r0
 8006e34:	468b      	mov	fp, r1
 8006e36:	e028      	b.n	8006e8a <_dtoa_r+0x3d2>
 8006e38:	2502      	movs	r5, #2
 8006e3a:	e7f2      	b.n	8006e22 <_dtoa_r+0x36a>
 8006e3c:	07f9      	lsls	r1, r7, #31
 8006e3e:	d508      	bpl.n	8006e52 <_dtoa_r+0x39a>
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e48:	f7f9 fbde 	bl	8000608 <__aeabi_dmul>
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	4680      	mov	r8, r0
 8006e50:	4689      	mov	r9, r1
 8006e52:	107f      	asrs	r7, r7, #1
 8006e54:	3608      	adds	r6, #8
 8006e56:	e7e5      	b.n	8006e24 <_dtoa_r+0x36c>
 8006e58:	f000 809b 	beq.w	8006f92 <_dtoa_r+0x4da>
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	4f9d      	ldr	r7, [pc, #628]	; (80070d4 <_dtoa_r+0x61c>)
 8006e60:	425e      	negs	r6, r3
 8006e62:	4b9b      	ldr	r3, [pc, #620]	; (80070d0 <_dtoa_r+0x618>)
 8006e64:	f006 020f 	and.w	r2, r6, #15
 8006e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	ec51 0b19 	vmov	r0, r1, d9
 8006e74:	f7f9 fbc8 	bl	8000608 <__aeabi_dmul>
 8006e78:	1136      	asrs	r6, r6, #4
 8006e7a:	4682      	mov	sl, r0
 8006e7c:	468b      	mov	fp, r1
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2502      	movs	r5, #2
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d17a      	bne.n	8006f7c <_dtoa_r+0x4c4>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1d3      	bne.n	8006e32 <_dtoa_r+0x37a>
 8006e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8082 	beq.w	8006f96 <_dtoa_r+0x4de>
 8006e92:	4b91      	ldr	r3, [pc, #580]	; (80070d8 <_dtoa_r+0x620>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	4650      	mov	r0, sl
 8006e98:	4659      	mov	r1, fp
 8006e9a:	f7f9 fe27 	bl	8000aec <__aeabi_dcmplt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d079      	beq.n	8006f96 <_dtoa_r+0x4de>
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d076      	beq.n	8006f96 <_dtoa_r+0x4de>
 8006ea8:	9b02      	ldr	r3, [sp, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	dd36      	ble.n	8006f1c <_dtoa_r+0x464>
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	4659      	mov	r1, fp
 8006eb4:	1e5f      	subs	r7, r3, #1
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4b88      	ldr	r3, [pc, #544]	; (80070dc <_dtoa_r+0x624>)
 8006eba:	f7f9 fba5 	bl	8000608 <__aeabi_dmul>
 8006ebe:	9e02      	ldr	r6, [sp, #8]
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	468b      	mov	fp, r1
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f7f9 fb34 	bl	8000534 <__aeabi_i2d>
 8006ecc:	4652      	mov	r2, sl
 8006ece:	465b      	mov	r3, fp
 8006ed0:	f7f9 fb9a 	bl	8000608 <__aeabi_dmul>
 8006ed4:	4b82      	ldr	r3, [pc, #520]	; (80070e0 <_dtoa_r+0x628>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f7f9 f9e0 	bl	800029c <__adddf3>
 8006edc:	46d0      	mov	r8, sl
 8006ede:	46d9      	mov	r9, fp
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ee6:	2e00      	cmp	r6, #0
 8006ee8:	d158      	bne.n	8006f9c <_dtoa_r+0x4e4>
 8006eea:	4b7e      	ldr	r3, [pc, #504]	; (80070e4 <_dtoa_r+0x62c>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	f7f9 f9d1 	bl	8000298 <__aeabi_dsub>
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	465b      	mov	r3, fp
 8006efa:	4680      	mov	r8, r0
 8006efc:	4689      	mov	r9, r1
 8006efe:	f7f9 fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f040 8295 	bne.w	8007432 <_dtoa_r+0x97a>
 8006f08:	4652      	mov	r2, sl
 8006f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4649      	mov	r1, r9
 8006f12:	f7f9 fdeb 	bl	8000aec <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f040 8289 	bne.w	800742e <_dtoa_r+0x976>
 8006f1c:	ec5b ab19 	vmov	sl, fp, d9
 8006f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f2c0 8148 	blt.w	80071b8 <_dtoa_r+0x700>
 8006f28:	9a00      	ldr	r2, [sp, #0]
 8006f2a:	2a0e      	cmp	r2, #14
 8006f2c:	f300 8144 	bgt.w	80071b8 <_dtoa_r+0x700>
 8006f30:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <_dtoa_r+0x618>)
 8006f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f280 80d5 	bge.w	80070ec <_dtoa_r+0x634>
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f300 80d1 	bgt.w	80070ec <_dtoa_r+0x634>
 8006f4a:	f040 826f 	bne.w	800742c <_dtoa_r+0x974>
 8006f4e:	4b65      	ldr	r3, [pc, #404]	; (80070e4 <_dtoa_r+0x62c>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	f7f9 fb57 	bl	8000608 <__aeabi_dmul>
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	465b      	mov	r3, fp
 8006f5e:	f7f9 fdd9 	bl	8000b14 <__aeabi_dcmpge>
 8006f62:	9e03      	ldr	r6, [sp, #12]
 8006f64:	4637      	mov	r7, r6
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f040 8245 	bne.w	80073f6 <_dtoa_r+0x93e>
 8006f6c:	9d01      	ldr	r5, [sp, #4]
 8006f6e:	2331      	movs	r3, #49	; 0x31
 8006f70:	f805 3b01 	strb.w	r3, [r5], #1
 8006f74:	9b00      	ldr	r3, [sp, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	e240      	b.n	80073fe <_dtoa_r+0x946>
 8006f7c:	07f2      	lsls	r2, r6, #31
 8006f7e:	d505      	bpl.n	8006f8c <_dtoa_r+0x4d4>
 8006f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f84:	f7f9 fb40 	bl	8000608 <__aeabi_dmul>
 8006f88:	3501      	adds	r5, #1
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	1076      	asrs	r6, r6, #1
 8006f8e:	3708      	adds	r7, #8
 8006f90:	e777      	b.n	8006e82 <_dtoa_r+0x3ca>
 8006f92:	2502      	movs	r5, #2
 8006f94:	e779      	b.n	8006e8a <_dtoa_r+0x3d2>
 8006f96:	9f00      	ldr	r7, [sp, #0]
 8006f98:	9e03      	ldr	r6, [sp, #12]
 8006f9a:	e794      	b.n	8006ec6 <_dtoa_r+0x40e>
 8006f9c:	9901      	ldr	r1, [sp, #4]
 8006f9e:	4b4c      	ldr	r3, [pc, #304]	; (80070d0 <_dtoa_r+0x618>)
 8006fa0:	4431      	add	r1, r6
 8006fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8006fa4:	9908      	ldr	r1, [sp, #32]
 8006fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	d043      	beq.n	800703a <_dtoa_r+0x582>
 8006fb2:	494d      	ldr	r1, [pc, #308]	; (80070e8 <_dtoa_r+0x630>)
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f7f9 fc51 	bl	800085c <__aeabi_ddiv>
 8006fba:	4652      	mov	r2, sl
 8006fbc:	465b      	mov	r3, fp
 8006fbe:	f7f9 f96b 	bl	8000298 <__aeabi_dsub>
 8006fc2:	9d01      	ldr	r5, [sp, #4]
 8006fc4:	4682      	mov	sl, r0
 8006fc6:	468b      	mov	fp, r1
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7f9 fdcc 	bl	8000b68 <__aeabi_d2iz>
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	f7f9 faaf 	bl	8000534 <__aeabi_i2d>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4640      	mov	r0, r8
 8006fdc:	4649      	mov	r1, r9
 8006fde:	f7f9 f95b 	bl	8000298 <__aeabi_dsub>
 8006fe2:	3630      	adds	r6, #48	; 0x30
 8006fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	465b      	mov	r3, fp
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
 8006ff0:	f7f9 fd7c 	bl	8000aec <__aeabi_dcmplt>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d163      	bne.n	80070c0 <_dtoa_r+0x608>
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	4936      	ldr	r1, [pc, #216]	; (80070d8 <_dtoa_r+0x620>)
 8006ffe:	2000      	movs	r0, #0
 8007000:	f7f9 f94a 	bl	8000298 <__aeabi_dsub>
 8007004:	4652      	mov	r2, sl
 8007006:	465b      	mov	r3, fp
 8007008:	f7f9 fd70 	bl	8000aec <__aeabi_dcmplt>
 800700c:	2800      	cmp	r0, #0
 800700e:	f040 80b5 	bne.w	800717c <_dtoa_r+0x6c4>
 8007012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007014:	429d      	cmp	r5, r3
 8007016:	d081      	beq.n	8006f1c <_dtoa_r+0x464>
 8007018:	4b30      	ldr	r3, [pc, #192]	; (80070dc <_dtoa_r+0x624>)
 800701a:	2200      	movs	r2, #0
 800701c:	4650      	mov	r0, sl
 800701e:	4659      	mov	r1, fp
 8007020:	f7f9 faf2 	bl	8000608 <__aeabi_dmul>
 8007024:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <_dtoa_r+0x624>)
 8007026:	4682      	mov	sl, r0
 8007028:	468b      	mov	fp, r1
 800702a:	4640      	mov	r0, r8
 800702c:	4649      	mov	r1, r9
 800702e:	2200      	movs	r2, #0
 8007030:	f7f9 faea 	bl	8000608 <__aeabi_dmul>
 8007034:	4680      	mov	r8, r0
 8007036:	4689      	mov	r9, r1
 8007038:	e7c6      	b.n	8006fc8 <_dtoa_r+0x510>
 800703a:	4650      	mov	r0, sl
 800703c:	4659      	mov	r1, fp
 800703e:	f7f9 fae3 	bl	8000608 <__aeabi_dmul>
 8007042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007044:	9d01      	ldr	r5, [sp, #4]
 8007046:	930f      	str	r3, [sp, #60]	; 0x3c
 8007048:	4682      	mov	sl, r0
 800704a:	468b      	mov	fp, r1
 800704c:	4649      	mov	r1, r9
 800704e:	4640      	mov	r0, r8
 8007050:	f7f9 fd8a 	bl	8000b68 <__aeabi_d2iz>
 8007054:	4606      	mov	r6, r0
 8007056:	f7f9 fa6d 	bl	8000534 <__aeabi_i2d>
 800705a:	3630      	adds	r6, #48	; 0x30
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4640      	mov	r0, r8
 8007062:	4649      	mov	r1, r9
 8007064:	f7f9 f918 	bl	8000298 <__aeabi_dsub>
 8007068:	f805 6b01 	strb.w	r6, [r5], #1
 800706c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800706e:	429d      	cmp	r5, r3
 8007070:	4680      	mov	r8, r0
 8007072:	4689      	mov	r9, r1
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	d124      	bne.n	80070c4 <_dtoa_r+0x60c>
 800707a:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <_dtoa_r+0x630>)
 800707c:	4650      	mov	r0, sl
 800707e:	4659      	mov	r1, fp
 8007080:	f7f9 f90c 	bl	800029c <__adddf3>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 8007090:	2800      	cmp	r0, #0
 8007092:	d173      	bne.n	800717c <_dtoa_r+0x6c4>
 8007094:	4652      	mov	r2, sl
 8007096:	465b      	mov	r3, fp
 8007098:	4913      	ldr	r1, [pc, #76]	; (80070e8 <_dtoa_r+0x630>)
 800709a:	2000      	movs	r0, #0
 800709c:	f7f9 f8fc 	bl	8000298 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fd20 	bl	8000aec <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f43f af35 	beq.w	8006f1c <_dtoa_r+0x464>
 80070b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070b4:	1e6b      	subs	r3, r5, #1
 80070b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070bc:	2b30      	cmp	r3, #48	; 0x30
 80070be:	d0f8      	beq.n	80070b2 <_dtoa_r+0x5fa>
 80070c0:	9700      	str	r7, [sp, #0]
 80070c2:	e049      	b.n	8007158 <_dtoa_r+0x6a0>
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <_dtoa_r+0x624>)
 80070c6:	f7f9 fa9f 	bl	8000608 <__aeabi_dmul>
 80070ca:	4680      	mov	r8, r0
 80070cc:	4689      	mov	r9, r1
 80070ce:	e7bd      	b.n	800704c <_dtoa_r+0x594>
 80070d0:	0800a468 	.word	0x0800a468
 80070d4:	0800a440 	.word	0x0800a440
 80070d8:	3ff00000 	.word	0x3ff00000
 80070dc:	40240000 	.word	0x40240000
 80070e0:	401c0000 	.word	0x401c0000
 80070e4:	40140000 	.word	0x40140000
 80070e8:	3fe00000 	.word	0x3fe00000
 80070ec:	9d01      	ldr	r5, [sp, #4]
 80070ee:	4656      	mov	r6, sl
 80070f0:	465f      	mov	r7, fp
 80070f2:	4642      	mov	r2, r8
 80070f4:	464b      	mov	r3, r9
 80070f6:	4630      	mov	r0, r6
 80070f8:	4639      	mov	r1, r7
 80070fa:	f7f9 fbaf 	bl	800085c <__aeabi_ddiv>
 80070fe:	f7f9 fd33 	bl	8000b68 <__aeabi_d2iz>
 8007102:	4682      	mov	sl, r0
 8007104:	f7f9 fa16 	bl	8000534 <__aeabi_i2d>
 8007108:	4642      	mov	r2, r8
 800710a:	464b      	mov	r3, r9
 800710c:	f7f9 fa7c 	bl	8000608 <__aeabi_dmul>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4630      	mov	r0, r6
 8007116:	4639      	mov	r1, r7
 8007118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800711c:	f7f9 f8bc 	bl	8000298 <__aeabi_dsub>
 8007120:	f805 6b01 	strb.w	r6, [r5], #1
 8007124:	9e01      	ldr	r6, [sp, #4]
 8007126:	9f03      	ldr	r7, [sp, #12]
 8007128:	1bae      	subs	r6, r5, r6
 800712a:	42b7      	cmp	r7, r6
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	d135      	bne.n	800719e <_dtoa_r+0x6e6>
 8007132:	f7f9 f8b3 	bl	800029c <__adddf3>
 8007136:	4642      	mov	r2, r8
 8007138:	464b      	mov	r3, r9
 800713a:	4606      	mov	r6, r0
 800713c:	460f      	mov	r7, r1
 800713e:	f7f9 fcf3 	bl	8000b28 <__aeabi_dcmpgt>
 8007142:	b9d0      	cbnz	r0, 800717a <_dtoa_r+0x6c2>
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	4630      	mov	r0, r6
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 fcc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007150:	b110      	cbz	r0, 8007158 <_dtoa_r+0x6a0>
 8007152:	f01a 0f01 	tst.w	sl, #1
 8007156:	d110      	bne.n	800717a <_dtoa_r+0x6c2>
 8007158:	4620      	mov	r0, r4
 800715a:	ee18 1a10 	vmov	r1, s16
 800715e:	f000 fbdf 	bl	8007920 <_Bfree>
 8007162:	2300      	movs	r3, #0
 8007164:	9800      	ldr	r0, [sp, #0]
 8007166:	702b      	strb	r3, [r5, #0]
 8007168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800716a:	3001      	adds	r0, #1
 800716c:	6018      	str	r0, [r3, #0]
 800716e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007170:	2b00      	cmp	r3, #0
 8007172:	f43f acf1 	beq.w	8006b58 <_dtoa_r+0xa0>
 8007176:	601d      	str	r5, [r3, #0]
 8007178:	e4ee      	b.n	8006b58 <_dtoa_r+0xa0>
 800717a:	9f00      	ldr	r7, [sp, #0]
 800717c:	462b      	mov	r3, r5
 800717e:	461d      	mov	r5, r3
 8007180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007184:	2a39      	cmp	r2, #57	; 0x39
 8007186:	d106      	bne.n	8007196 <_dtoa_r+0x6de>
 8007188:	9a01      	ldr	r2, [sp, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d1f7      	bne.n	800717e <_dtoa_r+0x6c6>
 800718e:	9901      	ldr	r1, [sp, #4]
 8007190:	2230      	movs	r2, #48	; 0x30
 8007192:	3701      	adds	r7, #1
 8007194:	700a      	strb	r2, [r1, #0]
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	3201      	adds	r2, #1
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e790      	b.n	80070c0 <_dtoa_r+0x608>
 800719e:	4ba6      	ldr	r3, [pc, #664]	; (8007438 <_dtoa_r+0x980>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	f7f9 fa31 	bl	8000608 <__aeabi_dmul>
 80071a6:	2200      	movs	r2, #0
 80071a8:	2300      	movs	r3, #0
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	f7f9 fc93 	bl	8000ad8 <__aeabi_dcmpeq>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d09d      	beq.n	80070f2 <_dtoa_r+0x63a>
 80071b6:	e7cf      	b.n	8007158 <_dtoa_r+0x6a0>
 80071b8:	9a08      	ldr	r2, [sp, #32]
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	f000 80d7 	beq.w	800736e <_dtoa_r+0x8b6>
 80071c0:	9a06      	ldr	r2, [sp, #24]
 80071c2:	2a01      	cmp	r2, #1
 80071c4:	f300 80ba 	bgt.w	800733c <_dtoa_r+0x884>
 80071c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ca:	2a00      	cmp	r2, #0
 80071cc:	f000 80b2 	beq.w	8007334 <_dtoa_r+0x87c>
 80071d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071d4:	9e07      	ldr	r6, [sp, #28]
 80071d6:	9d04      	ldr	r5, [sp, #16]
 80071d8:	9a04      	ldr	r2, [sp, #16]
 80071da:	441a      	add	r2, r3
 80071dc:	9204      	str	r2, [sp, #16]
 80071de:	9a05      	ldr	r2, [sp, #20]
 80071e0:	2101      	movs	r1, #1
 80071e2:	441a      	add	r2, r3
 80071e4:	4620      	mov	r0, r4
 80071e6:	9205      	str	r2, [sp, #20]
 80071e8:	f000 fc52 	bl	8007a90 <__i2b>
 80071ec:	4607      	mov	r7, r0
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	dd0c      	ble.n	800720c <_dtoa_r+0x754>
 80071f2:	9b05      	ldr	r3, [sp, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dd09      	ble.n	800720c <_dtoa_r+0x754>
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	9a04      	ldr	r2, [sp, #16]
 80071fc:	bfa8      	it	ge
 80071fe:	462b      	movge	r3, r5
 8007200:	1ad2      	subs	r2, r2, r3
 8007202:	9204      	str	r2, [sp, #16]
 8007204:	9a05      	ldr	r2, [sp, #20]
 8007206:	1aed      	subs	r5, r5, r3
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	9305      	str	r3, [sp, #20]
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	b31b      	cbz	r3, 8007258 <_dtoa_r+0x7a0>
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 80af 	beq.w	8007376 <_dtoa_r+0x8be>
 8007218:	2e00      	cmp	r6, #0
 800721a:	dd13      	ble.n	8007244 <_dtoa_r+0x78c>
 800721c:	4639      	mov	r1, r7
 800721e:	4632      	mov	r2, r6
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fcf5 	bl	8007c10 <__pow5mult>
 8007226:	ee18 2a10 	vmov	r2, s16
 800722a:	4601      	mov	r1, r0
 800722c:	4607      	mov	r7, r0
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fc44 	bl	8007abc <__multiply>
 8007234:	ee18 1a10 	vmov	r1, s16
 8007238:	4680      	mov	r8, r0
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fb70 	bl	8007920 <_Bfree>
 8007240:	ee08 8a10 	vmov	s16, r8
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	1b9a      	subs	r2, r3, r6
 8007248:	d006      	beq.n	8007258 <_dtoa_r+0x7a0>
 800724a:	ee18 1a10 	vmov	r1, s16
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fcde 	bl	8007c10 <__pow5mult>
 8007254:	ee08 0a10 	vmov	s16, r0
 8007258:	2101      	movs	r1, #1
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fc18 	bl	8007a90 <__i2b>
 8007260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	4606      	mov	r6, r0
 8007266:	f340 8088 	ble.w	800737a <_dtoa_r+0x8c2>
 800726a:	461a      	mov	r2, r3
 800726c:	4601      	mov	r1, r0
 800726e:	4620      	mov	r0, r4
 8007270:	f000 fcce 	bl	8007c10 <__pow5mult>
 8007274:	9b06      	ldr	r3, [sp, #24]
 8007276:	2b01      	cmp	r3, #1
 8007278:	4606      	mov	r6, r0
 800727a:	f340 8081 	ble.w	8007380 <_dtoa_r+0x8c8>
 800727e:	f04f 0800 	mov.w	r8, #0
 8007282:	6933      	ldr	r3, [r6, #16]
 8007284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007288:	6918      	ldr	r0, [r3, #16]
 800728a:	f000 fbb1 	bl	80079f0 <__hi0bits>
 800728e:	f1c0 0020 	rsb	r0, r0, #32
 8007292:	9b05      	ldr	r3, [sp, #20]
 8007294:	4418      	add	r0, r3
 8007296:	f010 001f 	ands.w	r0, r0, #31
 800729a:	f000 8092 	beq.w	80073c2 <_dtoa_r+0x90a>
 800729e:	f1c0 0320 	rsb	r3, r0, #32
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	f340 808a 	ble.w	80073bc <_dtoa_r+0x904>
 80072a8:	f1c0 001c 	rsb	r0, r0, #28
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	4403      	add	r3, r0
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	4403      	add	r3, r0
 80072b6:	4405      	add	r5, r0
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	9b04      	ldr	r3, [sp, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dd07      	ble.n	80072d0 <_dtoa_r+0x818>
 80072c0:	ee18 1a10 	vmov	r1, s16
 80072c4:	461a      	mov	r2, r3
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fcfc 	bl	8007cc4 <__lshift>
 80072cc:	ee08 0a10 	vmov	s16, r0
 80072d0:	9b05      	ldr	r3, [sp, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dd05      	ble.n	80072e2 <_dtoa_r+0x82a>
 80072d6:	4631      	mov	r1, r6
 80072d8:	461a      	mov	r2, r3
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fcf2 	bl	8007cc4 <__lshift>
 80072e0:	4606      	mov	r6, r0
 80072e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d06e      	beq.n	80073c6 <_dtoa_r+0x90e>
 80072e8:	ee18 0a10 	vmov	r0, s16
 80072ec:	4631      	mov	r1, r6
 80072ee:	f000 fd59 	bl	8007da4 <__mcmp>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	da67      	bge.n	80073c6 <_dtoa_r+0x90e>
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	ee18 1a10 	vmov	r1, s16
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	220a      	movs	r2, #10
 8007302:	2300      	movs	r3, #0
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fb2d 	bl	8007964 <__multadd>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	ee08 0a10 	vmov	s16, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 81b1 	beq.w	8007678 <_dtoa_r+0xbc0>
 8007316:	2300      	movs	r3, #0
 8007318:	4639      	mov	r1, r7
 800731a:	220a      	movs	r2, #10
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fb21 	bl	8007964 <__multadd>
 8007322:	9b02      	ldr	r3, [sp, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	4607      	mov	r7, r0
 8007328:	f300 808e 	bgt.w	8007448 <_dtoa_r+0x990>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	2b02      	cmp	r3, #2
 8007330:	dc51      	bgt.n	80073d6 <_dtoa_r+0x91e>
 8007332:	e089      	b.n	8007448 <_dtoa_r+0x990>
 8007334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800733a:	e74b      	b.n	80071d4 <_dtoa_r+0x71c>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1e5e      	subs	r6, r3, #1
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	42b3      	cmp	r3, r6
 8007344:	bfbf      	itttt	lt
 8007346:	9b07      	ldrlt	r3, [sp, #28]
 8007348:	9607      	strlt	r6, [sp, #28]
 800734a:	1af2      	sublt	r2, r6, r3
 800734c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800734e:	bfb6      	itet	lt
 8007350:	189b      	addlt	r3, r3, r2
 8007352:	1b9e      	subge	r6, r3, r6
 8007354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	bfb8      	it	lt
 800735a:	2600      	movlt	r6, #0
 800735c:	2b00      	cmp	r3, #0
 800735e:	bfb7      	itett	lt
 8007360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007368:	1a9d      	sublt	r5, r3, r2
 800736a:	2300      	movlt	r3, #0
 800736c:	e734      	b.n	80071d8 <_dtoa_r+0x720>
 800736e:	9e07      	ldr	r6, [sp, #28]
 8007370:	9d04      	ldr	r5, [sp, #16]
 8007372:	9f08      	ldr	r7, [sp, #32]
 8007374:	e73b      	b.n	80071ee <_dtoa_r+0x736>
 8007376:	9a07      	ldr	r2, [sp, #28]
 8007378:	e767      	b.n	800724a <_dtoa_r+0x792>
 800737a:	9b06      	ldr	r3, [sp, #24]
 800737c:	2b01      	cmp	r3, #1
 800737e:	dc18      	bgt.n	80073b2 <_dtoa_r+0x8fa>
 8007380:	f1ba 0f00 	cmp.w	sl, #0
 8007384:	d115      	bne.n	80073b2 <_dtoa_r+0x8fa>
 8007386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800738a:	b993      	cbnz	r3, 80073b2 <_dtoa_r+0x8fa>
 800738c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007390:	0d1b      	lsrs	r3, r3, #20
 8007392:	051b      	lsls	r3, r3, #20
 8007394:	b183      	cbz	r3, 80073b8 <_dtoa_r+0x900>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	9b05      	ldr	r3, [sp, #20]
 800739e:	3301      	adds	r3, #1
 80073a0:	9305      	str	r3, [sp, #20]
 80073a2:	f04f 0801 	mov.w	r8, #1
 80073a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f47f af6a 	bne.w	8007282 <_dtoa_r+0x7ca>
 80073ae:	2001      	movs	r0, #1
 80073b0:	e76f      	b.n	8007292 <_dtoa_r+0x7da>
 80073b2:	f04f 0800 	mov.w	r8, #0
 80073b6:	e7f6      	b.n	80073a6 <_dtoa_r+0x8ee>
 80073b8:	4698      	mov	r8, r3
 80073ba:	e7f4      	b.n	80073a6 <_dtoa_r+0x8ee>
 80073bc:	f43f af7d 	beq.w	80072ba <_dtoa_r+0x802>
 80073c0:	4618      	mov	r0, r3
 80073c2:	301c      	adds	r0, #28
 80073c4:	e772      	b.n	80072ac <_dtoa_r+0x7f4>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dc37      	bgt.n	800743c <_dtoa_r+0x984>
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	dd34      	ble.n	800743c <_dtoa_r+0x984>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	9b02      	ldr	r3, [sp, #8]
 80073d8:	b96b      	cbnz	r3, 80073f6 <_dtoa_r+0x93e>
 80073da:	4631      	mov	r1, r6
 80073dc:	2205      	movs	r2, #5
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fac0 	bl	8007964 <__multadd>
 80073e4:	4601      	mov	r1, r0
 80073e6:	4606      	mov	r6, r0
 80073e8:	ee18 0a10 	vmov	r0, s16
 80073ec:	f000 fcda 	bl	8007da4 <__mcmp>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f73f adbb 	bgt.w	8006f6c <_dtoa_r+0x4b4>
 80073f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f8:	9d01      	ldr	r5, [sp, #4]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	4631      	mov	r1, r6
 8007404:	4620      	mov	r0, r4
 8007406:	f000 fa8b 	bl	8007920 <_Bfree>
 800740a:	2f00      	cmp	r7, #0
 800740c:	f43f aea4 	beq.w	8007158 <_dtoa_r+0x6a0>
 8007410:	f1b8 0f00 	cmp.w	r8, #0
 8007414:	d005      	beq.n	8007422 <_dtoa_r+0x96a>
 8007416:	45b8      	cmp	r8, r7
 8007418:	d003      	beq.n	8007422 <_dtoa_r+0x96a>
 800741a:	4641      	mov	r1, r8
 800741c:	4620      	mov	r0, r4
 800741e:	f000 fa7f 	bl	8007920 <_Bfree>
 8007422:	4639      	mov	r1, r7
 8007424:	4620      	mov	r0, r4
 8007426:	f000 fa7b 	bl	8007920 <_Bfree>
 800742a:	e695      	b.n	8007158 <_dtoa_r+0x6a0>
 800742c:	2600      	movs	r6, #0
 800742e:	4637      	mov	r7, r6
 8007430:	e7e1      	b.n	80073f6 <_dtoa_r+0x93e>
 8007432:	9700      	str	r7, [sp, #0]
 8007434:	4637      	mov	r7, r6
 8007436:	e599      	b.n	8006f6c <_dtoa_r+0x4b4>
 8007438:	40240000 	.word	0x40240000
 800743c:	9b08      	ldr	r3, [sp, #32]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80ca 	beq.w	80075d8 <_dtoa_r+0xb20>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	9302      	str	r3, [sp, #8]
 8007448:	2d00      	cmp	r5, #0
 800744a:	dd05      	ble.n	8007458 <_dtoa_r+0x9a0>
 800744c:	4639      	mov	r1, r7
 800744e:	462a      	mov	r2, r5
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fc37 	bl	8007cc4 <__lshift>
 8007456:	4607      	mov	r7, r0
 8007458:	f1b8 0f00 	cmp.w	r8, #0
 800745c:	d05b      	beq.n	8007516 <_dtoa_r+0xa5e>
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fa1d 	bl	80078a0 <_Balloc>
 8007466:	4605      	mov	r5, r0
 8007468:	b928      	cbnz	r0, 8007476 <_dtoa_r+0x9be>
 800746a:	4b87      	ldr	r3, [pc, #540]	; (8007688 <_dtoa_r+0xbd0>)
 800746c:	4602      	mov	r2, r0
 800746e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007472:	f7ff bb3b 	b.w	8006aec <_dtoa_r+0x34>
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	3202      	adds	r2, #2
 800747a:	0092      	lsls	r2, r2, #2
 800747c:	f107 010c 	add.w	r1, r7, #12
 8007480:	300c      	adds	r0, #12
 8007482:	f7fe fdf3 	bl	800606c <memcpy>
 8007486:	2201      	movs	r2, #1
 8007488:	4629      	mov	r1, r5
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fc1a 	bl	8007cc4 <__lshift>
 8007490:	9b01      	ldr	r3, [sp, #4]
 8007492:	f103 0901 	add.w	r9, r3, #1
 8007496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800749a:	4413      	add	r3, r2
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	f00a 0301 	and.w	r3, sl, #1
 80074a2:	46b8      	mov	r8, r7
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	4607      	mov	r7, r0
 80074a8:	4631      	mov	r1, r6
 80074aa:	ee18 0a10 	vmov	r0, s16
 80074ae:	f7ff fa75 	bl	800699c <quorem>
 80074b2:	4641      	mov	r1, r8
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80074ba:	ee18 0a10 	vmov	r0, s16
 80074be:	f000 fc71 	bl	8007da4 <__mcmp>
 80074c2:	463a      	mov	r2, r7
 80074c4:	9003      	str	r0, [sp, #12]
 80074c6:	4631      	mov	r1, r6
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fc87 	bl	8007ddc <__mdiff>
 80074ce:	68c2      	ldr	r2, [r0, #12]
 80074d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80074d4:	4605      	mov	r5, r0
 80074d6:	bb02      	cbnz	r2, 800751a <_dtoa_r+0xa62>
 80074d8:	4601      	mov	r1, r0
 80074da:	ee18 0a10 	vmov	r0, s16
 80074de:	f000 fc61 	bl	8007da4 <__mcmp>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4629      	mov	r1, r5
 80074e6:	4620      	mov	r0, r4
 80074e8:	9207      	str	r2, [sp, #28]
 80074ea:	f000 fa19 	bl	8007920 <_Bfree>
 80074ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80074f2:	ea43 0102 	orr.w	r1, r3, r2
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	430b      	orrs	r3, r1
 80074fa:	464d      	mov	r5, r9
 80074fc:	d10f      	bne.n	800751e <_dtoa_r+0xa66>
 80074fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007502:	d02a      	beq.n	800755a <_dtoa_r+0xaa2>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	dd02      	ble.n	8007510 <_dtoa_r+0xa58>
 800750a:	9b02      	ldr	r3, [sp, #8]
 800750c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007510:	f88b a000 	strb.w	sl, [fp]
 8007514:	e775      	b.n	8007402 <_dtoa_r+0x94a>
 8007516:	4638      	mov	r0, r7
 8007518:	e7ba      	b.n	8007490 <_dtoa_r+0x9d8>
 800751a:	2201      	movs	r2, #1
 800751c:	e7e2      	b.n	80074e4 <_dtoa_r+0xa2c>
 800751e:	9b03      	ldr	r3, [sp, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	db04      	blt.n	800752e <_dtoa_r+0xa76>
 8007524:	9906      	ldr	r1, [sp, #24]
 8007526:	430b      	orrs	r3, r1
 8007528:	9904      	ldr	r1, [sp, #16]
 800752a:	430b      	orrs	r3, r1
 800752c:	d122      	bne.n	8007574 <_dtoa_r+0xabc>
 800752e:	2a00      	cmp	r2, #0
 8007530:	ddee      	ble.n	8007510 <_dtoa_r+0xa58>
 8007532:	ee18 1a10 	vmov	r1, s16
 8007536:	2201      	movs	r2, #1
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fbc3 	bl	8007cc4 <__lshift>
 800753e:	4631      	mov	r1, r6
 8007540:	ee08 0a10 	vmov	s16, r0
 8007544:	f000 fc2e 	bl	8007da4 <__mcmp>
 8007548:	2800      	cmp	r0, #0
 800754a:	dc03      	bgt.n	8007554 <_dtoa_r+0xa9c>
 800754c:	d1e0      	bne.n	8007510 <_dtoa_r+0xa58>
 800754e:	f01a 0f01 	tst.w	sl, #1
 8007552:	d0dd      	beq.n	8007510 <_dtoa_r+0xa58>
 8007554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007558:	d1d7      	bne.n	800750a <_dtoa_r+0xa52>
 800755a:	2339      	movs	r3, #57	; 0x39
 800755c:	f88b 3000 	strb.w	r3, [fp]
 8007560:	462b      	mov	r3, r5
 8007562:	461d      	mov	r5, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800756a:	2a39      	cmp	r2, #57	; 0x39
 800756c:	d071      	beq.n	8007652 <_dtoa_r+0xb9a>
 800756e:	3201      	adds	r2, #1
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	e746      	b.n	8007402 <_dtoa_r+0x94a>
 8007574:	2a00      	cmp	r2, #0
 8007576:	dd07      	ble.n	8007588 <_dtoa_r+0xad0>
 8007578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800757c:	d0ed      	beq.n	800755a <_dtoa_r+0xaa2>
 800757e:	f10a 0301 	add.w	r3, sl, #1
 8007582:	f88b 3000 	strb.w	r3, [fp]
 8007586:	e73c      	b.n	8007402 <_dtoa_r+0x94a>
 8007588:	9b05      	ldr	r3, [sp, #20]
 800758a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800758e:	4599      	cmp	r9, r3
 8007590:	d047      	beq.n	8007622 <_dtoa_r+0xb6a>
 8007592:	ee18 1a10 	vmov	r1, s16
 8007596:	2300      	movs	r3, #0
 8007598:	220a      	movs	r2, #10
 800759a:	4620      	mov	r0, r4
 800759c:	f000 f9e2 	bl	8007964 <__multadd>
 80075a0:	45b8      	cmp	r8, r7
 80075a2:	ee08 0a10 	vmov	s16, r0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	f04f 020a 	mov.w	r2, #10
 80075ae:	4641      	mov	r1, r8
 80075b0:	4620      	mov	r0, r4
 80075b2:	d106      	bne.n	80075c2 <_dtoa_r+0xb0a>
 80075b4:	f000 f9d6 	bl	8007964 <__multadd>
 80075b8:	4680      	mov	r8, r0
 80075ba:	4607      	mov	r7, r0
 80075bc:	f109 0901 	add.w	r9, r9, #1
 80075c0:	e772      	b.n	80074a8 <_dtoa_r+0x9f0>
 80075c2:	f000 f9cf 	bl	8007964 <__multadd>
 80075c6:	4639      	mov	r1, r7
 80075c8:	4680      	mov	r8, r0
 80075ca:	2300      	movs	r3, #0
 80075cc:	220a      	movs	r2, #10
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 f9c8 	bl	8007964 <__multadd>
 80075d4:	4607      	mov	r7, r0
 80075d6:	e7f1      	b.n	80075bc <_dtoa_r+0xb04>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	9302      	str	r3, [sp, #8]
 80075dc:	9d01      	ldr	r5, [sp, #4]
 80075de:	ee18 0a10 	vmov	r0, s16
 80075e2:	4631      	mov	r1, r6
 80075e4:	f7ff f9da 	bl	800699c <quorem>
 80075e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	f805 ab01 	strb.w	sl, [r5], #1
 80075f2:	1aea      	subs	r2, r5, r3
 80075f4:	9b02      	ldr	r3, [sp, #8]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	dd09      	ble.n	800760e <_dtoa_r+0xb56>
 80075fa:	ee18 1a10 	vmov	r1, s16
 80075fe:	2300      	movs	r3, #0
 8007600:	220a      	movs	r2, #10
 8007602:	4620      	mov	r0, r4
 8007604:	f000 f9ae 	bl	8007964 <__multadd>
 8007608:	ee08 0a10 	vmov	s16, r0
 800760c:	e7e7      	b.n	80075de <_dtoa_r+0xb26>
 800760e:	9b02      	ldr	r3, [sp, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfc8      	it	gt
 8007614:	461d      	movgt	r5, r3
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	bfd8      	it	le
 800761a:	2501      	movle	r5, #1
 800761c:	441d      	add	r5, r3
 800761e:	f04f 0800 	mov.w	r8, #0
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	2201      	movs	r2, #1
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fb4b 	bl	8007cc4 <__lshift>
 800762e:	4631      	mov	r1, r6
 8007630:	ee08 0a10 	vmov	s16, r0
 8007634:	f000 fbb6 	bl	8007da4 <__mcmp>
 8007638:	2800      	cmp	r0, #0
 800763a:	dc91      	bgt.n	8007560 <_dtoa_r+0xaa8>
 800763c:	d102      	bne.n	8007644 <_dtoa_r+0xb8c>
 800763e:	f01a 0f01 	tst.w	sl, #1
 8007642:	d18d      	bne.n	8007560 <_dtoa_r+0xaa8>
 8007644:	462b      	mov	r3, r5
 8007646:	461d      	mov	r5, r3
 8007648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800764c:	2a30      	cmp	r2, #48	; 0x30
 800764e:	d0fa      	beq.n	8007646 <_dtoa_r+0xb8e>
 8007650:	e6d7      	b.n	8007402 <_dtoa_r+0x94a>
 8007652:	9a01      	ldr	r2, [sp, #4]
 8007654:	429a      	cmp	r2, r3
 8007656:	d184      	bne.n	8007562 <_dtoa_r+0xaaa>
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	2331      	movs	r3, #49	; 0x31
 8007660:	7013      	strb	r3, [r2, #0]
 8007662:	e6ce      	b.n	8007402 <_dtoa_r+0x94a>
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <_dtoa_r+0xbd4>)
 8007666:	f7ff ba95 	b.w	8006b94 <_dtoa_r+0xdc>
 800766a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800766c:	2b00      	cmp	r3, #0
 800766e:	f47f aa6e 	bne.w	8006b4e <_dtoa_r+0x96>
 8007672:	4b07      	ldr	r3, [pc, #28]	; (8007690 <_dtoa_r+0xbd8>)
 8007674:	f7ff ba8e 	b.w	8006b94 <_dtoa_r+0xdc>
 8007678:	9b02      	ldr	r3, [sp, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	dcae      	bgt.n	80075dc <_dtoa_r+0xb24>
 800767e:	9b06      	ldr	r3, [sp, #24]
 8007680:	2b02      	cmp	r3, #2
 8007682:	f73f aea8 	bgt.w	80073d6 <_dtoa_r+0x91e>
 8007686:	e7a9      	b.n	80075dc <_dtoa_r+0xb24>
 8007688:	0800a373 	.word	0x0800a373
 800768c:	0800a2d0 	.word	0x0800a2d0
 8007690:	0800a2f4 	.word	0x0800a2f4

08007694 <std>:
 8007694:	2300      	movs	r3, #0
 8007696:	b510      	push	{r4, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	e9c0 3300 	strd	r3, r3, [r0]
 800769e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076a2:	6083      	str	r3, [r0, #8]
 80076a4:	8181      	strh	r1, [r0, #12]
 80076a6:	6643      	str	r3, [r0, #100]	; 0x64
 80076a8:	81c2      	strh	r2, [r0, #14]
 80076aa:	6183      	str	r3, [r0, #24]
 80076ac:	4619      	mov	r1, r3
 80076ae:	2208      	movs	r2, #8
 80076b0:	305c      	adds	r0, #92	; 0x5c
 80076b2:	f7fe fce9 	bl	8006088 <memset>
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <std+0x38>)
 80076b8:	6263      	str	r3, [r4, #36]	; 0x24
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <std+0x3c>)
 80076bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <std+0x40>)
 80076c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <std+0x44>)
 80076c4:	6224      	str	r4, [r4, #32]
 80076c6:	6323      	str	r3, [r4, #48]	; 0x30
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	bf00      	nop
 80076cc:	08008469 	.word	0x08008469
 80076d0:	0800848b 	.word	0x0800848b
 80076d4:	080084c3 	.word	0x080084c3
 80076d8:	080084e7 	.word	0x080084e7

080076dc <_cleanup_r>:
 80076dc:	4901      	ldr	r1, [pc, #4]	; (80076e4 <_cleanup_r+0x8>)
 80076de:	f000 b8af 	b.w	8007840 <_fwalk_reent>
 80076e2:	bf00      	nop
 80076e4:	080087fd 	.word	0x080087fd

080076e8 <__sfmoreglue>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	2268      	movs	r2, #104	; 0x68
 80076ec:	1e4d      	subs	r5, r1, #1
 80076ee:	4355      	muls	r5, r2
 80076f0:	460e      	mov	r6, r1
 80076f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076f6:	f000 fcd9 	bl	80080ac <_malloc_r>
 80076fa:	4604      	mov	r4, r0
 80076fc:	b140      	cbz	r0, 8007710 <__sfmoreglue+0x28>
 80076fe:	2100      	movs	r1, #0
 8007700:	e9c0 1600 	strd	r1, r6, [r0]
 8007704:	300c      	adds	r0, #12
 8007706:	60a0      	str	r0, [r4, #8]
 8007708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800770c:	f7fe fcbc 	bl	8006088 <memset>
 8007710:	4620      	mov	r0, r4
 8007712:	bd70      	pop	{r4, r5, r6, pc}

08007714 <__sfp_lock_acquire>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__sfp_lock_acquire+0x8>)
 8007716:	f000 b8b8 	b.w	800788a <__retarget_lock_acquire_recursive>
 800771a:	bf00      	nop
 800771c:	2000058d 	.word	0x2000058d

08007720 <__sfp_lock_release>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__sfp_lock_release+0x8>)
 8007722:	f000 b8b3 	b.w	800788c <__retarget_lock_release_recursive>
 8007726:	bf00      	nop
 8007728:	2000058d 	.word	0x2000058d

0800772c <__sinit_lock_acquire>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sinit_lock_acquire+0x8>)
 800772e:	f000 b8ac 	b.w	800788a <__retarget_lock_acquire_recursive>
 8007732:	bf00      	nop
 8007734:	2000058e 	.word	0x2000058e

08007738 <__sinit_lock_release>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__sinit_lock_release+0x8>)
 800773a:	f000 b8a7 	b.w	800788c <__retarget_lock_release_recursive>
 800773e:	bf00      	nop
 8007740:	2000058e 	.word	0x2000058e

08007744 <__sinit>:
 8007744:	b510      	push	{r4, lr}
 8007746:	4604      	mov	r4, r0
 8007748:	f7ff fff0 	bl	800772c <__sinit_lock_acquire>
 800774c:	69a3      	ldr	r3, [r4, #24]
 800774e:	b11b      	cbz	r3, 8007758 <__sinit+0x14>
 8007750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007754:	f7ff bff0 	b.w	8007738 <__sinit_lock_release>
 8007758:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800775c:	6523      	str	r3, [r4, #80]	; 0x50
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <__sinit+0x68>)
 8007760:	4a13      	ldr	r2, [pc, #76]	; (80077b0 <__sinit+0x6c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	62a2      	str	r2, [r4, #40]	; 0x28
 8007766:	42a3      	cmp	r3, r4
 8007768:	bf04      	itt	eq
 800776a:	2301      	moveq	r3, #1
 800776c:	61a3      	streq	r3, [r4, #24]
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f820 	bl	80077b4 <__sfp>
 8007774:	6060      	str	r0, [r4, #4]
 8007776:	4620      	mov	r0, r4
 8007778:	f000 f81c 	bl	80077b4 <__sfp>
 800777c:	60a0      	str	r0, [r4, #8]
 800777e:	4620      	mov	r0, r4
 8007780:	f000 f818 	bl	80077b4 <__sfp>
 8007784:	2200      	movs	r2, #0
 8007786:	60e0      	str	r0, [r4, #12]
 8007788:	2104      	movs	r1, #4
 800778a:	6860      	ldr	r0, [r4, #4]
 800778c:	f7ff ff82 	bl	8007694 <std>
 8007790:	68a0      	ldr	r0, [r4, #8]
 8007792:	2201      	movs	r2, #1
 8007794:	2109      	movs	r1, #9
 8007796:	f7ff ff7d 	bl	8007694 <std>
 800779a:	68e0      	ldr	r0, [r4, #12]
 800779c:	2202      	movs	r2, #2
 800779e:	2112      	movs	r1, #18
 80077a0:	f7ff ff78 	bl	8007694 <std>
 80077a4:	2301      	movs	r3, #1
 80077a6:	61a3      	str	r3, [r4, #24]
 80077a8:	e7d2      	b.n	8007750 <__sinit+0xc>
 80077aa:	bf00      	nop
 80077ac:	0800a2bc 	.word	0x0800a2bc
 80077b0:	080076dd 	.word	0x080076dd

080077b4 <__sfp>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	4607      	mov	r7, r0
 80077b8:	f7ff ffac 	bl	8007714 <__sfp_lock_acquire>
 80077bc:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <__sfp+0x84>)
 80077be:	681e      	ldr	r6, [r3, #0]
 80077c0:	69b3      	ldr	r3, [r6, #24]
 80077c2:	b913      	cbnz	r3, 80077ca <__sfp+0x16>
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff ffbd 	bl	8007744 <__sinit>
 80077ca:	3648      	adds	r6, #72	; 0x48
 80077cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	d503      	bpl.n	80077dc <__sfp+0x28>
 80077d4:	6833      	ldr	r3, [r6, #0]
 80077d6:	b30b      	cbz	r3, 800781c <__sfp+0x68>
 80077d8:	6836      	ldr	r6, [r6, #0]
 80077da:	e7f7      	b.n	80077cc <__sfp+0x18>
 80077dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077e0:	b9d5      	cbnz	r5, 8007818 <__sfp+0x64>
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <__sfp+0x88>)
 80077e4:	60e3      	str	r3, [r4, #12]
 80077e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077ea:	6665      	str	r5, [r4, #100]	; 0x64
 80077ec:	f000 f84c 	bl	8007888 <__retarget_lock_init_recursive>
 80077f0:	f7ff ff96 	bl	8007720 <__sfp_lock_release>
 80077f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077fc:	6025      	str	r5, [r4, #0]
 80077fe:	61a5      	str	r5, [r4, #24]
 8007800:	2208      	movs	r2, #8
 8007802:	4629      	mov	r1, r5
 8007804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007808:	f7fe fc3e 	bl	8006088 <memset>
 800780c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007814:	4620      	mov	r0, r4
 8007816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007818:	3468      	adds	r4, #104	; 0x68
 800781a:	e7d9      	b.n	80077d0 <__sfp+0x1c>
 800781c:	2104      	movs	r1, #4
 800781e:	4638      	mov	r0, r7
 8007820:	f7ff ff62 	bl	80076e8 <__sfmoreglue>
 8007824:	4604      	mov	r4, r0
 8007826:	6030      	str	r0, [r6, #0]
 8007828:	2800      	cmp	r0, #0
 800782a:	d1d5      	bne.n	80077d8 <__sfp+0x24>
 800782c:	f7ff ff78 	bl	8007720 <__sfp_lock_release>
 8007830:	230c      	movs	r3, #12
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	e7ee      	b.n	8007814 <__sfp+0x60>
 8007836:	bf00      	nop
 8007838:	0800a2bc 	.word	0x0800a2bc
 800783c:	ffff0001 	.word	0xffff0001

08007840 <_fwalk_reent>:
 8007840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007844:	4606      	mov	r6, r0
 8007846:	4688      	mov	r8, r1
 8007848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800784c:	2700      	movs	r7, #0
 800784e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007852:	f1b9 0901 	subs.w	r9, r9, #1
 8007856:	d505      	bpl.n	8007864 <_fwalk_reent+0x24>
 8007858:	6824      	ldr	r4, [r4, #0]
 800785a:	2c00      	cmp	r4, #0
 800785c:	d1f7      	bne.n	800784e <_fwalk_reent+0xe>
 800785e:	4638      	mov	r0, r7
 8007860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007864:	89ab      	ldrh	r3, [r5, #12]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d907      	bls.n	800787a <_fwalk_reent+0x3a>
 800786a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800786e:	3301      	adds	r3, #1
 8007870:	d003      	beq.n	800787a <_fwalk_reent+0x3a>
 8007872:	4629      	mov	r1, r5
 8007874:	4630      	mov	r0, r6
 8007876:	47c0      	blx	r8
 8007878:	4307      	orrs	r7, r0
 800787a:	3568      	adds	r5, #104	; 0x68
 800787c:	e7e9      	b.n	8007852 <_fwalk_reent+0x12>
	...

08007880 <_localeconv_r>:
 8007880:	4800      	ldr	r0, [pc, #0]	; (8007884 <_localeconv_r+0x4>)
 8007882:	4770      	bx	lr
 8007884:	200001f8 	.word	0x200001f8

08007888 <__retarget_lock_init_recursive>:
 8007888:	4770      	bx	lr

0800788a <__retarget_lock_acquire_recursive>:
 800788a:	4770      	bx	lr

0800788c <__retarget_lock_release_recursive>:
 800788c:	4770      	bx	lr
	...

08007890 <malloc>:
 8007890:	4b02      	ldr	r3, [pc, #8]	; (800789c <malloc+0xc>)
 8007892:	4601      	mov	r1, r0
 8007894:	6818      	ldr	r0, [r3, #0]
 8007896:	f000 bc09 	b.w	80080ac <_malloc_r>
 800789a:	bf00      	nop
 800789c:	200000a4 	.word	0x200000a4

080078a0 <_Balloc>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078a4:	4604      	mov	r4, r0
 80078a6:	460d      	mov	r5, r1
 80078a8:	b976      	cbnz	r6, 80078c8 <_Balloc+0x28>
 80078aa:	2010      	movs	r0, #16
 80078ac:	f7ff fff0 	bl	8007890 <malloc>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6260      	str	r0, [r4, #36]	; 0x24
 80078b4:	b920      	cbnz	r0, 80078c0 <_Balloc+0x20>
 80078b6:	4b18      	ldr	r3, [pc, #96]	; (8007918 <_Balloc+0x78>)
 80078b8:	4818      	ldr	r0, [pc, #96]	; (800791c <_Balloc+0x7c>)
 80078ba:	2166      	movs	r1, #102	; 0x66
 80078bc:	f000 feea 	bl	8008694 <__assert_func>
 80078c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078c4:	6006      	str	r6, [r0, #0]
 80078c6:	60c6      	str	r6, [r0, #12]
 80078c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078ca:	68f3      	ldr	r3, [r6, #12]
 80078cc:	b183      	cbz	r3, 80078f0 <_Balloc+0x50>
 80078ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078d6:	b9b8      	cbnz	r0, 8007908 <_Balloc+0x68>
 80078d8:	2101      	movs	r1, #1
 80078da:	fa01 f605 	lsl.w	r6, r1, r5
 80078de:	1d72      	adds	r2, r6, #5
 80078e0:	0092      	lsls	r2, r2, #2
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 fb60 	bl	8007fa8 <_calloc_r>
 80078e8:	b160      	cbz	r0, 8007904 <_Balloc+0x64>
 80078ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078ee:	e00e      	b.n	800790e <_Balloc+0x6e>
 80078f0:	2221      	movs	r2, #33	; 0x21
 80078f2:	2104      	movs	r1, #4
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fb57 	bl	8007fa8 <_calloc_r>
 80078fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078fc:	60f0      	str	r0, [r6, #12]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e4      	bne.n	80078ce <_Balloc+0x2e>
 8007904:	2000      	movs	r0, #0
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	6802      	ldr	r2, [r0, #0]
 800790a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800790e:	2300      	movs	r3, #0
 8007910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007914:	e7f7      	b.n	8007906 <_Balloc+0x66>
 8007916:	bf00      	nop
 8007918:	0800a301 	.word	0x0800a301
 800791c:	0800a3e4 	.word	0x0800a3e4

08007920 <_Bfree>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007924:	4605      	mov	r5, r0
 8007926:	460c      	mov	r4, r1
 8007928:	b976      	cbnz	r6, 8007948 <_Bfree+0x28>
 800792a:	2010      	movs	r0, #16
 800792c:	f7ff ffb0 	bl	8007890 <malloc>
 8007930:	4602      	mov	r2, r0
 8007932:	6268      	str	r0, [r5, #36]	; 0x24
 8007934:	b920      	cbnz	r0, 8007940 <_Bfree+0x20>
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <_Bfree+0x3c>)
 8007938:	4809      	ldr	r0, [pc, #36]	; (8007960 <_Bfree+0x40>)
 800793a:	218a      	movs	r1, #138	; 0x8a
 800793c:	f000 feaa 	bl	8008694 <__assert_func>
 8007940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007944:	6006      	str	r6, [r0, #0]
 8007946:	60c6      	str	r6, [r0, #12]
 8007948:	b13c      	cbz	r4, 800795a <_Bfree+0x3a>
 800794a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800794c:	6862      	ldr	r2, [r4, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007954:	6021      	str	r1, [r4, #0]
 8007956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	0800a301 	.word	0x0800a301
 8007960:	0800a3e4 	.word	0x0800a3e4

08007964 <__multadd>:
 8007964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007968:	690d      	ldr	r5, [r1, #16]
 800796a:	4607      	mov	r7, r0
 800796c:	460c      	mov	r4, r1
 800796e:	461e      	mov	r6, r3
 8007970:	f101 0c14 	add.w	ip, r1, #20
 8007974:	2000      	movs	r0, #0
 8007976:	f8dc 3000 	ldr.w	r3, [ip]
 800797a:	b299      	uxth	r1, r3
 800797c:	fb02 6101 	mla	r1, r2, r1, r6
 8007980:	0c1e      	lsrs	r6, r3, #16
 8007982:	0c0b      	lsrs	r3, r1, #16
 8007984:	fb02 3306 	mla	r3, r2, r6, r3
 8007988:	b289      	uxth	r1, r1
 800798a:	3001      	adds	r0, #1
 800798c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007990:	4285      	cmp	r5, r0
 8007992:	f84c 1b04 	str.w	r1, [ip], #4
 8007996:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800799a:	dcec      	bgt.n	8007976 <__multadd+0x12>
 800799c:	b30e      	cbz	r6, 80079e2 <__multadd+0x7e>
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	42ab      	cmp	r3, r5
 80079a2:	dc19      	bgt.n	80079d8 <__multadd+0x74>
 80079a4:	6861      	ldr	r1, [r4, #4]
 80079a6:	4638      	mov	r0, r7
 80079a8:	3101      	adds	r1, #1
 80079aa:	f7ff ff79 	bl	80078a0 <_Balloc>
 80079ae:	4680      	mov	r8, r0
 80079b0:	b928      	cbnz	r0, 80079be <__multadd+0x5a>
 80079b2:	4602      	mov	r2, r0
 80079b4:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <__multadd+0x84>)
 80079b6:	480d      	ldr	r0, [pc, #52]	; (80079ec <__multadd+0x88>)
 80079b8:	21b5      	movs	r1, #181	; 0xb5
 80079ba:	f000 fe6b 	bl	8008694 <__assert_func>
 80079be:	6922      	ldr	r2, [r4, #16]
 80079c0:	3202      	adds	r2, #2
 80079c2:	f104 010c 	add.w	r1, r4, #12
 80079c6:	0092      	lsls	r2, r2, #2
 80079c8:	300c      	adds	r0, #12
 80079ca:	f7fe fb4f 	bl	800606c <memcpy>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7ff ffa5 	bl	8007920 <_Bfree>
 80079d6:	4644      	mov	r4, r8
 80079d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079dc:	3501      	adds	r5, #1
 80079de:	615e      	str	r6, [r3, #20]
 80079e0:	6125      	str	r5, [r4, #16]
 80079e2:	4620      	mov	r0, r4
 80079e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e8:	0800a373 	.word	0x0800a373
 80079ec:	0800a3e4 	.word	0x0800a3e4

080079f0 <__hi0bits>:
 80079f0:	0c03      	lsrs	r3, r0, #16
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	b9d3      	cbnz	r3, 8007a2c <__hi0bits+0x3c>
 80079f6:	0400      	lsls	r0, r0, #16
 80079f8:	2310      	movs	r3, #16
 80079fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079fe:	bf04      	itt	eq
 8007a00:	0200      	lsleq	r0, r0, #8
 8007a02:	3308      	addeq	r3, #8
 8007a04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a08:	bf04      	itt	eq
 8007a0a:	0100      	lsleq	r0, r0, #4
 8007a0c:	3304      	addeq	r3, #4
 8007a0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a12:	bf04      	itt	eq
 8007a14:	0080      	lsleq	r0, r0, #2
 8007a16:	3302      	addeq	r3, #2
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	db05      	blt.n	8007a28 <__hi0bits+0x38>
 8007a1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a20:	f103 0301 	add.w	r3, r3, #1
 8007a24:	bf08      	it	eq
 8007a26:	2320      	moveq	r3, #32
 8007a28:	4618      	mov	r0, r3
 8007a2a:	4770      	bx	lr
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e7e4      	b.n	80079fa <__hi0bits+0xa>

08007a30 <__lo0bits>:
 8007a30:	6803      	ldr	r3, [r0, #0]
 8007a32:	f013 0207 	ands.w	r2, r3, #7
 8007a36:	4601      	mov	r1, r0
 8007a38:	d00b      	beq.n	8007a52 <__lo0bits+0x22>
 8007a3a:	07da      	lsls	r2, r3, #31
 8007a3c:	d423      	bmi.n	8007a86 <__lo0bits+0x56>
 8007a3e:	0798      	lsls	r0, r3, #30
 8007a40:	bf49      	itett	mi
 8007a42:	085b      	lsrmi	r3, r3, #1
 8007a44:	089b      	lsrpl	r3, r3, #2
 8007a46:	2001      	movmi	r0, #1
 8007a48:	600b      	strmi	r3, [r1, #0]
 8007a4a:	bf5c      	itt	pl
 8007a4c:	600b      	strpl	r3, [r1, #0]
 8007a4e:	2002      	movpl	r0, #2
 8007a50:	4770      	bx	lr
 8007a52:	b298      	uxth	r0, r3
 8007a54:	b9a8      	cbnz	r0, 8007a82 <__lo0bits+0x52>
 8007a56:	0c1b      	lsrs	r3, r3, #16
 8007a58:	2010      	movs	r0, #16
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	b90a      	cbnz	r2, 8007a62 <__lo0bits+0x32>
 8007a5e:	3008      	adds	r0, #8
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	071a      	lsls	r2, r3, #28
 8007a64:	bf04      	itt	eq
 8007a66:	091b      	lsreq	r3, r3, #4
 8007a68:	3004      	addeq	r0, #4
 8007a6a:	079a      	lsls	r2, r3, #30
 8007a6c:	bf04      	itt	eq
 8007a6e:	089b      	lsreq	r3, r3, #2
 8007a70:	3002      	addeq	r0, #2
 8007a72:	07da      	lsls	r2, r3, #31
 8007a74:	d403      	bmi.n	8007a7e <__lo0bits+0x4e>
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	f100 0001 	add.w	r0, r0, #1
 8007a7c:	d005      	beq.n	8007a8a <__lo0bits+0x5a>
 8007a7e:	600b      	str	r3, [r1, #0]
 8007a80:	4770      	bx	lr
 8007a82:	4610      	mov	r0, r2
 8007a84:	e7e9      	b.n	8007a5a <__lo0bits+0x2a>
 8007a86:	2000      	movs	r0, #0
 8007a88:	4770      	bx	lr
 8007a8a:	2020      	movs	r0, #32
 8007a8c:	4770      	bx	lr
	...

08007a90 <__i2b>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	460c      	mov	r4, r1
 8007a94:	2101      	movs	r1, #1
 8007a96:	f7ff ff03 	bl	80078a0 <_Balloc>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	b928      	cbnz	r0, 8007aaa <__i2b+0x1a>
 8007a9e:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <__i2b+0x24>)
 8007aa0:	4805      	ldr	r0, [pc, #20]	; (8007ab8 <__i2b+0x28>)
 8007aa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007aa6:	f000 fdf5 	bl	8008694 <__assert_func>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	6144      	str	r4, [r0, #20]
 8007aae:	6103      	str	r3, [r0, #16]
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	bf00      	nop
 8007ab4:	0800a373 	.word	0x0800a373
 8007ab8:	0800a3e4 	.word	0x0800a3e4

08007abc <__multiply>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	4691      	mov	r9, r2
 8007ac2:	690a      	ldr	r2, [r1, #16]
 8007ac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	bfb8      	it	lt
 8007acc:	460b      	movlt	r3, r1
 8007ace:	460c      	mov	r4, r1
 8007ad0:	bfbc      	itt	lt
 8007ad2:	464c      	movlt	r4, r9
 8007ad4:	4699      	movlt	r9, r3
 8007ad6:	6927      	ldr	r7, [r4, #16]
 8007ad8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007adc:	68a3      	ldr	r3, [r4, #8]
 8007ade:	6861      	ldr	r1, [r4, #4]
 8007ae0:	eb07 060a 	add.w	r6, r7, sl
 8007ae4:	42b3      	cmp	r3, r6
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	bfb8      	it	lt
 8007aea:	3101      	addlt	r1, #1
 8007aec:	f7ff fed8 	bl	80078a0 <_Balloc>
 8007af0:	b930      	cbnz	r0, 8007b00 <__multiply+0x44>
 8007af2:	4602      	mov	r2, r0
 8007af4:	4b44      	ldr	r3, [pc, #272]	; (8007c08 <__multiply+0x14c>)
 8007af6:	4845      	ldr	r0, [pc, #276]	; (8007c0c <__multiply+0x150>)
 8007af8:	f240 115d 	movw	r1, #349	; 0x15d
 8007afc:	f000 fdca 	bl	8008694 <__assert_func>
 8007b00:	f100 0514 	add.w	r5, r0, #20
 8007b04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b08:	462b      	mov	r3, r5
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4543      	cmp	r3, r8
 8007b0e:	d321      	bcc.n	8007b54 <__multiply+0x98>
 8007b10:	f104 0314 	add.w	r3, r4, #20
 8007b14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b18:	f109 0314 	add.w	r3, r9, #20
 8007b1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b20:	9202      	str	r2, [sp, #8]
 8007b22:	1b3a      	subs	r2, r7, r4
 8007b24:	3a15      	subs	r2, #21
 8007b26:	f022 0203 	bic.w	r2, r2, #3
 8007b2a:	3204      	adds	r2, #4
 8007b2c:	f104 0115 	add.w	r1, r4, #21
 8007b30:	428f      	cmp	r7, r1
 8007b32:	bf38      	it	cc
 8007b34:	2204      	movcc	r2, #4
 8007b36:	9201      	str	r2, [sp, #4]
 8007b38:	9a02      	ldr	r2, [sp, #8]
 8007b3a:	9303      	str	r3, [sp, #12]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d80c      	bhi.n	8007b5a <__multiply+0x9e>
 8007b40:	2e00      	cmp	r6, #0
 8007b42:	dd03      	ble.n	8007b4c <__multiply+0x90>
 8007b44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d05a      	beq.n	8007c02 <__multiply+0x146>
 8007b4c:	6106      	str	r6, [r0, #16]
 8007b4e:	b005      	add	sp, #20
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	f843 2b04 	str.w	r2, [r3], #4
 8007b58:	e7d8      	b.n	8007b0c <__multiply+0x50>
 8007b5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b5e:	f1ba 0f00 	cmp.w	sl, #0
 8007b62:	d024      	beq.n	8007bae <__multiply+0xf2>
 8007b64:	f104 0e14 	add.w	lr, r4, #20
 8007b68:	46a9      	mov	r9, r5
 8007b6a:	f04f 0c00 	mov.w	ip, #0
 8007b6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b72:	f8d9 1000 	ldr.w	r1, [r9]
 8007b76:	fa1f fb82 	uxth.w	fp, r2
 8007b7a:	b289      	uxth	r1, r1
 8007b7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b84:	f8d9 2000 	ldr.w	r2, [r9]
 8007b88:	4461      	add	r1, ip
 8007b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b96:	b289      	uxth	r1, r1
 8007b98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b9c:	4577      	cmp	r7, lr
 8007b9e:	f849 1b04 	str.w	r1, [r9], #4
 8007ba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ba6:	d8e2      	bhi.n	8007b6e <__multiply+0xb2>
 8007ba8:	9a01      	ldr	r2, [sp, #4]
 8007baa:	f845 c002 	str.w	ip, [r5, r2]
 8007bae:	9a03      	ldr	r2, [sp, #12]
 8007bb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	f1b9 0f00 	cmp.w	r9, #0
 8007bba:	d020      	beq.n	8007bfe <__multiply+0x142>
 8007bbc:	6829      	ldr	r1, [r5, #0]
 8007bbe:	f104 0c14 	add.w	ip, r4, #20
 8007bc2:	46ae      	mov	lr, r5
 8007bc4:	f04f 0a00 	mov.w	sl, #0
 8007bc8:	f8bc b000 	ldrh.w	fp, [ip]
 8007bcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bd0:	fb09 220b 	mla	r2, r9, fp, r2
 8007bd4:	4492      	add	sl, r2
 8007bd6:	b289      	uxth	r1, r1
 8007bd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007bdc:	f84e 1b04 	str.w	r1, [lr], #4
 8007be0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007be4:	f8be 1000 	ldrh.w	r1, [lr]
 8007be8:	0c12      	lsrs	r2, r2, #16
 8007bea:	fb09 1102 	mla	r1, r9, r2, r1
 8007bee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007bf2:	4567      	cmp	r7, ip
 8007bf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bf8:	d8e6      	bhi.n	8007bc8 <__multiply+0x10c>
 8007bfa:	9a01      	ldr	r2, [sp, #4]
 8007bfc:	50a9      	str	r1, [r5, r2]
 8007bfe:	3504      	adds	r5, #4
 8007c00:	e79a      	b.n	8007b38 <__multiply+0x7c>
 8007c02:	3e01      	subs	r6, #1
 8007c04:	e79c      	b.n	8007b40 <__multiply+0x84>
 8007c06:	bf00      	nop
 8007c08:	0800a373 	.word	0x0800a373
 8007c0c:	0800a3e4 	.word	0x0800a3e4

08007c10 <__pow5mult>:
 8007c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c14:	4615      	mov	r5, r2
 8007c16:	f012 0203 	ands.w	r2, r2, #3
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	460f      	mov	r7, r1
 8007c1e:	d007      	beq.n	8007c30 <__pow5mult+0x20>
 8007c20:	4c25      	ldr	r4, [pc, #148]	; (8007cb8 <__pow5mult+0xa8>)
 8007c22:	3a01      	subs	r2, #1
 8007c24:	2300      	movs	r3, #0
 8007c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c2a:	f7ff fe9b 	bl	8007964 <__multadd>
 8007c2e:	4607      	mov	r7, r0
 8007c30:	10ad      	asrs	r5, r5, #2
 8007c32:	d03d      	beq.n	8007cb0 <__pow5mult+0xa0>
 8007c34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c36:	b97c      	cbnz	r4, 8007c58 <__pow5mult+0x48>
 8007c38:	2010      	movs	r0, #16
 8007c3a:	f7ff fe29 	bl	8007890 <malloc>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	6270      	str	r0, [r6, #36]	; 0x24
 8007c42:	b928      	cbnz	r0, 8007c50 <__pow5mult+0x40>
 8007c44:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <__pow5mult+0xac>)
 8007c46:	481e      	ldr	r0, [pc, #120]	; (8007cc0 <__pow5mult+0xb0>)
 8007c48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c4c:	f000 fd22 	bl	8008694 <__assert_func>
 8007c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c54:	6004      	str	r4, [r0, #0]
 8007c56:	60c4      	str	r4, [r0, #12]
 8007c58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c60:	b94c      	cbnz	r4, 8007c76 <__pow5mult+0x66>
 8007c62:	f240 2171 	movw	r1, #625	; 0x271
 8007c66:	4630      	mov	r0, r6
 8007c68:	f7ff ff12 	bl	8007a90 <__i2b>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c72:	4604      	mov	r4, r0
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	f04f 0900 	mov.w	r9, #0
 8007c7a:	07eb      	lsls	r3, r5, #31
 8007c7c:	d50a      	bpl.n	8007c94 <__pow5mult+0x84>
 8007c7e:	4639      	mov	r1, r7
 8007c80:	4622      	mov	r2, r4
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ff1a 	bl	8007abc <__multiply>
 8007c88:	4639      	mov	r1, r7
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff fe47 	bl	8007920 <_Bfree>
 8007c92:	4647      	mov	r7, r8
 8007c94:	106d      	asrs	r5, r5, #1
 8007c96:	d00b      	beq.n	8007cb0 <__pow5mult+0xa0>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	b938      	cbnz	r0, 8007cac <__pow5mult+0x9c>
 8007c9c:	4622      	mov	r2, r4
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f7ff ff0b 	bl	8007abc <__multiply>
 8007ca6:	6020      	str	r0, [r4, #0]
 8007ca8:	f8c0 9000 	str.w	r9, [r0]
 8007cac:	4604      	mov	r4, r0
 8007cae:	e7e4      	b.n	8007c7a <__pow5mult+0x6a>
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800a530 	.word	0x0800a530
 8007cbc:	0800a301 	.word	0x0800a301
 8007cc0:	0800a3e4 	.word	0x0800a3e4

08007cc4 <__lshift>:
 8007cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc8:	460c      	mov	r4, r1
 8007cca:	6849      	ldr	r1, [r1, #4]
 8007ccc:	6923      	ldr	r3, [r4, #16]
 8007cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cd2:	68a3      	ldr	r3, [r4, #8]
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	4691      	mov	r9, r2
 8007cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cdc:	f108 0601 	add.w	r6, r8, #1
 8007ce0:	42b3      	cmp	r3, r6
 8007ce2:	db0b      	blt.n	8007cfc <__lshift+0x38>
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f7ff fddb 	bl	80078a0 <_Balloc>
 8007cea:	4605      	mov	r5, r0
 8007cec:	b948      	cbnz	r0, 8007d02 <__lshift+0x3e>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	4b2a      	ldr	r3, [pc, #168]	; (8007d9c <__lshift+0xd8>)
 8007cf2:	482b      	ldr	r0, [pc, #172]	; (8007da0 <__lshift+0xdc>)
 8007cf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cf8:	f000 fccc 	bl	8008694 <__assert_func>
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	e7ee      	b.n	8007ce0 <__lshift+0x1c>
 8007d02:	2300      	movs	r3, #0
 8007d04:	f100 0114 	add.w	r1, r0, #20
 8007d08:	f100 0210 	add.w	r2, r0, #16
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	4553      	cmp	r3, sl
 8007d10:	db37      	blt.n	8007d82 <__lshift+0xbe>
 8007d12:	6920      	ldr	r0, [r4, #16]
 8007d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d18:	f104 0314 	add.w	r3, r4, #20
 8007d1c:	f019 091f 	ands.w	r9, r9, #31
 8007d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d28:	d02f      	beq.n	8007d8a <__lshift+0xc6>
 8007d2a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d2e:	468a      	mov	sl, r1
 8007d30:	f04f 0c00 	mov.w	ip, #0
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	fa02 f209 	lsl.w	r2, r2, r9
 8007d3a:	ea42 020c 	orr.w	r2, r2, ip
 8007d3e:	f84a 2b04 	str.w	r2, [sl], #4
 8007d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d46:	4298      	cmp	r0, r3
 8007d48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d4c:	d8f2      	bhi.n	8007d34 <__lshift+0x70>
 8007d4e:	1b03      	subs	r3, r0, r4
 8007d50:	3b15      	subs	r3, #21
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	3304      	adds	r3, #4
 8007d58:	f104 0215 	add.w	r2, r4, #21
 8007d5c:	4290      	cmp	r0, r2
 8007d5e:	bf38      	it	cc
 8007d60:	2304      	movcc	r3, #4
 8007d62:	f841 c003 	str.w	ip, [r1, r3]
 8007d66:	f1bc 0f00 	cmp.w	ip, #0
 8007d6a:	d001      	beq.n	8007d70 <__lshift+0xac>
 8007d6c:	f108 0602 	add.w	r6, r8, #2
 8007d70:	3e01      	subs	r6, #1
 8007d72:	4638      	mov	r0, r7
 8007d74:	612e      	str	r6, [r5, #16]
 8007d76:	4621      	mov	r1, r4
 8007d78:	f7ff fdd2 	bl	8007920 <_Bfree>
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d86:	3301      	adds	r3, #1
 8007d88:	e7c1      	b.n	8007d0e <__lshift+0x4a>
 8007d8a:	3904      	subs	r1, #4
 8007d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d94:	4298      	cmp	r0, r3
 8007d96:	d8f9      	bhi.n	8007d8c <__lshift+0xc8>
 8007d98:	e7ea      	b.n	8007d70 <__lshift+0xac>
 8007d9a:	bf00      	nop
 8007d9c:	0800a373 	.word	0x0800a373
 8007da0:	0800a3e4 	.word	0x0800a3e4

08007da4 <__mcmp>:
 8007da4:	b530      	push	{r4, r5, lr}
 8007da6:	6902      	ldr	r2, [r0, #16]
 8007da8:	690c      	ldr	r4, [r1, #16]
 8007daa:	1b12      	subs	r2, r2, r4
 8007dac:	d10e      	bne.n	8007dcc <__mcmp+0x28>
 8007dae:	f100 0314 	add.w	r3, r0, #20
 8007db2:	3114      	adds	r1, #20
 8007db4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007db8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007dbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007dc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007dc4:	42a5      	cmp	r5, r4
 8007dc6:	d003      	beq.n	8007dd0 <__mcmp+0x2c>
 8007dc8:	d305      	bcc.n	8007dd6 <__mcmp+0x32>
 8007dca:	2201      	movs	r2, #1
 8007dcc:	4610      	mov	r0, r2
 8007dce:	bd30      	pop	{r4, r5, pc}
 8007dd0:	4283      	cmp	r3, r0
 8007dd2:	d3f3      	bcc.n	8007dbc <__mcmp+0x18>
 8007dd4:	e7fa      	b.n	8007dcc <__mcmp+0x28>
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	e7f7      	b.n	8007dcc <__mcmp+0x28>

08007ddc <__mdiff>:
 8007ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	460c      	mov	r4, r1
 8007de2:	4606      	mov	r6, r0
 8007de4:	4611      	mov	r1, r2
 8007de6:	4620      	mov	r0, r4
 8007de8:	4690      	mov	r8, r2
 8007dea:	f7ff ffdb 	bl	8007da4 <__mcmp>
 8007dee:	1e05      	subs	r5, r0, #0
 8007df0:	d110      	bne.n	8007e14 <__mdiff+0x38>
 8007df2:	4629      	mov	r1, r5
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7ff fd53 	bl	80078a0 <_Balloc>
 8007dfa:	b930      	cbnz	r0, 8007e0a <__mdiff+0x2e>
 8007dfc:	4b3a      	ldr	r3, [pc, #232]	; (8007ee8 <__mdiff+0x10c>)
 8007dfe:	4602      	mov	r2, r0
 8007e00:	f240 2132 	movw	r1, #562	; 0x232
 8007e04:	4839      	ldr	r0, [pc, #228]	; (8007eec <__mdiff+0x110>)
 8007e06:	f000 fc45 	bl	8008694 <__assert_func>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	bfa4      	itt	ge
 8007e16:	4643      	movge	r3, r8
 8007e18:	46a0      	movge	r8, r4
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e20:	bfa6      	itte	ge
 8007e22:	461c      	movge	r4, r3
 8007e24:	2500      	movge	r5, #0
 8007e26:	2501      	movlt	r5, #1
 8007e28:	f7ff fd3a 	bl	80078a0 <_Balloc>
 8007e2c:	b920      	cbnz	r0, 8007e38 <__mdiff+0x5c>
 8007e2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ee8 <__mdiff+0x10c>)
 8007e30:	4602      	mov	r2, r0
 8007e32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e36:	e7e5      	b.n	8007e04 <__mdiff+0x28>
 8007e38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e3c:	6926      	ldr	r6, [r4, #16]
 8007e3e:	60c5      	str	r5, [r0, #12]
 8007e40:	f104 0914 	add.w	r9, r4, #20
 8007e44:	f108 0514 	add.w	r5, r8, #20
 8007e48:	f100 0e14 	add.w	lr, r0, #20
 8007e4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e54:	f108 0210 	add.w	r2, r8, #16
 8007e58:	46f2      	mov	sl, lr
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e64:	fa1f f883 	uxth.w	r8, r3
 8007e68:	fa11 f18b 	uxtah	r1, r1, fp
 8007e6c:	0c1b      	lsrs	r3, r3, #16
 8007e6e:	eba1 0808 	sub.w	r8, r1, r8
 8007e72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e7a:	fa1f f888 	uxth.w	r8, r8
 8007e7e:	1419      	asrs	r1, r3, #16
 8007e80:	454e      	cmp	r6, r9
 8007e82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e86:	f84a 3b04 	str.w	r3, [sl], #4
 8007e8a:	d8e7      	bhi.n	8007e5c <__mdiff+0x80>
 8007e8c:	1b33      	subs	r3, r6, r4
 8007e8e:	3b15      	subs	r3, #21
 8007e90:	f023 0303 	bic.w	r3, r3, #3
 8007e94:	3304      	adds	r3, #4
 8007e96:	3415      	adds	r4, #21
 8007e98:	42a6      	cmp	r6, r4
 8007e9a:	bf38      	it	cc
 8007e9c:	2304      	movcc	r3, #4
 8007e9e:	441d      	add	r5, r3
 8007ea0:	4473      	add	r3, lr
 8007ea2:	469e      	mov	lr, r3
 8007ea4:	462e      	mov	r6, r5
 8007ea6:	4566      	cmp	r6, ip
 8007ea8:	d30e      	bcc.n	8007ec8 <__mdiff+0xec>
 8007eaa:	f10c 0203 	add.w	r2, ip, #3
 8007eae:	1b52      	subs	r2, r2, r5
 8007eb0:	f022 0203 	bic.w	r2, r2, #3
 8007eb4:	3d03      	subs	r5, #3
 8007eb6:	45ac      	cmp	ip, r5
 8007eb8:	bf38      	it	cc
 8007eba:	2200      	movcc	r2, #0
 8007ebc:	441a      	add	r2, r3
 8007ebe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ec2:	b17b      	cbz	r3, 8007ee4 <__mdiff+0x108>
 8007ec4:	6107      	str	r7, [r0, #16]
 8007ec6:	e7a3      	b.n	8007e10 <__mdiff+0x34>
 8007ec8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ecc:	fa11 f288 	uxtah	r2, r1, r8
 8007ed0:	1414      	asrs	r4, r2, #16
 8007ed2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007edc:	f84e 2b04 	str.w	r2, [lr], #4
 8007ee0:	1421      	asrs	r1, r4, #16
 8007ee2:	e7e0      	b.n	8007ea6 <__mdiff+0xca>
 8007ee4:	3f01      	subs	r7, #1
 8007ee6:	e7ea      	b.n	8007ebe <__mdiff+0xe2>
 8007ee8:	0800a373 	.word	0x0800a373
 8007eec:	0800a3e4 	.word	0x0800a3e4

08007ef0 <__d2b>:
 8007ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	4689      	mov	r9, r1
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	ec57 6b10 	vmov	r6, r7, d0
 8007efc:	4690      	mov	r8, r2
 8007efe:	f7ff fccf 	bl	80078a0 <_Balloc>
 8007f02:	4604      	mov	r4, r0
 8007f04:	b930      	cbnz	r0, 8007f14 <__d2b+0x24>
 8007f06:	4602      	mov	r2, r0
 8007f08:	4b25      	ldr	r3, [pc, #148]	; (8007fa0 <__d2b+0xb0>)
 8007f0a:	4826      	ldr	r0, [pc, #152]	; (8007fa4 <__d2b+0xb4>)
 8007f0c:	f240 310a 	movw	r1, #778	; 0x30a
 8007f10:	f000 fbc0 	bl	8008694 <__assert_func>
 8007f14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007f18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f1c:	bb35      	cbnz	r5, 8007f6c <__d2b+0x7c>
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	d028      	beq.n	8007f76 <__d2b+0x86>
 8007f24:	4668      	mov	r0, sp
 8007f26:	9600      	str	r6, [sp, #0]
 8007f28:	f7ff fd82 	bl	8007a30 <__lo0bits>
 8007f2c:	9900      	ldr	r1, [sp, #0]
 8007f2e:	b300      	cbz	r0, 8007f72 <__d2b+0x82>
 8007f30:	9a01      	ldr	r2, [sp, #4]
 8007f32:	f1c0 0320 	rsb	r3, r0, #32
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	40c2      	lsrs	r2, r0
 8007f3e:	6163      	str	r3, [r4, #20]
 8007f40:	9201      	str	r2, [sp, #4]
 8007f42:	9b01      	ldr	r3, [sp, #4]
 8007f44:	61a3      	str	r3, [r4, #24]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bf14      	ite	ne
 8007f4a:	2202      	movne	r2, #2
 8007f4c:	2201      	moveq	r2, #1
 8007f4e:	6122      	str	r2, [r4, #16]
 8007f50:	b1d5      	cbz	r5, 8007f88 <__d2b+0x98>
 8007f52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f56:	4405      	add	r5, r0
 8007f58:	f8c9 5000 	str.w	r5, [r9]
 8007f5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f60:	f8c8 0000 	str.w	r0, [r8]
 8007f64:	4620      	mov	r0, r4
 8007f66:	b003      	add	sp, #12
 8007f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f70:	e7d5      	b.n	8007f1e <__d2b+0x2e>
 8007f72:	6161      	str	r1, [r4, #20]
 8007f74:	e7e5      	b.n	8007f42 <__d2b+0x52>
 8007f76:	a801      	add	r0, sp, #4
 8007f78:	f7ff fd5a 	bl	8007a30 <__lo0bits>
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	6163      	str	r3, [r4, #20]
 8007f80:	2201      	movs	r2, #1
 8007f82:	6122      	str	r2, [r4, #16]
 8007f84:	3020      	adds	r0, #32
 8007f86:	e7e3      	b.n	8007f50 <__d2b+0x60>
 8007f88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f90:	f8c9 0000 	str.w	r0, [r9]
 8007f94:	6918      	ldr	r0, [r3, #16]
 8007f96:	f7ff fd2b 	bl	80079f0 <__hi0bits>
 8007f9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f9e:	e7df      	b.n	8007f60 <__d2b+0x70>
 8007fa0:	0800a373 	.word	0x0800a373
 8007fa4:	0800a3e4 	.word	0x0800a3e4

08007fa8 <_calloc_r>:
 8007fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007faa:	fba1 2402 	umull	r2, r4, r1, r2
 8007fae:	b94c      	cbnz	r4, 8007fc4 <_calloc_r+0x1c>
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	9201      	str	r2, [sp, #4]
 8007fb4:	f000 f87a 	bl	80080ac <_malloc_r>
 8007fb8:	9a01      	ldr	r2, [sp, #4]
 8007fba:	4605      	mov	r5, r0
 8007fbc:	b930      	cbnz	r0, 8007fcc <_calloc_r+0x24>
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	b003      	add	sp, #12
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	220c      	movs	r2, #12
 8007fc6:	6002      	str	r2, [r0, #0]
 8007fc8:	2500      	movs	r5, #0
 8007fca:	e7f8      	b.n	8007fbe <_calloc_r+0x16>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	f7fe f85b 	bl	8006088 <memset>
 8007fd2:	e7f4      	b.n	8007fbe <_calloc_r+0x16>

08007fd4 <_free_r>:
 8007fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fd6:	2900      	cmp	r1, #0
 8007fd8:	d044      	beq.n	8008064 <_free_r+0x90>
 8007fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fde:	9001      	str	r0, [sp, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8007fe6:	bfb8      	it	lt
 8007fe8:	18e4      	addlt	r4, r4, r3
 8007fea:	f000 fcdf 	bl	80089ac <__malloc_lock>
 8007fee:	4a1e      	ldr	r2, [pc, #120]	; (8008068 <_free_r+0x94>)
 8007ff0:	9801      	ldr	r0, [sp, #4]
 8007ff2:	6813      	ldr	r3, [r2, #0]
 8007ff4:	b933      	cbnz	r3, 8008004 <_free_r+0x30>
 8007ff6:	6063      	str	r3, [r4, #4]
 8007ff8:	6014      	str	r4, [r2, #0]
 8007ffa:	b003      	add	sp, #12
 8007ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008000:	f000 bcda 	b.w	80089b8 <__malloc_unlock>
 8008004:	42a3      	cmp	r3, r4
 8008006:	d908      	bls.n	800801a <_free_r+0x46>
 8008008:	6825      	ldr	r5, [r4, #0]
 800800a:	1961      	adds	r1, r4, r5
 800800c:	428b      	cmp	r3, r1
 800800e:	bf01      	itttt	eq
 8008010:	6819      	ldreq	r1, [r3, #0]
 8008012:	685b      	ldreq	r3, [r3, #4]
 8008014:	1949      	addeq	r1, r1, r5
 8008016:	6021      	streq	r1, [r4, #0]
 8008018:	e7ed      	b.n	8007ff6 <_free_r+0x22>
 800801a:	461a      	mov	r2, r3
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b10b      	cbz	r3, 8008024 <_free_r+0x50>
 8008020:	42a3      	cmp	r3, r4
 8008022:	d9fa      	bls.n	800801a <_free_r+0x46>
 8008024:	6811      	ldr	r1, [r2, #0]
 8008026:	1855      	adds	r5, r2, r1
 8008028:	42a5      	cmp	r5, r4
 800802a:	d10b      	bne.n	8008044 <_free_r+0x70>
 800802c:	6824      	ldr	r4, [r4, #0]
 800802e:	4421      	add	r1, r4
 8008030:	1854      	adds	r4, r2, r1
 8008032:	42a3      	cmp	r3, r4
 8008034:	6011      	str	r1, [r2, #0]
 8008036:	d1e0      	bne.n	8007ffa <_free_r+0x26>
 8008038:	681c      	ldr	r4, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	6053      	str	r3, [r2, #4]
 800803e:	4421      	add	r1, r4
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	e7da      	b.n	8007ffa <_free_r+0x26>
 8008044:	d902      	bls.n	800804c <_free_r+0x78>
 8008046:	230c      	movs	r3, #12
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	e7d6      	b.n	8007ffa <_free_r+0x26>
 800804c:	6825      	ldr	r5, [r4, #0]
 800804e:	1961      	adds	r1, r4, r5
 8008050:	428b      	cmp	r3, r1
 8008052:	bf04      	itt	eq
 8008054:	6819      	ldreq	r1, [r3, #0]
 8008056:	685b      	ldreq	r3, [r3, #4]
 8008058:	6063      	str	r3, [r4, #4]
 800805a:	bf04      	itt	eq
 800805c:	1949      	addeq	r1, r1, r5
 800805e:	6021      	streq	r1, [r4, #0]
 8008060:	6054      	str	r4, [r2, #4]
 8008062:	e7ca      	b.n	8007ffa <_free_r+0x26>
 8008064:	b003      	add	sp, #12
 8008066:	bd30      	pop	{r4, r5, pc}
 8008068:	20000590 	.word	0x20000590

0800806c <sbrk_aligned>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4e0e      	ldr	r6, [pc, #56]	; (80080a8 <sbrk_aligned+0x3c>)
 8008070:	460c      	mov	r4, r1
 8008072:	6831      	ldr	r1, [r6, #0]
 8008074:	4605      	mov	r5, r0
 8008076:	b911      	cbnz	r1, 800807e <sbrk_aligned+0x12>
 8008078:	f000 f9e6 	bl	8008448 <_sbrk_r>
 800807c:	6030      	str	r0, [r6, #0]
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	f000 f9e1 	bl	8008448 <_sbrk_r>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	d00a      	beq.n	80080a0 <sbrk_aligned+0x34>
 800808a:	1cc4      	adds	r4, r0, #3
 800808c:	f024 0403 	bic.w	r4, r4, #3
 8008090:	42a0      	cmp	r0, r4
 8008092:	d007      	beq.n	80080a4 <sbrk_aligned+0x38>
 8008094:	1a21      	subs	r1, r4, r0
 8008096:	4628      	mov	r0, r5
 8008098:	f000 f9d6 	bl	8008448 <_sbrk_r>
 800809c:	3001      	adds	r0, #1
 800809e:	d101      	bne.n	80080a4 <sbrk_aligned+0x38>
 80080a0:	f04f 34ff 	mov.w	r4, #4294967295
 80080a4:	4620      	mov	r0, r4
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	20000594 	.word	0x20000594

080080ac <_malloc_r>:
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	1ccd      	adds	r5, r1, #3
 80080b2:	f025 0503 	bic.w	r5, r5, #3
 80080b6:	3508      	adds	r5, #8
 80080b8:	2d0c      	cmp	r5, #12
 80080ba:	bf38      	it	cc
 80080bc:	250c      	movcc	r5, #12
 80080be:	2d00      	cmp	r5, #0
 80080c0:	4607      	mov	r7, r0
 80080c2:	db01      	blt.n	80080c8 <_malloc_r+0x1c>
 80080c4:	42a9      	cmp	r1, r5
 80080c6:	d905      	bls.n	80080d4 <_malloc_r+0x28>
 80080c8:	230c      	movs	r3, #12
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	2600      	movs	r6, #0
 80080ce:	4630      	mov	r0, r6
 80080d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d4:	4e2e      	ldr	r6, [pc, #184]	; (8008190 <_malloc_r+0xe4>)
 80080d6:	f000 fc69 	bl	80089ac <__malloc_lock>
 80080da:	6833      	ldr	r3, [r6, #0]
 80080dc:	461c      	mov	r4, r3
 80080de:	bb34      	cbnz	r4, 800812e <_malloc_r+0x82>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4638      	mov	r0, r7
 80080e4:	f7ff ffc2 	bl	800806c <sbrk_aligned>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	4604      	mov	r4, r0
 80080ec:	d14d      	bne.n	800818a <_malloc_r+0xde>
 80080ee:	6834      	ldr	r4, [r6, #0]
 80080f0:	4626      	mov	r6, r4
 80080f2:	2e00      	cmp	r6, #0
 80080f4:	d140      	bne.n	8008178 <_malloc_r+0xcc>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	4631      	mov	r1, r6
 80080fa:	4638      	mov	r0, r7
 80080fc:	eb04 0803 	add.w	r8, r4, r3
 8008100:	f000 f9a2 	bl	8008448 <_sbrk_r>
 8008104:	4580      	cmp	r8, r0
 8008106:	d13a      	bne.n	800817e <_malloc_r+0xd2>
 8008108:	6821      	ldr	r1, [r4, #0]
 800810a:	3503      	adds	r5, #3
 800810c:	1a6d      	subs	r5, r5, r1
 800810e:	f025 0503 	bic.w	r5, r5, #3
 8008112:	3508      	adds	r5, #8
 8008114:	2d0c      	cmp	r5, #12
 8008116:	bf38      	it	cc
 8008118:	250c      	movcc	r5, #12
 800811a:	4629      	mov	r1, r5
 800811c:	4638      	mov	r0, r7
 800811e:	f7ff ffa5 	bl	800806c <sbrk_aligned>
 8008122:	3001      	adds	r0, #1
 8008124:	d02b      	beq.n	800817e <_malloc_r+0xd2>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	442b      	add	r3, r5
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	e00e      	b.n	800814c <_malloc_r+0xa0>
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	1b52      	subs	r2, r2, r5
 8008132:	d41e      	bmi.n	8008172 <_malloc_r+0xc6>
 8008134:	2a0b      	cmp	r2, #11
 8008136:	d916      	bls.n	8008166 <_malloc_r+0xba>
 8008138:	1961      	adds	r1, r4, r5
 800813a:	42a3      	cmp	r3, r4
 800813c:	6025      	str	r5, [r4, #0]
 800813e:	bf18      	it	ne
 8008140:	6059      	strne	r1, [r3, #4]
 8008142:	6863      	ldr	r3, [r4, #4]
 8008144:	bf08      	it	eq
 8008146:	6031      	streq	r1, [r6, #0]
 8008148:	5162      	str	r2, [r4, r5]
 800814a:	604b      	str	r3, [r1, #4]
 800814c:	4638      	mov	r0, r7
 800814e:	f104 060b 	add.w	r6, r4, #11
 8008152:	f000 fc31 	bl	80089b8 <__malloc_unlock>
 8008156:	f026 0607 	bic.w	r6, r6, #7
 800815a:	1d23      	adds	r3, r4, #4
 800815c:	1af2      	subs	r2, r6, r3
 800815e:	d0b6      	beq.n	80080ce <_malloc_r+0x22>
 8008160:	1b9b      	subs	r3, r3, r6
 8008162:	50a3      	str	r3, [r4, r2]
 8008164:	e7b3      	b.n	80080ce <_malloc_r+0x22>
 8008166:	6862      	ldr	r2, [r4, #4]
 8008168:	42a3      	cmp	r3, r4
 800816a:	bf0c      	ite	eq
 800816c:	6032      	streq	r2, [r6, #0]
 800816e:	605a      	strne	r2, [r3, #4]
 8008170:	e7ec      	b.n	800814c <_malloc_r+0xa0>
 8008172:	4623      	mov	r3, r4
 8008174:	6864      	ldr	r4, [r4, #4]
 8008176:	e7b2      	b.n	80080de <_malloc_r+0x32>
 8008178:	4634      	mov	r4, r6
 800817a:	6876      	ldr	r6, [r6, #4]
 800817c:	e7b9      	b.n	80080f2 <_malloc_r+0x46>
 800817e:	230c      	movs	r3, #12
 8008180:	603b      	str	r3, [r7, #0]
 8008182:	4638      	mov	r0, r7
 8008184:	f000 fc18 	bl	80089b8 <__malloc_unlock>
 8008188:	e7a1      	b.n	80080ce <_malloc_r+0x22>
 800818a:	6025      	str	r5, [r4, #0]
 800818c:	e7de      	b.n	800814c <_malloc_r+0xa0>
 800818e:	bf00      	nop
 8008190:	20000590 	.word	0x20000590

08008194 <__sfputc_r>:
 8008194:	6893      	ldr	r3, [r2, #8]
 8008196:	3b01      	subs	r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	b410      	push	{r4}
 800819c:	6093      	str	r3, [r2, #8]
 800819e:	da08      	bge.n	80081b2 <__sfputc_r+0x1e>
 80081a0:	6994      	ldr	r4, [r2, #24]
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	db01      	blt.n	80081aa <__sfputc_r+0x16>
 80081a6:	290a      	cmp	r1, #10
 80081a8:	d103      	bne.n	80081b2 <__sfputc_r+0x1e>
 80081aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ae:	f000 b99f 	b.w	80084f0 <__swbuf_r>
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	1c58      	adds	r0, r3, #1
 80081b6:	6010      	str	r0, [r2, #0]
 80081b8:	7019      	strb	r1, [r3, #0]
 80081ba:	4608      	mov	r0, r1
 80081bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <__sfputs_r>:
 80081c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	4614      	mov	r4, r2
 80081ca:	18d5      	adds	r5, r2, r3
 80081cc:	42ac      	cmp	r4, r5
 80081ce:	d101      	bne.n	80081d4 <__sfputs_r+0x12>
 80081d0:	2000      	movs	r0, #0
 80081d2:	e007      	b.n	80081e4 <__sfputs_r+0x22>
 80081d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d8:	463a      	mov	r2, r7
 80081da:	4630      	mov	r0, r6
 80081dc:	f7ff ffda 	bl	8008194 <__sfputc_r>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d1f3      	bne.n	80081cc <__sfputs_r+0xa>
 80081e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081e8 <_vfiprintf_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	460d      	mov	r5, r1
 80081ee:	b09d      	sub	sp, #116	; 0x74
 80081f0:	4614      	mov	r4, r2
 80081f2:	4698      	mov	r8, r3
 80081f4:	4606      	mov	r6, r0
 80081f6:	b118      	cbz	r0, 8008200 <_vfiprintf_r+0x18>
 80081f8:	6983      	ldr	r3, [r0, #24]
 80081fa:	b90b      	cbnz	r3, 8008200 <_vfiprintf_r+0x18>
 80081fc:	f7ff faa2 	bl	8007744 <__sinit>
 8008200:	4b89      	ldr	r3, [pc, #548]	; (8008428 <_vfiprintf_r+0x240>)
 8008202:	429d      	cmp	r5, r3
 8008204:	d11b      	bne.n	800823e <_vfiprintf_r+0x56>
 8008206:	6875      	ldr	r5, [r6, #4]
 8008208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d405      	bmi.n	800821a <_vfiprintf_r+0x32>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	059a      	lsls	r2, r3, #22
 8008212:	d402      	bmi.n	800821a <_vfiprintf_r+0x32>
 8008214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008216:	f7ff fb38 	bl	800788a <__retarget_lock_acquire_recursive>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	071b      	lsls	r3, r3, #28
 800821e:	d501      	bpl.n	8008224 <_vfiprintf_r+0x3c>
 8008220:	692b      	ldr	r3, [r5, #16]
 8008222:	b9eb      	cbnz	r3, 8008260 <_vfiprintf_r+0x78>
 8008224:	4629      	mov	r1, r5
 8008226:	4630      	mov	r0, r6
 8008228:	f000 f9c6 	bl	80085b8 <__swsetup_r>
 800822c:	b1c0      	cbz	r0, 8008260 <_vfiprintf_r+0x78>
 800822e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008230:	07dc      	lsls	r4, r3, #31
 8008232:	d50e      	bpl.n	8008252 <_vfiprintf_r+0x6a>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	b01d      	add	sp, #116	; 0x74
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	4b7b      	ldr	r3, [pc, #492]	; (800842c <_vfiprintf_r+0x244>)
 8008240:	429d      	cmp	r5, r3
 8008242:	d101      	bne.n	8008248 <_vfiprintf_r+0x60>
 8008244:	68b5      	ldr	r5, [r6, #8]
 8008246:	e7df      	b.n	8008208 <_vfiprintf_r+0x20>
 8008248:	4b79      	ldr	r3, [pc, #484]	; (8008430 <_vfiprintf_r+0x248>)
 800824a:	429d      	cmp	r5, r3
 800824c:	bf08      	it	eq
 800824e:	68f5      	ldreq	r5, [r6, #12]
 8008250:	e7da      	b.n	8008208 <_vfiprintf_r+0x20>
 8008252:	89ab      	ldrh	r3, [r5, #12]
 8008254:	0598      	lsls	r0, r3, #22
 8008256:	d4ed      	bmi.n	8008234 <_vfiprintf_r+0x4c>
 8008258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800825a:	f7ff fb17 	bl	800788c <__retarget_lock_release_recursive>
 800825e:	e7e9      	b.n	8008234 <_vfiprintf_r+0x4c>
 8008260:	2300      	movs	r3, #0
 8008262:	9309      	str	r3, [sp, #36]	; 0x24
 8008264:	2320      	movs	r3, #32
 8008266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800826a:	f8cd 800c 	str.w	r8, [sp, #12]
 800826e:	2330      	movs	r3, #48	; 0x30
 8008270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008434 <_vfiprintf_r+0x24c>
 8008274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008278:	f04f 0901 	mov.w	r9, #1
 800827c:	4623      	mov	r3, r4
 800827e:	469a      	mov	sl, r3
 8008280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008284:	b10a      	cbz	r2, 800828a <_vfiprintf_r+0xa2>
 8008286:	2a25      	cmp	r2, #37	; 0x25
 8008288:	d1f9      	bne.n	800827e <_vfiprintf_r+0x96>
 800828a:	ebba 0b04 	subs.w	fp, sl, r4
 800828e:	d00b      	beq.n	80082a8 <_vfiprintf_r+0xc0>
 8008290:	465b      	mov	r3, fp
 8008292:	4622      	mov	r2, r4
 8008294:	4629      	mov	r1, r5
 8008296:	4630      	mov	r0, r6
 8008298:	f7ff ff93 	bl	80081c2 <__sfputs_r>
 800829c:	3001      	adds	r0, #1
 800829e:	f000 80aa 	beq.w	80083f6 <_vfiprintf_r+0x20e>
 80082a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a4:	445a      	add	r2, fp
 80082a6:	9209      	str	r2, [sp, #36]	; 0x24
 80082a8:	f89a 3000 	ldrb.w	r3, [sl]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 80a2 	beq.w	80083f6 <_vfiprintf_r+0x20e>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f04f 32ff 	mov.w	r2, #4294967295
 80082b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082bc:	f10a 0a01 	add.w	sl, sl, #1
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	9307      	str	r3, [sp, #28]
 80082c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c8:	931a      	str	r3, [sp, #104]	; 0x68
 80082ca:	4654      	mov	r4, sl
 80082cc:	2205      	movs	r2, #5
 80082ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d2:	4858      	ldr	r0, [pc, #352]	; (8008434 <_vfiprintf_r+0x24c>)
 80082d4:	f7f7 ff8c 	bl	80001f0 <memchr>
 80082d8:	9a04      	ldr	r2, [sp, #16]
 80082da:	b9d8      	cbnz	r0, 8008314 <_vfiprintf_r+0x12c>
 80082dc:	06d1      	lsls	r1, r2, #27
 80082de:	bf44      	itt	mi
 80082e0:	2320      	movmi	r3, #32
 80082e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e6:	0713      	lsls	r3, r2, #28
 80082e8:	bf44      	itt	mi
 80082ea:	232b      	movmi	r3, #43	; 0x2b
 80082ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082f0:	f89a 3000 	ldrb.w	r3, [sl]
 80082f4:	2b2a      	cmp	r3, #42	; 0x2a
 80082f6:	d015      	beq.n	8008324 <_vfiprintf_r+0x13c>
 80082f8:	9a07      	ldr	r2, [sp, #28]
 80082fa:	4654      	mov	r4, sl
 80082fc:	2000      	movs	r0, #0
 80082fe:	f04f 0c0a 	mov.w	ip, #10
 8008302:	4621      	mov	r1, r4
 8008304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008308:	3b30      	subs	r3, #48	; 0x30
 800830a:	2b09      	cmp	r3, #9
 800830c:	d94e      	bls.n	80083ac <_vfiprintf_r+0x1c4>
 800830e:	b1b0      	cbz	r0, 800833e <_vfiprintf_r+0x156>
 8008310:	9207      	str	r2, [sp, #28]
 8008312:	e014      	b.n	800833e <_vfiprintf_r+0x156>
 8008314:	eba0 0308 	sub.w	r3, r0, r8
 8008318:	fa09 f303 	lsl.w	r3, r9, r3
 800831c:	4313      	orrs	r3, r2
 800831e:	9304      	str	r3, [sp, #16]
 8008320:	46a2      	mov	sl, r4
 8008322:	e7d2      	b.n	80082ca <_vfiprintf_r+0xe2>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	1d19      	adds	r1, r3, #4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	9103      	str	r1, [sp, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	bfbb      	ittet	lt
 8008330:	425b      	neglt	r3, r3
 8008332:	f042 0202 	orrlt.w	r2, r2, #2
 8008336:	9307      	strge	r3, [sp, #28]
 8008338:	9307      	strlt	r3, [sp, #28]
 800833a:	bfb8      	it	lt
 800833c:	9204      	strlt	r2, [sp, #16]
 800833e:	7823      	ldrb	r3, [r4, #0]
 8008340:	2b2e      	cmp	r3, #46	; 0x2e
 8008342:	d10c      	bne.n	800835e <_vfiprintf_r+0x176>
 8008344:	7863      	ldrb	r3, [r4, #1]
 8008346:	2b2a      	cmp	r3, #42	; 0x2a
 8008348:	d135      	bne.n	80083b6 <_vfiprintf_r+0x1ce>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	1d1a      	adds	r2, r3, #4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	9203      	str	r2, [sp, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfb8      	it	lt
 8008356:	f04f 33ff 	movlt.w	r3, #4294967295
 800835a:	3402      	adds	r4, #2
 800835c:	9305      	str	r3, [sp, #20]
 800835e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008444 <_vfiprintf_r+0x25c>
 8008362:	7821      	ldrb	r1, [r4, #0]
 8008364:	2203      	movs	r2, #3
 8008366:	4650      	mov	r0, sl
 8008368:	f7f7 ff42 	bl	80001f0 <memchr>
 800836c:	b140      	cbz	r0, 8008380 <_vfiprintf_r+0x198>
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	eba0 000a 	sub.w	r0, r0, sl
 8008374:	fa03 f000 	lsl.w	r0, r3, r0
 8008378:	9b04      	ldr	r3, [sp, #16]
 800837a:	4303      	orrs	r3, r0
 800837c:	3401      	adds	r4, #1
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008384:	482c      	ldr	r0, [pc, #176]	; (8008438 <_vfiprintf_r+0x250>)
 8008386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800838a:	2206      	movs	r2, #6
 800838c:	f7f7 ff30 	bl	80001f0 <memchr>
 8008390:	2800      	cmp	r0, #0
 8008392:	d03f      	beq.n	8008414 <_vfiprintf_r+0x22c>
 8008394:	4b29      	ldr	r3, [pc, #164]	; (800843c <_vfiprintf_r+0x254>)
 8008396:	bb1b      	cbnz	r3, 80083e0 <_vfiprintf_r+0x1f8>
 8008398:	9b03      	ldr	r3, [sp, #12]
 800839a:	3307      	adds	r3, #7
 800839c:	f023 0307 	bic.w	r3, r3, #7
 80083a0:	3308      	adds	r3, #8
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a6:	443b      	add	r3, r7
 80083a8:	9309      	str	r3, [sp, #36]	; 0x24
 80083aa:	e767      	b.n	800827c <_vfiprintf_r+0x94>
 80083ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80083b0:	460c      	mov	r4, r1
 80083b2:	2001      	movs	r0, #1
 80083b4:	e7a5      	b.n	8008302 <_vfiprintf_r+0x11a>
 80083b6:	2300      	movs	r3, #0
 80083b8:	3401      	adds	r4, #1
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	4619      	mov	r1, r3
 80083be:	f04f 0c0a 	mov.w	ip, #10
 80083c2:	4620      	mov	r0, r4
 80083c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c8:	3a30      	subs	r2, #48	; 0x30
 80083ca:	2a09      	cmp	r2, #9
 80083cc:	d903      	bls.n	80083d6 <_vfiprintf_r+0x1ee>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0c5      	beq.n	800835e <_vfiprintf_r+0x176>
 80083d2:	9105      	str	r1, [sp, #20]
 80083d4:	e7c3      	b.n	800835e <_vfiprintf_r+0x176>
 80083d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083da:	4604      	mov	r4, r0
 80083dc:	2301      	movs	r3, #1
 80083de:	e7f0      	b.n	80083c2 <_vfiprintf_r+0x1da>
 80083e0:	ab03      	add	r3, sp, #12
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	462a      	mov	r2, r5
 80083e6:	4b16      	ldr	r3, [pc, #88]	; (8008440 <_vfiprintf_r+0x258>)
 80083e8:	a904      	add	r1, sp, #16
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7fd fef4 	bl	80061d8 <_printf_float>
 80083f0:	4607      	mov	r7, r0
 80083f2:	1c78      	adds	r0, r7, #1
 80083f4:	d1d6      	bne.n	80083a4 <_vfiprintf_r+0x1bc>
 80083f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083f8:	07d9      	lsls	r1, r3, #31
 80083fa:	d405      	bmi.n	8008408 <_vfiprintf_r+0x220>
 80083fc:	89ab      	ldrh	r3, [r5, #12]
 80083fe:	059a      	lsls	r2, r3, #22
 8008400:	d402      	bmi.n	8008408 <_vfiprintf_r+0x220>
 8008402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008404:	f7ff fa42 	bl	800788c <__retarget_lock_release_recursive>
 8008408:	89ab      	ldrh	r3, [r5, #12]
 800840a:	065b      	lsls	r3, r3, #25
 800840c:	f53f af12 	bmi.w	8008234 <_vfiprintf_r+0x4c>
 8008410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008412:	e711      	b.n	8008238 <_vfiprintf_r+0x50>
 8008414:	ab03      	add	r3, sp, #12
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	462a      	mov	r2, r5
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <_vfiprintf_r+0x258>)
 800841c:	a904      	add	r1, sp, #16
 800841e:	4630      	mov	r0, r6
 8008420:	f7fe f97e 	bl	8006720 <_printf_i>
 8008424:	e7e4      	b.n	80083f0 <_vfiprintf_r+0x208>
 8008426:	bf00      	nop
 8008428:	0800a3a4 	.word	0x0800a3a4
 800842c:	0800a3c4 	.word	0x0800a3c4
 8008430:	0800a384 	.word	0x0800a384
 8008434:	0800a53c 	.word	0x0800a53c
 8008438:	0800a546 	.word	0x0800a546
 800843c:	080061d9 	.word	0x080061d9
 8008440:	080081c3 	.word	0x080081c3
 8008444:	0800a542 	.word	0x0800a542

08008448 <_sbrk_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d06      	ldr	r5, [pc, #24]	; (8008464 <_sbrk_r+0x1c>)
 800844c:	2300      	movs	r3, #0
 800844e:	4604      	mov	r4, r0
 8008450:	4608      	mov	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7fb ffbe 	bl	80043d4 <_sbrk>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_sbrk_r+0x1a>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_sbrk_r+0x1a>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	20000598 	.word	0x20000598

08008468 <__sread>:
 8008468:	b510      	push	{r4, lr}
 800846a:	460c      	mov	r4, r1
 800846c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008470:	f000 faa8 	bl	80089c4 <_read_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	bfab      	itete	ge
 8008478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800847a:	89a3      	ldrhlt	r3, [r4, #12]
 800847c:	181b      	addge	r3, r3, r0
 800847e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008482:	bfac      	ite	ge
 8008484:	6563      	strge	r3, [r4, #84]	; 0x54
 8008486:	81a3      	strhlt	r3, [r4, #12]
 8008488:	bd10      	pop	{r4, pc}

0800848a <__swrite>:
 800848a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848e:	461f      	mov	r7, r3
 8008490:	898b      	ldrh	r3, [r1, #12]
 8008492:	05db      	lsls	r3, r3, #23
 8008494:	4605      	mov	r5, r0
 8008496:	460c      	mov	r4, r1
 8008498:	4616      	mov	r6, r2
 800849a:	d505      	bpl.n	80084a8 <__swrite+0x1e>
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	2302      	movs	r3, #2
 80084a2:	2200      	movs	r2, #0
 80084a4:	f000 f9f8 	bl	8008898 <_lseek_r>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	4632      	mov	r2, r6
 80084b6:	463b      	mov	r3, r7
 80084b8:	4628      	mov	r0, r5
 80084ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084be:	f000 b869 	b.w	8008594 <_write_r>

080084c2 <__sseek>:
 80084c2:	b510      	push	{r4, lr}
 80084c4:	460c      	mov	r4, r1
 80084c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ca:	f000 f9e5 	bl	8008898 <_lseek_r>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	bf15      	itete	ne
 80084d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80084d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084de:	81a3      	strheq	r3, [r4, #12]
 80084e0:	bf18      	it	ne
 80084e2:	81a3      	strhne	r3, [r4, #12]
 80084e4:	bd10      	pop	{r4, pc}

080084e6 <__sclose>:
 80084e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ea:	f000 b8f1 	b.w	80086d0 <_close_r>
	...

080084f0 <__swbuf_r>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	460e      	mov	r6, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	4605      	mov	r5, r0
 80084f8:	b118      	cbz	r0, 8008502 <__swbuf_r+0x12>
 80084fa:	6983      	ldr	r3, [r0, #24]
 80084fc:	b90b      	cbnz	r3, 8008502 <__swbuf_r+0x12>
 80084fe:	f7ff f921 	bl	8007744 <__sinit>
 8008502:	4b21      	ldr	r3, [pc, #132]	; (8008588 <__swbuf_r+0x98>)
 8008504:	429c      	cmp	r4, r3
 8008506:	d12b      	bne.n	8008560 <__swbuf_r+0x70>
 8008508:	686c      	ldr	r4, [r5, #4]
 800850a:	69a3      	ldr	r3, [r4, #24]
 800850c:	60a3      	str	r3, [r4, #8]
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	071a      	lsls	r2, r3, #28
 8008512:	d52f      	bpl.n	8008574 <__swbuf_r+0x84>
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	b36b      	cbz	r3, 8008574 <__swbuf_r+0x84>
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	6820      	ldr	r0, [r4, #0]
 800851c:	1ac0      	subs	r0, r0, r3
 800851e:	6963      	ldr	r3, [r4, #20]
 8008520:	b2f6      	uxtb	r6, r6
 8008522:	4283      	cmp	r3, r0
 8008524:	4637      	mov	r7, r6
 8008526:	dc04      	bgt.n	8008532 <__swbuf_r+0x42>
 8008528:	4621      	mov	r1, r4
 800852a:	4628      	mov	r0, r5
 800852c:	f000 f966 	bl	80087fc <_fflush_r>
 8008530:	bb30      	cbnz	r0, 8008580 <__swbuf_r+0x90>
 8008532:	68a3      	ldr	r3, [r4, #8]
 8008534:	3b01      	subs	r3, #1
 8008536:	60a3      	str	r3, [r4, #8]
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	6022      	str	r2, [r4, #0]
 800853e:	701e      	strb	r6, [r3, #0]
 8008540:	6963      	ldr	r3, [r4, #20]
 8008542:	3001      	adds	r0, #1
 8008544:	4283      	cmp	r3, r0
 8008546:	d004      	beq.n	8008552 <__swbuf_r+0x62>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	07db      	lsls	r3, r3, #31
 800854c:	d506      	bpl.n	800855c <__swbuf_r+0x6c>
 800854e:	2e0a      	cmp	r6, #10
 8008550:	d104      	bne.n	800855c <__swbuf_r+0x6c>
 8008552:	4621      	mov	r1, r4
 8008554:	4628      	mov	r0, r5
 8008556:	f000 f951 	bl	80087fc <_fflush_r>
 800855a:	b988      	cbnz	r0, 8008580 <__swbuf_r+0x90>
 800855c:	4638      	mov	r0, r7
 800855e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <__swbuf_r+0x9c>)
 8008562:	429c      	cmp	r4, r3
 8008564:	d101      	bne.n	800856a <__swbuf_r+0x7a>
 8008566:	68ac      	ldr	r4, [r5, #8]
 8008568:	e7cf      	b.n	800850a <__swbuf_r+0x1a>
 800856a:	4b09      	ldr	r3, [pc, #36]	; (8008590 <__swbuf_r+0xa0>)
 800856c:	429c      	cmp	r4, r3
 800856e:	bf08      	it	eq
 8008570:	68ec      	ldreq	r4, [r5, #12]
 8008572:	e7ca      	b.n	800850a <__swbuf_r+0x1a>
 8008574:	4621      	mov	r1, r4
 8008576:	4628      	mov	r0, r5
 8008578:	f000 f81e 	bl	80085b8 <__swsetup_r>
 800857c:	2800      	cmp	r0, #0
 800857e:	d0cb      	beq.n	8008518 <__swbuf_r+0x28>
 8008580:	f04f 37ff 	mov.w	r7, #4294967295
 8008584:	e7ea      	b.n	800855c <__swbuf_r+0x6c>
 8008586:	bf00      	nop
 8008588:	0800a3a4 	.word	0x0800a3a4
 800858c:	0800a3c4 	.word	0x0800a3c4
 8008590:	0800a384 	.word	0x0800a384

08008594 <_write_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d07      	ldr	r5, [pc, #28]	; (80085b4 <_write_r+0x20>)
 8008598:	4604      	mov	r4, r0
 800859a:	4608      	mov	r0, r1
 800859c:	4611      	mov	r1, r2
 800859e:	2200      	movs	r2, #0
 80085a0:	602a      	str	r2, [r5, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	f7f9 feee 	bl	8002384 <_write>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_write_r+0x1e>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_write_r+0x1e>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20000598 	.word	0x20000598

080085b8 <__swsetup_r>:
 80085b8:	4b32      	ldr	r3, [pc, #200]	; (8008684 <__swsetup_r+0xcc>)
 80085ba:	b570      	push	{r4, r5, r6, lr}
 80085bc:	681d      	ldr	r5, [r3, #0]
 80085be:	4606      	mov	r6, r0
 80085c0:	460c      	mov	r4, r1
 80085c2:	b125      	cbz	r5, 80085ce <__swsetup_r+0x16>
 80085c4:	69ab      	ldr	r3, [r5, #24]
 80085c6:	b913      	cbnz	r3, 80085ce <__swsetup_r+0x16>
 80085c8:	4628      	mov	r0, r5
 80085ca:	f7ff f8bb 	bl	8007744 <__sinit>
 80085ce:	4b2e      	ldr	r3, [pc, #184]	; (8008688 <__swsetup_r+0xd0>)
 80085d0:	429c      	cmp	r4, r3
 80085d2:	d10f      	bne.n	80085f4 <__swsetup_r+0x3c>
 80085d4:	686c      	ldr	r4, [r5, #4]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085dc:	0719      	lsls	r1, r3, #28
 80085de:	d42c      	bmi.n	800863a <__swsetup_r+0x82>
 80085e0:	06dd      	lsls	r5, r3, #27
 80085e2:	d411      	bmi.n	8008608 <__swsetup_r+0x50>
 80085e4:	2309      	movs	r3, #9
 80085e6:	6033      	str	r3, [r6, #0]
 80085e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	e03e      	b.n	8008672 <__swsetup_r+0xba>
 80085f4:	4b25      	ldr	r3, [pc, #148]	; (800868c <__swsetup_r+0xd4>)
 80085f6:	429c      	cmp	r4, r3
 80085f8:	d101      	bne.n	80085fe <__swsetup_r+0x46>
 80085fa:	68ac      	ldr	r4, [r5, #8]
 80085fc:	e7eb      	b.n	80085d6 <__swsetup_r+0x1e>
 80085fe:	4b24      	ldr	r3, [pc, #144]	; (8008690 <__swsetup_r+0xd8>)
 8008600:	429c      	cmp	r4, r3
 8008602:	bf08      	it	eq
 8008604:	68ec      	ldreq	r4, [r5, #12]
 8008606:	e7e6      	b.n	80085d6 <__swsetup_r+0x1e>
 8008608:	0758      	lsls	r0, r3, #29
 800860a:	d512      	bpl.n	8008632 <__swsetup_r+0x7a>
 800860c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800860e:	b141      	cbz	r1, 8008622 <__swsetup_r+0x6a>
 8008610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008614:	4299      	cmp	r1, r3
 8008616:	d002      	beq.n	800861e <__swsetup_r+0x66>
 8008618:	4630      	mov	r0, r6
 800861a:	f7ff fcdb 	bl	8007fd4 <_free_r>
 800861e:	2300      	movs	r3, #0
 8008620:	6363      	str	r3, [r4, #52]	; 0x34
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	2300      	movs	r3, #0
 800862c:	6063      	str	r3, [r4, #4]
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	f043 0308 	orr.w	r3, r3, #8
 8008638:	81a3      	strh	r3, [r4, #12]
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	b94b      	cbnz	r3, 8008652 <__swsetup_r+0x9a>
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008648:	d003      	beq.n	8008652 <__swsetup_r+0x9a>
 800864a:	4621      	mov	r1, r4
 800864c:	4630      	mov	r0, r6
 800864e:	f000 f95b 	bl	8008908 <__smakebuf_r>
 8008652:	89a0      	ldrh	r0, [r4, #12]
 8008654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008658:	f010 0301 	ands.w	r3, r0, #1
 800865c:	d00a      	beq.n	8008674 <__swsetup_r+0xbc>
 800865e:	2300      	movs	r3, #0
 8008660:	60a3      	str	r3, [r4, #8]
 8008662:	6963      	ldr	r3, [r4, #20]
 8008664:	425b      	negs	r3, r3
 8008666:	61a3      	str	r3, [r4, #24]
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	b943      	cbnz	r3, 800867e <__swsetup_r+0xc6>
 800866c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008670:	d1ba      	bne.n	80085e8 <__swsetup_r+0x30>
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	0781      	lsls	r1, r0, #30
 8008676:	bf58      	it	pl
 8008678:	6963      	ldrpl	r3, [r4, #20]
 800867a:	60a3      	str	r3, [r4, #8]
 800867c:	e7f4      	b.n	8008668 <__swsetup_r+0xb0>
 800867e:	2000      	movs	r0, #0
 8008680:	e7f7      	b.n	8008672 <__swsetup_r+0xba>
 8008682:	bf00      	nop
 8008684:	200000a4 	.word	0x200000a4
 8008688:	0800a3a4 	.word	0x0800a3a4
 800868c:	0800a3c4 	.word	0x0800a3c4
 8008690:	0800a384 	.word	0x0800a384

08008694 <__assert_func>:
 8008694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008696:	4614      	mov	r4, r2
 8008698:	461a      	mov	r2, r3
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <__assert_func+0x2c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4605      	mov	r5, r0
 80086a0:	68d8      	ldr	r0, [r3, #12]
 80086a2:	b14c      	cbz	r4, 80086b8 <__assert_func+0x24>
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <__assert_func+0x30>)
 80086a6:	9100      	str	r1, [sp, #0]
 80086a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086ac:	4906      	ldr	r1, [pc, #24]	; (80086c8 <__assert_func+0x34>)
 80086ae:	462b      	mov	r3, r5
 80086b0:	f000 f8e0 	bl	8008874 <fiprintf>
 80086b4:	f000 f9a5 	bl	8008a02 <abort>
 80086b8:	4b04      	ldr	r3, [pc, #16]	; (80086cc <__assert_func+0x38>)
 80086ba:	461c      	mov	r4, r3
 80086bc:	e7f3      	b.n	80086a6 <__assert_func+0x12>
 80086be:	bf00      	nop
 80086c0:	200000a4 	.word	0x200000a4
 80086c4:	0800a54d 	.word	0x0800a54d
 80086c8:	0800a55a 	.word	0x0800a55a
 80086cc:	0800a588 	.word	0x0800a588

080086d0 <_close_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d06      	ldr	r5, [pc, #24]	; (80086ec <_close_r+0x1c>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7fb fe46 	bl	800436c <_close>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_close_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_close_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000598 	.word	0x20000598

080086f0 <__sflush_r>:
 80086f0:	898a      	ldrh	r2, [r1, #12]
 80086f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	4605      	mov	r5, r0
 80086f8:	0710      	lsls	r0, r2, #28
 80086fa:	460c      	mov	r4, r1
 80086fc:	d458      	bmi.n	80087b0 <__sflush_r+0xc0>
 80086fe:	684b      	ldr	r3, [r1, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc05      	bgt.n	8008710 <__sflush_r+0x20>
 8008704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc02      	bgt.n	8008710 <__sflush_r+0x20>
 800870a:	2000      	movs	r0, #0
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008712:	2e00      	cmp	r6, #0
 8008714:	d0f9      	beq.n	800870a <__sflush_r+0x1a>
 8008716:	2300      	movs	r3, #0
 8008718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800871c:	682f      	ldr	r7, [r5, #0]
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	d032      	beq.n	8008788 <__sflush_r+0x98>
 8008722:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	075a      	lsls	r2, r3, #29
 8008728:	d505      	bpl.n	8008736 <__sflush_r+0x46>
 800872a:	6863      	ldr	r3, [r4, #4]
 800872c:	1ac0      	subs	r0, r0, r3
 800872e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008730:	b10b      	cbz	r3, 8008736 <__sflush_r+0x46>
 8008732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008734:	1ac0      	subs	r0, r0, r3
 8008736:	2300      	movs	r3, #0
 8008738:	4602      	mov	r2, r0
 800873a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800873c:	6a21      	ldr	r1, [r4, #32]
 800873e:	4628      	mov	r0, r5
 8008740:	47b0      	blx	r6
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	d106      	bne.n	8008756 <__sflush_r+0x66>
 8008748:	6829      	ldr	r1, [r5, #0]
 800874a:	291d      	cmp	r1, #29
 800874c:	d82c      	bhi.n	80087a8 <__sflush_r+0xb8>
 800874e:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <__sflush_r+0x108>)
 8008750:	40ca      	lsrs	r2, r1
 8008752:	07d6      	lsls	r6, r2, #31
 8008754:	d528      	bpl.n	80087a8 <__sflush_r+0xb8>
 8008756:	2200      	movs	r2, #0
 8008758:	6062      	str	r2, [r4, #4]
 800875a:	04d9      	lsls	r1, r3, #19
 800875c:	6922      	ldr	r2, [r4, #16]
 800875e:	6022      	str	r2, [r4, #0]
 8008760:	d504      	bpl.n	800876c <__sflush_r+0x7c>
 8008762:	1c42      	adds	r2, r0, #1
 8008764:	d101      	bne.n	800876a <__sflush_r+0x7a>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	b903      	cbnz	r3, 800876c <__sflush_r+0x7c>
 800876a:	6560      	str	r0, [r4, #84]	; 0x54
 800876c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800876e:	602f      	str	r7, [r5, #0]
 8008770:	2900      	cmp	r1, #0
 8008772:	d0ca      	beq.n	800870a <__sflush_r+0x1a>
 8008774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008778:	4299      	cmp	r1, r3
 800877a:	d002      	beq.n	8008782 <__sflush_r+0x92>
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff fc29 	bl	8007fd4 <_free_r>
 8008782:	2000      	movs	r0, #0
 8008784:	6360      	str	r0, [r4, #52]	; 0x34
 8008786:	e7c1      	b.n	800870c <__sflush_r+0x1c>
 8008788:	6a21      	ldr	r1, [r4, #32]
 800878a:	2301      	movs	r3, #1
 800878c:	4628      	mov	r0, r5
 800878e:	47b0      	blx	r6
 8008790:	1c41      	adds	r1, r0, #1
 8008792:	d1c7      	bne.n	8008724 <__sflush_r+0x34>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0c4      	beq.n	8008724 <__sflush_r+0x34>
 800879a:	2b1d      	cmp	r3, #29
 800879c:	d001      	beq.n	80087a2 <__sflush_r+0xb2>
 800879e:	2b16      	cmp	r3, #22
 80087a0:	d101      	bne.n	80087a6 <__sflush_r+0xb6>
 80087a2:	602f      	str	r7, [r5, #0]
 80087a4:	e7b1      	b.n	800870a <__sflush_r+0x1a>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	e7ad      	b.n	800870c <__sflush_r+0x1c>
 80087b0:	690f      	ldr	r7, [r1, #16]
 80087b2:	2f00      	cmp	r7, #0
 80087b4:	d0a9      	beq.n	800870a <__sflush_r+0x1a>
 80087b6:	0793      	lsls	r3, r2, #30
 80087b8:	680e      	ldr	r6, [r1, #0]
 80087ba:	bf08      	it	eq
 80087bc:	694b      	ldreq	r3, [r1, #20]
 80087be:	600f      	str	r7, [r1, #0]
 80087c0:	bf18      	it	ne
 80087c2:	2300      	movne	r3, #0
 80087c4:	eba6 0807 	sub.w	r8, r6, r7
 80087c8:	608b      	str	r3, [r1, #8]
 80087ca:	f1b8 0f00 	cmp.w	r8, #0
 80087ce:	dd9c      	ble.n	800870a <__sflush_r+0x1a>
 80087d0:	6a21      	ldr	r1, [r4, #32]
 80087d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087d4:	4643      	mov	r3, r8
 80087d6:	463a      	mov	r2, r7
 80087d8:	4628      	mov	r0, r5
 80087da:	47b0      	blx	r6
 80087dc:	2800      	cmp	r0, #0
 80087de:	dc06      	bgt.n	80087ee <__sflush_r+0xfe>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e78e      	b.n	800870c <__sflush_r+0x1c>
 80087ee:	4407      	add	r7, r0
 80087f0:	eba8 0800 	sub.w	r8, r8, r0
 80087f4:	e7e9      	b.n	80087ca <__sflush_r+0xda>
 80087f6:	bf00      	nop
 80087f8:	20400001 	.word	0x20400001

080087fc <_fflush_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	4605      	mov	r5, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b913      	cbnz	r3, 800880c <_fflush_r+0x10>
 8008806:	2500      	movs	r5, #0
 8008808:	4628      	mov	r0, r5
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	b118      	cbz	r0, 8008816 <_fflush_r+0x1a>
 800880e:	6983      	ldr	r3, [r0, #24]
 8008810:	b90b      	cbnz	r3, 8008816 <_fflush_r+0x1a>
 8008812:	f7fe ff97 	bl	8007744 <__sinit>
 8008816:	4b14      	ldr	r3, [pc, #80]	; (8008868 <_fflush_r+0x6c>)
 8008818:	429c      	cmp	r4, r3
 800881a:	d11b      	bne.n	8008854 <_fflush_r+0x58>
 800881c:	686c      	ldr	r4, [r5, #4]
 800881e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0ef      	beq.n	8008806 <_fflush_r+0xa>
 8008826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008828:	07d0      	lsls	r0, r2, #31
 800882a:	d404      	bmi.n	8008836 <_fflush_r+0x3a>
 800882c:	0599      	lsls	r1, r3, #22
 800882e:	d402      	bmi.n	8008836 <_fflush_r+0x3a>
 8008830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008832:	f7ff f82a 	bl	800788a <__retarget_lock_acquire_recursive>
 8008836:	4628      	mov	r0, r5
 8008838:	4621      	mov	r1, r4
 800883a:	f7ff ff59 	bl	80086f0 <__sflush_r>
 800883e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008840:	07da      	lsls	r2, r3, #31
 8008842:	4605      	mov	r5, r0
 8008844:	d4e0      	bmi.n	8008808 <_fflush_r+0xc>
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	059b      	lsls	r3, r3, #22
 800884a:	d4dd      	bmi.n	8008808 <_fflush_r+0xc>
 800884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884e:	f7ff f81d 	bl	800788c <__retarget_lock_release_recursive>
 8008852:	e7d9      	b.n	8008808 <_fflush_r+0xc>
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <_fflush_r+0x70>)
 8008856:	429c      	cmp	r4, r3
 8008858:	d101      	bne.n	800885e <_fflush_r+0x62>
 800885a:	68ac      	ldr	r4, [r5, #8]
 800885c:	e7df      	b.n	800881e <_fflush_r+0x22>
 800885e:	4b04      	ldr	r3, [pc, #16]	; (8008870 <_fflush_r+0x74>)
 8008860:	429c      	cmp	r4, r3
 8008862:	bf08      	it	eq
 8008864:	68ec      	ldreq	r4, [r5, #12]
 8008866:	e7da      	b.n	800881e <_fflush_r+0x22>
 8008868:	0800a3a4 	.word	0x0800a3a4
 800886c:	0800a3c4 	.word	0x0800a3c4
 8008870:	0800a384 	.word	0x0800a384

08008874 <fiprintf>:
 8008874:	b40e      	push	{r1, r2, r3}
 8008876:	b503      	push	{r0, r1, lr}
 8008878:	4601      	mov	r1, r0
 800887a:	ab03      	add	r3, sp, #12
 800887c:	4805      	ldr	r0, [pc, #20]	; (8008894 <fiprintf+0x20>)
 800887e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008882:	6800      	ldr	r0, [r0, #0]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	f7ff fcaf 	bl	80081e8 <_vfiprintf_r>
 800888a:	b002      	add	sp, #8
 800888c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008890:	b003      	add	sp, #12
 8008892:	4770      	bx	lr
 8008894:	200000a4 	.word	0x200000a4

08008898 <_lseek_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d07      	ldr	r5, [pc, #28]	; (80088b8 <_lseek_r+0x20>)
 800889c:	4604      	mov	r4, r0
 800889e:	4608      	mov	r0, r1
 80088a0:	4611      	mov	r1, r2
 80088a2:	2200      	movs	r2, #0
 80088a4:	602a      	str	r2, [r5, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f7fb fd87 	bl	80043ba <_lseek>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_lseek_r+0x1e>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_lseek_r+0x1e>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	20000598 	.word	0x20000598

080088bc <__swhatbuf_r>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	460e      	mov	r6, r1
 80088c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c4:	2900      	cmp	r1, #0
 80088c6:	b096      	sub	sp, #88	; 0x58
 80088c8:	4614      	mov	r4, r2
 80088ca:	461d      	mov	r5, r3
 80088cc:	da08      	bge.n	80088e0 <__swhatbuf_r+0x24>
 80088ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	602a      	str	r2, [r5, #0]
 80088d6:	061a      	lsls	r2, r3, #24
 80088d8:	d410      	bmi.n	80088fc <__swhatbuf_r+0x40>
 80088da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088de:	e00e      	b.n	80088fe <__swhatbuf_r+0x42>
 80088e0:	466a      	mov	r2, sp
 80088e2:	f000 f895 	bl	8008a10 <_fstat_r>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	dbf1      	blt.n	80088ce <__swhatbuf_r+0x12>
 80088ea:	9a01      	ldr	r2, [sp, #4]
 80088ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088f4:	425a      	negs	r2, r3
 80088f6:	415a      	adcs	r2, r3
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	e7ee      	b.n	80088da <__swhatbuf_r+0x1e>
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	2000      	movs	r0, #0
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	b016      	add	sp, #88	; 0x58
 8008904:	bd70      	pop	{r4, r5, r6, pc}
	...

08008908 <__smakebuf_r>:
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800890c:	079d      	lsls	r5, r3, #30
 800890e:	4606      	mov	r6, r0
 8008910:	460c      	mov	r4, r1
 8008912:	d507      	bpl.n	8008924 <__smakebuf_r+0x1c>
 8008914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	2301      	movs	r3, #1
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	b002      	add	sp, #8
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	ab01      	add	r3, sp, #4
 8008926:	466a      	mov	r2, sp
 8008928:	f7ff ffc8 	bl	80088bc <__swhatbuf_r>
 800892c:	9900      	ldr	r1, [sp, #0]
 800892e:	4605      	mov	r5, r0
 8008930:	4630      	mov	r0, r6
 8008932:	f7ff fbbb 	bl	80080ac <_malloc_r>
 8008936:	b948      	cbnz	r0, 800894c <__smakebuf_r+0x44>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	059a      	lsls	r2, r3, #22
 800893e:	d4ef      	bmi.n	8008920 <__smakebuf_r+0x18>
 8008940:	f023 0303 	bic.w	r3, r3, #3
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	e7e3      	b.n	8008914 <__smakebuf_r+0xc>
 800894c:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <__smakebuf_r+0x7c>)
 800894e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	9b00      	ldr	r3, [sp, #0]
 800895c:	6163      	str	r3, [r4, #20]
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	6120      	str	r0, [r4, #16]
 8008962:	b15b      	cbz	r3, 800897c <__smakebuf_r+0x74>
 8008964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008968:	4630      	mov	r0, r6
 800896a:	f000 f863 	bl	8008a34 <_isatty_r>
 800896e:	b128      	cbz	r0, 800897c <__smakebuf_r+0x74>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	89a0      	ldrh	r0, [r4, #12]
 800897e:	4305      	orrs	r5, r0
 8008980:	81a5      	strh	r5, [r4, #12]
 8008982:	e7cd      	b.n	8008920 <__smakebuf_r+0x18>
 8008984:	080076dd 	.word	0x080076dd

08008988 <__ascii_mbtowc>:
 8008988:	b082      	sub	sp, #8
 800898a:	b901      	cbnz	r1, 800898e <__ascii_mbtowc+0x6>
 800898c:	a901      	add	r1, sp, #4
 800898e:	b142      	cbz	r2, 80089a2 <__ascii_mbtowc+0x1a>
 8008990:	b14b      	cbz	r3, 80089a6 <__ascii_mbtowc+0x1e>
 8008992:	7813      	ldrb	r3, [r2, #0]
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	7812      	ldrb	r2, [r2, #0]
 8008998:	1e10      	subs	r0, r2, #0
 800899a:	bf18      	it	ne
 800899c:	2001      	movne	r0, #1
 800899e:	b002      	add	sp, #8
 80089a0:	4770      	bx	lr
 80089a2:	4610      	mov	r0, r2
 80089a4:	e7fb      	b.n	800899e <__ascii_mbtowc+0x16>
 80089a6:	f06f 0001 	mvn.w	r0, #1
 80089aa:	e7f8      	b.n	800899e <__ascii_mbtowc+0x16>

080089ac <__malloc_lock>:
 80089ac:	4801      	ldr	r0, [pc, #4]	; (80089b4 <__malloc_lock+0x8>)
 80089ae:	f7fe bf6c 	b.w	800788a <__retarget_lock_acquire_recursive>
 80089b2:	bf00      	nop
 80089b4:	2000058c 	.word	0x2000058c

080089b8 <__malloc_unlock>:
 80089b8:	4801      	ldr	r0, [pc, #4]	; (80089c0 <__malloc_unlock+0x8>)
 80089ba:	f7fe bf67 	b.w	800788c <__retarget_lock_release_recursive>
 80089be:	bf00      	nop
 80089c0:	2000058c 	.word	0x2000058c

080089c4 <_read_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d07      	ldr	r5, [pc, #28]	; (80089e4 <_read_r+0x20>)
 80089c8:	4604      	mov	r4, r0
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	2200      	movs	r2, #0
 80089d0:	602a      	str	r2, [r5, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	f7fb fcad 	bl	8004332 <_read>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d102      	bne.n	80089e2 <_read_r+0x1e>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	b103      	cbz	r3, 80089e2 <_read_r+0x1e>
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	20000598 	.word	0x20000598

080089e8 <__ascii_wctomb>:
 80089e8:	b149      	cbz	r1, 80089fe <__ascii_wctomb+0x16>
 80089ea:	2aff      	cmp	r2, #255	; 0xff
 80089ec:	bf85      	ittet	hi
 80089ee:	238a      	movhi	r3, #138	; 0x8a
 80089f0:	6003      	strhi	r3, [r0, #0]
 80089f2:	700a      	strbls	r2, [r1, #0]
 80089f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80089f8:	bf98      	it	ls
 80089fa:	2001      	movls	r0, #1
 80089fc:	4770      	bx	lr
 80089fe:	4608      	mov	r0, r1
 8008a00:	4770      	bx	lr

08008a02 <abort>:
 8008a02:	b508      	push	{r3, lr}
 8008a04:	2006      	movs	r0, #6
 8008a06:	f000 f84d 	bl	8008aa4 <raise>
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	f7fb fc87 	bl	800431e <_exit>

08008a10 <_fstat_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	; (8008a30 <_fstat_r+0x20>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	602b      	str	r3, [r5, #0]
 8008a1e:	f7fb fcb1 	bl	8004384 <_fstat>
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	d102      	bne.n	8008a2c <_fstat_r+0x1c>
 8008a26:	682b      	ldr	r3, [r5, #0]
 8008a28:	b103      	cbz	r3, 8008a2c <_fstat_r+0x1c>
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000598 	.word	0x20000598

08008a34 <_isatty_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d06      	ldr	r5, [pc, #24]	; (8008a50 <_isatty_r+0x1c>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	f7fb fcb0 	bl	80043a4 <_isatty>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_isatty_r+0x1a>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_isatty_r+0x1a>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20000598 	.word	0x20000598

08008a54 <_raise_r>:
 8008a54:	291f      	cmp	r1, #31
 8008a56:	b538      	push	{r3, r4, r5, lr}
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	d904      	bls.n	8008a68 <_raise_r+0x14>
 8008a5e:	2316      	movs	r3, #22
 8008a60:	6003      	str	r3, [r0, #0]
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a6a:	b112      	cbz	r2, 8008a72 <_raise_r+0x1e>
 8008a6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a70:	b94b      	cbnz	r3, 8008a86 <_raise_r+0x32>
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 f830 	bl	8008ad8 <_getpid_r>
 8008a78:	462a      	mov	r2, r5
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a82:	f000 b817 	b.w	8008ab4 <_kill_r>
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d00a      	beq.n	8008aa0 <_raise_r+0x4c>
 8008a8a:	1c59      	adds	r1, r3, #1
 8008a8c:	d103      	bne.n	8008a96 <_raise_r+0x42>
 8008a8e:	2316      	movs	r3, #22
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	2001      	movs	r0, #1
 8008a94:	e7e7      	b.n	8008a66 <_raise_r+0x12>
 8008a96:	2400      	movs	r4, #0
 8008a98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	4798      	blx	r3
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e7e0      	b.n	8008a66 <_raise_r+0x12>

08008aa4 <raise>:
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <raise+0xc>)
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	f7ff bfd3 	b.w	8008a54 <_raise_r>
 8008aae:	bf00      	nop
 8008ab0:	200000a4 	.word	0x200000a4

08008ab4 <_kill_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d07      	ldr	r5, [pc, #28]	; (8008ad4 <_kill_r+0x20>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	f7fb fc1c 	bl	80042fe <_kill>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d102      	bne.n	8008ad0 <_kill_r+0x1c>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	b103      	cbz	r3, 8008ad0 <_kill_r+0x1c>
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	bd38      	pop	{r3, r4, r5, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20000598 	.word	0x20000598

08008ad8 <_getpid_r>:
 8008ad8:	f7fb bc09 	b.w	80042ee <_getpid>
 8008adc:	0000      	movs	r0, r0
	...

08008ae0 <sin>:
 8008ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ae2:	ec53 2b10 	vmov	r2, r3, d0
 8008ae6:	4828      	ldr	r0, [pc, #160]	; (8008b88 <sin+0xa8>)
 8008ae8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008aec:	4281      	cmp	r1, r0
 8008aee:	dc07      	bgt.n	8008b00 <sin+0x20>
 8008af0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008b80 <sin+0xa0>
 8008af4:	2000      	movs	r0, #0
 8008af6:	b005      	add	sp, #20
 8008af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008afc:	f001 b994 	b.w	8009e28 <__kernel_sin>
 8008b00:	4822      	ldr	r0, [pc, #136]	; (8008b8c <sin+0xac>)
 8008b02:	4281      	cmp	r1, r0
 8008b04:	dd09      	ble.n	8008b1a <sin+0x3a>
 8008b06:	ee10 0a10 	vmov	r0, s0
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	f7f7 fbc4 	bl	8000298 <__aeabi_dsub>
 8008b10:	ec41 0b10 	vmov	d0, r0, r1
 8008b14:	b005      	add	sp, #20
 8008b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b1a:	4668      	mov	r0, sp
 8008b1c:	f000 faac 	bl	8009078 <__ieee754_rem_pio2>
 8008b20:	f000 0003 	and.w	r0, r0, #3
 8008b24:	2801      	cmp	r0, #1
 8008b26:	d00c      	beq.n	8008b42 <sin+0x62>
 8008b28:	2802      	cmp	r0, #2
 8008b2a:	d011      	beq.n	8008b50 <sin+0x70>
 8008b2c:	b9f0      	cbnz	r0, 8008b6c <sin+0x8c>
 8008b2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b32:	ed9d 0b00 	vldr	d0, [sp]
 8008b36:	2001      	movs	r0, #1
 8008b38:	f001 f976 	bl	8009e28 <__kernel_sin>
 8008b3c:	ec51 0b10 	vmov	r0, r1, d0
 8008b40:	e7e6      	b.n	8008b10 <sin+0x30>
 8008b42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b46:	ed9d 0b00 	vldr	d0, [sp]
 8008b4a:	f000 fd55 	bl	80095f8 <__kernel_cos>
 8008b4e:	e7f5      	b.n	8008b3c <sin+0x5c>
 8008b50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b54:	ed9d 0b00 	vldr	d0, [sp]
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f001 f965 	bl	8009e28 <__kernel_sin>
 8008b5e:	ec53 2b10 	vmov	r2, r3, d0
 8008b62:	ee10 0a10 	vmov	r0, s0
 8008b66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b6a:	e7d1      	b.n	8008b10 <sin+0x30>
 8008b6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b70:	ed9d 0b00 	vldr	d0, [sp]
 8008b74:	f000 fd40 	bl	80095f8 <__kernel_cos>
 8008b78:	e7f1      	b.n	8008b5e <sin+0x7e>
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w
	...
 8008b88:	3fe921fb 	.word	0x3fe921fb
 8008b8c:	7fefffff 	.word	0x7fefffff

08008b90 <asin>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	ed2d 8b02 	vpush	{d8}
 8008b96:	ec55 4b10 	vmov	r4, r5, d0
 8008b9a:	f000 f859 	bl	8008c50 <__ieee754_asin>
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	eeb0 8a40 	vmov.f32	s16, s0
 8008baa:	eef0 8a60 	vmov.f32	s17, s1
 8008bae:	f7f7 ffc5 	bl	8000b3c <__aeabi_dcmpun>
 8008bb2:	b9a8      	cbnz	r0, 8008be0 <asin+0x50>
 8008bb4:	ec45 4b10 	vmov	d0, r4, r5
 8008bb8:	f001 f9f4 	bl	8009fa4 <fabs>
 8008bbc:	4b0c      	ldr	r3, [pc, #48]	; (8008bf0 <asin+0x60>)
 8008bbe:	ec51 0b10 	vmov	r0, r1, d0
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f7f7 ffb0 	bl	8000b28 <__aeabi_dcmpgt>
 8008bc8:	b150      	cbz	r0, 8008be0 <asin+0x50>
 8008bca:	f7fd fa25 	bl	8006018 <__errno>
 8008bce:	ecbd 8b02 	vpop	{d8}
 8008bd2:	2321      	movs	r3, #33	; 0x21
 8008bd4:	6003      	str	r3, [r0, #0]
 8008bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bda:	4806      	ldr	r0, [pc, #24]	; (8008bf4 <asin+0x64>)
 8008bdc:	f001 ba6c 	b.w	800a0b8 <nan>
 8008be0:	eeb0 0a48 	vmov.f32	s0, s16
 8008be4:	eef0 0a68 	vmov.f32	s1, s17
 8008be8:	ecbd 8b02 	vpop	{d8}
 8008bec:	bd38      	pop	{r3, r4, r5, pc}
 8008bee:	bf00      	nop
 8008bf0:	3ff00000 	.word	0x3ff00000
 8008bf4:	0800a588 	.word	0x0800a588

08008bf8 <sqrt>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	ed2d 8b02 	vpush	{d8}
 8008bfe:	ec55 4b10 	vmov	r4, r5, d0
 8008c02:	f000 fc45 	bl	8009490 <__ieee754_sqrt>
 8008c06:	4622      	mov	r2, r4
 8008c08:	462b      	mov	r3, r5
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	eeb0 8a40 	vmov.f32	s16, s0
 8008c12:	eef0 8a60 	vmov.f32	s17, s1
 8008c16:	f7f7 ff91 	bl	8000b3c <__aeabi_dcmpun>
 8008c1a:	b990      	cbnz	r0, 8008c42 <sqrt+0x4a>
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4620      	mov	r0, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7f7 ff62 	bl	8000aec <__aeabi_dcmplt>
 8008c28:	b158      	cbz	r0, 8008c42 <sqrt+0x4a>
 8008c2a:	f7fd f9f5 	bl	8006018 <__errno>
 8008c2e:	2321      	movs	r3, #33	; 0x21
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	2300      	movs	r3, #0
 8008c36:	4610      	mov	r0, r2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f7f7 fe0f 	bl	800085c <__aeabi_ddiv>
 8008c3e:	ec41 0b18 	vmov	d8, r0, r1
 8008c42:	eeb0 0a48 	vmov.f32	s0, s16
 8008c46:	eef0 0a68 	vmov.f32	s1, s17
 8008c4a:	ecbd 8b02 	vpop	{d8}
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}

08008c50 <__ieee754_asin>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	ed2d 8b04 	vpush	{d8-d9}
 8008c58:	ec55 4b10 	vmov	r4, r5, d0
 8008c5c:	4bcc      	ldr	r3, [pc, #816]	; (8008f90 <__ieee754_asin+0x340>)
 8008c5e:	b083      	sub	sp, #12
 8008c60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008c64:	4598      	cmp	r8, r3
 8008c66:	9501      	str	r5, [sp, #4]
 8008c68:	dd35      	ble.n	8008cd6 <__ieee754_asin+0x86>
 8008c6a:	ee10 3a10 	vmov	r3, s0
 8008c6e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8008c72:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8008c76:	ea58 0303 	orrs.w	r3, r8, r3
 8008c7a:	d117      	bne.n	8008cac <__ieee754_asin+0x5c>
 8008c7c:	a3aa      	add	r3, pc, #680	; (adr r3, 8008f28 <__ieee754_asin+0x2d8>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	ee10 0a10 	vmov	r0, s0
 8008c86:	4629      	mov	r1, r5
 8008c88:	f7f7 fcbe 	bl	8000608 <__aeabi_dmul>
 8008c8c:	a3a8      	add	r3, pc, #672	; (adr r3, 8008f30 <__ieee754_asin+0x2e0>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	4606      	mov	r6, r0
 8008c94:	460f      	mov	r7, r1
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 fcb5 	bl	8000608 <__aeabi_dmul>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 faf9 	bl	800029c <__adddf3>
 8008caa:	e00b      	b.n	8008cc4 <__ieee754_asin+0x74>
 8008cac:	ee10 2a10 	vmov	r2, s0
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	ee10 0a10 	vmov	r0, s0
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 faee 	bl	8000298 <__aeabi_dsub>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	f7f7 fdcc 	bl	800085c <__aeabi_ddiv>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	460d      	mov	r5, r1
 8008cc8:	ec45 4b10 	vmov	d0, r4, r5
 8008ccc:	b003      	add	sp, #12
 8008cce:	ecbd 8b04 	vpop	{d8-d9}
 8008cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd6:	4baf      	ldr	r3, [pc, #700]	; (8008f94 <__ieee754_asin+0x344>)
 8008cd8:	4598      	cmp	r8, r3
 8008cda:	dc11      	bgt.n	8008d00 <__ieee754_asin+0xb0>
 8008cdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008ce0:	f280 80ae 	bge.w	8008e40 <__ieee754_asin+0x1f0>
 8008ce4:	a394      	add	r3, pc, #592	; (adr r3, 8008f38 <__ieee754_asin+0x2e8>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	ee10 0a10 	vmov	r0, s0
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f7f7 fad4 	bl	800029c <__adddf3>
 8008cf4:	4ba8      	ldr	r3, [pc, #672]	; (8008f98 <__ieee754_asin+0x348>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f7f7 ff16 	bl	8000b28 <__aeabi_dcmpgt>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1e3      	bne.n	8008cc8 <__ieee754_asin+0x78>
 8008d00:	ec45 4b10 	vmov	d0, r4, r5
 8008d04:	f001 f94e 	bl	8009fa4 <fabs>
 8008d08:	49a3      	ldr	r1, [pc, #652]	; (8008f98 <__ieee754_asin+0x348>)
 8008d0a:	ec53 2b10 	vmov	r2, r3, d0
 8008d0e:	2000      	movs	r0, #0
 8008d10:	f7f7 fac2 	bl	8000298 <__aeabi_dsub>
 8008d14:	4ba1      	ldr	r3, [pc, #644]	; (8008f9c <__ieee754_asin+0x34c>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	f7f7 fc76 	bl	8000608 <__aeabi_dmul>
 8008d1c:	a388      	add	r3, pc, #544	; (adr r3, 8008f40 <__ieee754_asin+0x2f0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	4604      	mov	r4, r0
 8008d24:	460d      	mov	r5, r1
 8008d26:	f7f7 fc6f 	bl	8000608 <__aeabi_dmul>
 8008d2a:	a387      	add	r3, pc, #540	; (adr r3, 8008f48 <__ieee754_asin+0x2f8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fab4 	bl	800029c <__adddf3>
 8008d34:	4622      	mov	r2, r4
 8008d36:	462b      	mov	r3, r5
 8008d38:	f7f7 fc66 	bl	8000608 <__aeabi_dmul>
 8008d3c:	a384      	add	r3, pc, #528	; (adr r3, 8008f50 <__ieee754_asin+0x300>)
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	f7f7 faa9 	bl	8000298 <__aeabi_dsub>
 8008d46:	4622      	mov	r2, r4
 8008d48:	462b      	mov	r3, r5
 8008d4a:	f7f7 fc5d 	bl	8000608 <__aeabi_dmul>
 8008d4e:	a382      	add	r3, pc, #520	; (adr r3, 8008f58 <__ieee754_asin+0x308>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 faa2 	bl	800029c <__adddf3>
 8008d58:	4622      	mov	r2, r4
 8008d5a:	462b      	mov	r3, r5
 8008d5c:	f7f7 fc54 	bl	8000608 <__aeabi_dmul>
 8008d60:	a37f      	add	r3, pc, #508	; (adr r3, 8008f60 <__ieee754_asin+0x310>)
 8008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d66:	f7f7 fa97 	bl	8000298 <__aeabi_dsub>
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	f7f7 fc4b 	bl	8000608 <__aeabi_dmul>
 8008d72:	a37d      	add	r3, pc, #500	; (adr r3, 8008f68 <__ieee754_asin+0x318>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 fa90 	bl	800029c <__adddf3>
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	462b      	mov	r3, r5
 8008d80:	f7f7 fc42 	bl	8000608 <__aeabi_dmul>
 8008d84:	a37a      	add	r3, pc, #488	; (adr r3, 8008f70 <__ieee754_asin+0x320>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	ec41 0b18 	vmov	d8, r0, r1
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7f7 fc39 	bl	8000608 <__aeabi_dmul>
 8008d96:	a378      	add	r3, pc, #480	; (adr r3, 8008f78 <__ieee754_asin+0x328>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 fa7c 	bl	8000298 <__aeabi_dsub>
 8008da0:	4622      	mov	r2, r4
 8008da2:	462b      	mov	r3, r5
 8008da4:	f7f7 fc30 	bl	8000608 <__aeabi_dmul>
 8008da8:	a375      	add	r3, pc, #468	; (adr r3, 8008f80 <__ieee754_asin+0x330>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fa75 	bl	800029c <__adddf3>
 8008db2:	4622      	mov	r2, r4
 8008db4:	462b      	mov	r3, r5
 8008db6:	f7f7 fc27 	bl	8000608 <__aeabi_dmul>
 8008dba:	a373      	add	r3, pc, #460	; (adr r3, 8008f88 <__ieee754_asin+0x338>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	f7f7 fa6a 	bl	8000298 <__aeabi_dsub>
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	462b      	mov	r3, r5
 8008dc8:	f7f7 fc1e 	bl	8000608 <__aeabi_dmul>
 8008dcc:	4b72      	ldr	r3, [pc, #456]	; (8008f98 <__ieee754_asin+0x348>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f7f7 fa64 	bl	800029c <__adddf3>
 8008dd4:	ec45 4b10 	vmov	d0, r4, r5
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460f      	mov	r7, r1
 8008ddc:	f000 fb58 	bl	8009490 <__ieee754_sqrt>
 8008de0:	4b6f      	ldr	r3, [pc, #444]	; (8008fa0 <__ieee754_asin+0x350>)
 8008de2:	4598      	cmp	r8, r3
 8008de4:	ec5b ab10 	vmov	sl, fp, d0
 8008de8:	f340 80dc 	ble.w	8008fa4 <__ieee754_asin+0x354>
 8008dec:	4632      	mov	r2, r6
 8008dee:	463b      	mov	r3, r7
 8008df0:	ec51 0b18 	vmov	r0, r1, d8
 8008df4:	f7f7 fd32 	bl	800085c <__aeabi_ddiv>
 8008df8:	4652      	mov	r2, sl
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	f7f7 fc04 	bl	8000608 <__aeabi_dmul>
 8008e00:	4652      	mov	r2, sl
 8008e02:	465b      	mov	r3, fp
 8008e04:	f7f7 fa4a 	bl	800029c <__adddf3>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	f7f7 fa46 	bl	800029c <__adddf3>
 8008e10:	a347      	add	r3, pc, #284	; (adr r3, 8008f30 <__ieee754_asin+0x2e0>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fa3f 	bl	8000298 <__aeabi_dsub>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	a142      	add	r1, pc, #264	; (adr r1, 8008f28 <__ieee754_asin+0x2d8>)
 8008e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e24:	f7f7 fa38 	bl	8000298 <__aeabi_dsub>
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bfdc      	itt	le
 8008e2e:	4602      	movle	r2, r0
 8008e30:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	bfdc      	itt	le
 8008e3a:	4614      	movle	r4, r2
 8008e3c:	461d      	movle	r5, r3
 8008e3e:	e743      	b.n	8008cc8 <__ieee754_asin+0x78>
 8008e40:	ee10 2a10 	vmov	r2, s0
 8008e44:	ee10 0a10 	vmov	r0, s0
 8008e48:	462b      	mov	r3, r5
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	f7f7 fbdc 	bl	8000608 <__aeabi_dmul>
 8008e50:	a33b      	add	r3, pc, #236	; (adr r3, 8008f40 <__ieee754_asin+0x2f0>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	f7f7 fbd5 	bl	8000608 <__aeabi_dmul>
 8008e5e:	a33a      	add	r3, pc, #232	; (adr r3, 8008f48 <__ieee754_asin+0x2f8>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f7f7 fa1a 	bl	800029c <__adddf3>
 8008e68:	4632      	mov	r2, r6
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	f7f7 fbcc 	bl	8000608 <__aeabi_dmul>
 8008e70:	a337      	add	r3, pc, #220	; (adr r3, 8008f50 <__ieee754_asin+0x300>)
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f7f7 fa0f 	bl	8000298 <__aeabi_dsub>
 8008e7a:	4632      	mov	r2, r6
 8008e7c:	463b      	mov	r3, r7
 8008e7e:	f7f7 fbc3 	bl	8000608 <__aeabi_dmul>
 8008e82:	a335      	add	r3, pc, #212	; (adr r3, 8008f58 <__ieee754_asin+0x308>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f7f7 fa08 	bl	800029c <__adddf3>
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	463b      	mov	r3, r7
 8008e90:	f7f7 fbba 	bl	8000608 <__aeabi_dmul>
 8008e94:	a332      	add	r3, pc, #200	; (adr r3, 8008f60 <__ieee754_asin+0x310>)
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 f9fd 	bl	8000298 <__aeabi_dsub>
 8008e9e:	4632      	mov	r2, r6
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	f7f7 fbb1 	bl	8000608 <__aeabi_dmul>
 8008ea6:	a330      	add	r3, pc, #192	; (adr r3, 8008f68 <__ieee754_asin+0x318>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 f9f6 	bl	800029c <__adddf3>
 8008eb0:	4632      	mov	r2, r6
 8008eb2:	463b      	mov	r3, r7
 8008eb4:	f7f7 fba8 	bl	8000608 <__aeabi_dmul>
 8008eb8:	a32d      	add	r3, pc, #180	; (adr r3, 8008f70 <__ieee754_asin+0x320>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	4689      	mov	r9, r1
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	f7f7 fb9f 	bl	8000608 <__aeabi_dmul>
 8008eca:	a32b      	add	r3, pc, #172	; (adr r3, 8008f78 <__ieee754_asin+0x328>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f7f7 f9e2 	bl	8000298 <__aeabi_dsub>
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	f7f7 fb96 	bl	8000608 <__aeabi_dmul>
 8008edc:	a328      	add	r3, pc, #160	; (adr r3, 8008f80 <__ieee754_asin+0x330>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f9db 	bl	800029c <__adddf3>
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	463b      	mov	r3, r7
 8008eea:	f7f7 fb8d 	bl	8000608 <__aeabi_dmul>
 8008eee:	a326      	add	r3, pc, #152	; (adr r3, 8008f88 <__ieee754_asin+0x338>)
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 f9d0 	bl	8000298 <__aeabi_dsub>
 8008ef8:	4632      	mov	r2, r6
 8008efa:	463b      	mov	r3, r7
 8008efc:	f7f7 fb84 	bl	8000608 <__aeabi_dmul>
 8008f00:	4b25      	ldr	r3, [pc, #148]	; (8008f98 <__ieee754_asin+0x348>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	f7f7 f9ca 	bl	800029c <__adddf3>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4640      	mov	r0, r8
 8008f0e:	4649      	mov	r1, r9
 8008f10:	f7f7 fca4 	bl	800085c <__aeabi_ddiv>
 8008f14:	4622      	mov	r2, r4
 8008f16:	462b      	mov	r3, r5
 8008f18:	f7f7 fb76 	bl	8000608 <__aeabi_dmul>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4620      	mov	r0, r4
 8008f22:	4629      	mov	r1, r5
 8008f24:	e6bf      	b.n	8008ca6 <__ieee754_asin+0x56>
 8008f26:	bf00      	nop
 8008f28:	54442d18 	.word	0x54442d18
 8008f2c:	3ff921fb 	.word	0x3ff921fb
 8008f30:	33145c07 	.word	0x33145c07
 8008f34:	3c91a626 	.word	0x3c91a626
 8008f38:	8800759c 	.word	0x8800759c
 8008f3c:	7e37e43c 	.word	0x7e37e43c
 8008f40:	0dfdf709 	.word	0x0dfdf709
 8008f44:	3f023de1 	.word	0x3f023de1
 8008f48:	7501b288 	.word	0x7501b288
 8008f4c:	3f49efe0 	.word	0x3f49efe0
 8008f50:	b5688f3b 	.word	0xb5688f3b
 8008f54:	3fa48228 	.word	0x3fa48228
 8008f58:	0e884455 	.word	0x0e884455
 8008f5c:	3fc9c155 	.word	0x3fc9c155
 8008f60:	03eb6f7d 	.word	0x03eb6f7d
 8008f64:	3fd4d612 	.word	0x3fd4d612
 8008f68:	55555555 	.word	0x55555555
 8008f6c:	3fc55555 	.word	0x3fc55555
 8008f70:	b12e9282 	.word	0xb12e9282
 8008f74:	3fb3b8c5 	.word	0x3fb3b8c5
 8008f78:	1b8d0159 	.word	0x1b8d0159
 8008f7c:	3fe6066c 	.word	0x3fe6066c
 8008f80:	9c598ac8 	.word	0x9c598ac8
 8008f84:	40002ae5 	.word	0x40002ae5
 8008f88:	1c8a2d4b 	.word	0x1c8a2d4b
 8008f8c:	40033a27 	.word	0x40033a27
 8008f90:	3fefffff 	.word	0x3fefffff
 8008f94:	3fdfffff 	.word	0x3fdfffff
 8008f98:	3ff00000 	.word	0x3ff00000
 8008f9c:	3fe00000 	.word	0x3fe00000
 8008fa0:	3fef3332 	.word	0x3fef3332
 8008fa4:	ee10 2a10 	vmov	r2, s0
 8008fa8:	ee10 0a10 	vmov	r0, s0
 8008fac:	465b      	mov	r3, fp
 8008fae:	4659      	mov	r1, fp
 8008fb0:	f7f7 f974 	bl	800029c <__adddf3>
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	ec41 0b19 	vmov	d9, r0, r1
 8008fbc:	ec51 0b18 	vmov	r0, r1, d8
 8008fc0:	f7f7 fc4c 	bl	800085c <__aeabi_ddiv>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	ec51 0b19 	vmov	r0, r1, d9
 8008fcc:	f7f7 fb1c 	bl	8000608 <__aeabi_dmul>
 8008fd0:	f04f 0800 	mov.w	r8, #0
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	4642      	mov	r2, r8
 8008fda:	465b      	mov	r3, fp
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4659      	mov	r1, fp
 8008fe0:	f7f7 fb12 	bl	8000608 <__aeabi_dmul>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4620      	mov	r0, r4
 8008fea:	4629      	mov	r1, r5
 8008fec:	f7f7 f954 	bl	8000298 <__aeabi_dsub>
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	465b      	mov	r3, fp
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	4659      	mov	r1, fp
 8008ffc:	f7f7 f94e 	bl	800029c <__adddf3>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4620      	mov	r0, r4
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 fc28 	bl	800085c <__aeabi_ddiv>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	f7f7 f944 	bl	800029c <__adddf3>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	a113      	add	r1, pc, #76	; (adr r1, 8009068 <__ieee754_asin+0x418>)
 800901a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800901e:	f7f7 f93b 	bl	8000298 <__aeabi_dsub>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4630      	mov	r0, r6
 8009028:	4639      	mov	r1, r7
 800902a:	f7f7 f935 	bl	8000298 <__aeabi_dsub>
 800902e:	4642      	mov	r2, r8
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	465b      	mov	r3, fp
 8009036:	4640      	mov	r0, r8
 8009038:	4659      	mov	r1, fp
 800903a:	f7f7 f92f 	bl	800029c <__adddf3>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	a10b      	add	r1, pc, #44	; (adr r1, 8009070 <__ieee754_asin+0x420>)
 8009044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009048:	f7f7 f926 	bl	8000298 <__aeabi_dsub>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 f920 	bl	8000298 <__aeabi_dsub>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	a104      	add	r1, pc, #16	; (adr r1, 8009070 <__ieee754_asin+0x420>)
 800905e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009062:	e6df      	b.n	8008e24 <__ieee754_asin+0x1d4>
 8009064:	f3af 8000 	nop.w
 8009068:	33145c07 	.word	0x33145c07
 800906c:	3c91a626 	.word	0x3c91a626
 8009070:	54442d18 	.word	0x54442d18
 8009074:	3fe921fb 	.word	0x3fe921fb

08009078 <__ieee754_rem_pio2>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	ed2d 8b02 	vpush	{d8}
 8009080:	ec55 4b10 	vmov	r4, r5, d0
 8009084:	4bca      	ldr	r3, [pc, #808]	; (80093b0 <__ieee754_rem_pio2+0x338>)
 8009086:	b08b      	sub	sp, #44	; 0x2c
 8009088:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800908c:	4598      	cmp	r8, r3
 800908e:	4682      	mov	sl, r0
 8009090:	9502      	str	r5, [sp, #8]
 8009092:	dc08      	bgt.n	80090a6 <__ieee754_rem_pio2+0x2e>
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	ed80 0b00 	vstr	d0, [r0]
 800909c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80090a0:	f04f 0b00 	mov.w	fp, #0
 80090a4:	e028      	b.n	80090f8 <__ieee754_rem_pio2+0x80>
 80090a6:	4bc3      	ldr	r3, [pc, #780]	; (80093b4 <__ieee754_rem_pio2+0x33c>)
 80090a8:	4598      	cmp	r8, r3
 80090aa:	dc78      	bgt.n	800919e <__ieee754_rem_pio2+0x126>
 80090ac:	9b02      	ldr	r3, [sp, #8]
 80090ae:	4ec2      	ldr	r6, [pc, #776]	; (80093b8 <__ieee754_rem_pio2+0x340>)
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	ee10 0a10 	vmov	r0, s0
 80090b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009378 <__ieee754_rem_pio2+0x300>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	4629      	mov	r1, r5
 80090be:	dd39      	ble.n	8009134 <__ieee754_rem_pio2+0xbc>
 80090c0:	f7f7 f8ea 	bl	8000298 <__aeabi_dsub>
 80090c4:	45b0      	cmp	r8, r6
 80090c6:	4604      	mov	r4, r0
 80090c8:	460d      	mov	r5, r1
 80090ca:	d01b      	beq.n	8009104 <__ieee754_rem_pio2+0x8c>
 80090cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8009380 <__ieee754_rem_pio2+0x308>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f7f7 f8e1 	bl	8000298 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	e9ca 2300 	strd	r2, r3, [sl]
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 f8d9 	bl	8000298 <__aeabi_dsub>
 80090e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009380 <__ieee754_rem_pio2+0x308>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 f8d4 	bl	8000298 <__aeabi_dsub>
 80090f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090f4:	f04f 0b01 	mov.w	fp, #1
 80090f8:	4658      	mov	r0, fp
 80090fa:	b00b      	add	sp, #44	; 0x2c
 80090fc:	ecbd 8b02 	vpop	{d8}
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	a3a0      	add	r3, pc, #640	; (adr r3, 8009388 <__ieee754_rem_pio2+0x310>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f8c5 	bl	8000298 <__aeabi_dsub>
 800910e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009390 <__ieee754_rem_pio2+0x318>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	f7f7 f8be 	bl	8000298 <__aeabi_dsub>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	e9ca 2300 	strd	r2, r3, [sl]
 8009124:	4620      	mov	r0, r4
 8009126:	4629      	mov	r1, r5
 8009128:	f7f7 f8b6 	bl	8000298 <__aeabi_dsub>
 800912c:	a398      	add	r3, pc, #608	; (adr r3, 8009390 <__ieee754_rem_pio2+0x318>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	e7db      	b.n	80090ec <__ieee754_rem_pio2+0x74>
 8009134:	f7f7 f8b2 	bl	800029c <__adddf3>
 8009138:	45b0      	cmp	r8, r6
 800913a:	4604      	mov	r4, r0
 800913c:	460d      	mov	r5, r1
 800913e:	d016      	beq.n	800916e <__ieee754_rem_pio2+0xf6>
 8009140:	a38f      	add	r3, pc, #572	; (adr r3, 8009380 <__ieee754_rem_pio2+0x308>)
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 f8a9 	bl	800029c <__adddf3>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	e9ca 2300 	strd	r2, r3, [sl]
 8009152:	4620      	mov	r0, r4
 8009154:	4629      	mov	r1, r5
 8009156:	f7f7 f89f 	bl	8000298 <__aeabi_dsub>
 800915a:	a389      	add	r3, pc, #548	; (adr r3, 8009380 <__ieee754_rem_pio2+0x308>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f7 f89c 	bl	800029c <__adddf3>
 8009164:	f04f 3bff 	mov.w	fp, #4294967295
 8009168:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800916c:	e7c4      	b.n	80090f8 <__ieee754_rem_pio2+0x80>
 800916e:	a386      	add	r3, pc, #536	; (adr r3, 8009388 <__ieee754_rem_pio2+0x310>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f7f7 f892 	bl	800029c <__adddf3>
 8009178:	a385      	add	r3, pc, #532	; (adr r3, 8009390 <__ieee754_rem_pio2+0x318>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	4604      	mov	r4, r0
 8009180:	460d      	mov	r5, r1
 8009182:	f7f7 f88b 	bl	800029c <__adddf3>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	e9ca 2300 	strd	r2, r3, [sl]
 800918e:	4620      	mov	r0, r4
 8009190:	4629      	mov	r1, r5
 8009192:	f7f7 f881 	bl	8000298 <__aeabi_dsub>
 8009196:	a37e      	add	r3, pc, #504	; (adr r3, 8009390 <__ieee754_rem_pio2+0x318>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	e7e0      	b.n	8009160 <__ieee754_rem_pio2+0xe8>
 800919e:	4b87      	ldr	r3, [pc, #540]	; (80093bc <__ieee754_rem_pio2+0x344>)
 80091a0:	4598      	cmp	r8, r3
 80091a2:	f300 80d9 	bgt.w	8009358 <__ieee754_rem_pio2+0x2e0>
 80091a6:	f000 fefd 	bl	8009fa4 <fabs>
 80091aa:	ec55 4b10 	vmov	r4, r5, d0
 80091ae:	ee10 0a10 	vmov	r0, s0
 80091b2:	a379      	add	r3, pc, #484	; (adr r3, 8009398 <__ieee754_rem_pio2+0x320>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f7 fa25 	bl	8000608 <__aeabi_dmul>
 80091be:	4b80      	ldr	r3, [pc, #512]	; (80093c0 <__ieee754_rem_pio2+0x348>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	f7f7 f86b 	bl	800029c <__adddf3>
 80091c6:	f7f7 fccf 	bl	8000b68 <__aeabi_d2iz>
 80091ca:	4683      	mov	fp, r0
 80091cc:	f7f7 f9b2 	bl	8000534 <__aeabi_i2d>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	ec43 2b18 	vmov	d8, r2, r3
 80091d8:	a367      	add	r3, pc, #412	; (adr r3, 8009378 <__ieee754_rem_pio2+0x300>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f7 fa13 	bl	8000608 <__aeabi_dmul>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 f855 	bl	8000298 <__aeabi_dsub>
 80091ee:	a364      	add	r3, pc, #400	; (adr r3, 8009380 <__ieee754_rem_pio2+0x308>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	4606      	mov	r6, r0
 80091f6:	460f      	mov	r7, r1
 80091f8:	ec51 0b18 	vmov	r0, r1, d8
 80091fc:	f7f7 fa04 	bl	8000608 <__aeabi_dmul>
 8009200:	f1bb 0f1f 	cmp.w	fp, #31
 8009204:	4604      	mov	r4, r0
 8009206:	460d      	mov	r5, r1
 8009208:	dc0d      	bgt.n	8009226 <__ieee754_rem_pio2+0x1ae>
 800920a:	4b6e      	ldr	r3, [pc, #440]	; (80093c4 <__ieee754_rem_pio2+0x34c>)
 800920c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009214:	4543      	cmp	r3, r8
 8009216:	d006      	beq.n	8009226 <__ieee754_rem_pio2+0x1ae>
 8009218:	4622      	mov	r2, r4
 800921a:	462b      	mov	r3, r5
 800921c:	4630      	mov	r0, r6
 800921e:	4639      	mov	r1, r7
 8009220:	f7f7 f83a 	bl	8000298 <__aeabi_dsub>
 8009224:	e00f      	b.n	8009246 <__ieee754_rem_pio2+0x1ce>
 8009226:	462b      	mov	r3, r5
 8009228:	4622      	mov	r2, r4
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	f7f7 f833 	bl	8000298 <__aeabi_dsub>
 8009232:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800923c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009240:	f1b8 0f10 	cmp.w	r8, #16
 8009244:	dc02      	bgt.n	800924c <__ieee754_rem_pio2+0x1d4>
 8009246:	e9ca 0100 	strd	r0, r1, [sl]
 800924a:	e039      	b.n	80092c0 <__ieee754_rem_pio2+0x248>
 800924c:	a34e      	add	r3, pc, #312	; (adr r3, 8009388 <__ieee754_rem_pio2+0x310>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	ec51 0b18 	vmov	r0, r1, d8
 8009256:	f7f7 f9d7 	bl	8000608 <__aeabi_dmul>
 800925a:	4604      	mov	r4, r0
 800925c:	460d      	mov	r5, r1
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4630      	mov	r0, r6
 8009264:	4639      	mov	r1, r7
 8009266:	f7f7 f817 	bl	8000298 <__aeabi_dsub>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4680      	mov	r8, r0
 8009270:	4689      	mov	r9, r1
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 f80f 	bl	8000298 <__aeabi_dsub>
 800927a:	4622      	mov	r2, r4
 800927c:	462b      	mov	r3, r5
 800927e:	f7f7 f80b 	bl	8000298 <__aeabi_dsub>
 8009282:	a343      	add	r3, pc, #268	; (adr r3, 8009390 <__ieee754_rem_pio2+0x318>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	4604      	mov	r4, r0
 800928a:	460d      	mov	r5, r1
 800928c:	ec51 0b18 	vmov	r0, r1, d8
 8009290:	f7f7 f9ba 	bl	8000608 <__aeabi_dmul>
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	f7f6 fffe 	bl	8000298 <__aeabi_dsub>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4604      	mov	r4, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f6 fff6 	bl	8000298 <__aeabi_dsub>
 80092ac:	9a03      	ldr	r2, [sp, #12]
 80092ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	2b31      	cmp	r3, #49	; 0x31
 80092b6:	dc24      	bgt.n	8009302 <__ieee754_rem_pio2+0x28a>
 80092b8:	e9ca 0100 	strd	r0, r1, [sl]
 80092bc:	4646      	mov	r6, r8
 80092be:	464f      	mov	r7, r9
 80092c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80092c4:	4630      	mov	r0, r6
 80092c6:	4642      	mov	r2, r8
 80092c8:	464b      	mov	r3, r9
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f6 ffe4 	bl	8000298 <__aeabi_dsub>
 80092d0:	462b      	mov	r3, r5
 80092d2:	4622      	mov	r2, r4
 80092d4:	f7f6 ffe0 	bl	8000298 <__aeabi_dsub>
 80092d8:	9b02      	ldr	r3, [sp, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092e0:	f6bf af0a 	bge.w	80090f8 <__ieee754_rem_pio2+0x80>
 80092e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80092e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80092ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092f0:	f8ca 8000 	str.w	r8, [sl]
 80092f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80092f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80092fc:	f1cb 0b00 	rsb	fp, fp, #0
 8009300:	e6fa      	b.n	80090f8 <__ieee754_rem_pio2+0x80>
 8009302:	a327      	add	r3, pc, #156	; (adr r3, 80093a0 <__ieee754_rem_pio2+0x328>)
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	ec51 0b18 	vmov	r0, r1, d8
 800930c:	f7f7 f97c 	bl	8000608 <__aeabi_dmul>
 8009310:	4604      	mov	r4, r0
 8009312:	460d      	mov	r5, r1
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4640      	mov	r0, r8
 800931a:	4649      	mov	r1, r9
 800931c:	f7f6 ffbc 	bl	8000298 <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4606      	mov	r6, r0
 8009326:	460f      	mov	r7, r1
 8009328:	4640      	mov	r0, r8
 800932a:	4649      	mov	r1, r9
 800932c:	f7f6 ffb4 	bl	8000298 <__aeabi_dsub>
 8009330:	4622      	mov	r2, r4
 8009332:	462b      	mov	r3, r5
 8009334:	f7f6 ffb0 	bl	8000298 <__aeabi_dsub>
 8009338:	a31b      	add	r3, pc, #108	; (adr r3, 80093a8 <__ieee754_rem_pio2+0x330>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	4604      	mov	r4, r0
 8009340:	460d      	mov	r5, r1
 8009342:	ec51 0b18 	vmov	r0, r1, d8
 8009346:	f7f7 f95f 	bl	8000608 <__aeabi_dmul>
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f7f6 ffa3 	bl	8000298 <__aeabi_dsub>
 8009352:	4604      	mov	r4, r0
 8009354:	460d      	mov	r5, r1
 8009356:	e75f      	b.n	8009218 <__ieee754_rem_pio2+0x1a0>
 8009358:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <__ieee754_rem_pio2+0x350>)
 800935a:	4598      	cmp	r8, r3
 800935c:	dd36      	ble.n	80093cc <__ieee754_rem_pio2+0x354>
 800935e:	ee10 2a10 	vmov	r2, s0
 8009362:	462b      	mov	r3, r5
 8009364:	4620      	mov	r0, r4
 8009366:	4629      	mov	r1, r5
 8009368:	f7f6 ff96 	bl	8000298 <__aeabi_dsub>
 800936c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009370:	e9ca 0100 	strd	r0, r1, [sl]
 8009374:	e694      	b.n	80090a0 <__ieee754_rem_pio2+0x28>
 8009376:	bf00      	nop
 8009378:	54400000 	.word	0x54400000
 800937c:	3ff921fb 	.word	0x3ff921fb
 8009380:	1a626331 	.word	0x1a626331
 8009384:	3dd0b461 	.word	0x3dd0b461
 8009388:	1a600000 	.word	0x1a600000
 800938c:	3dd0b461 	.word	0x3dd0b461
 8009390:	2e037073 	.word	0x2e037073
 8009394:	3ba3198a 	.word	0x3ba3198a
 8009398:	6dc9c883 	.word	0x6dc9c883
 800939c:	3fe45f30 	.word	0x3fe45f30
 80093a0:	2e000000 	.word	0x2e000000
 80093a4:	3ba3198a 	.word	0x3ba3198a
 80093a8:	252049c1 	.word	0x252049c1
 80093ac:	397b839a 	.word	0x397b839a
 80093b0:	3fe921fb 	.word	0x3fe921fb
 80093b4:	4002d97b 	.word	0x4002d97b
 80093b8:	3ff921fb 	.word	0x3ff921fb
 80093bc:	413921fb 	.word	0x413921fb
 80093c0:	3fe00000 	.word	0x3fe00000
 80093c4:	0800a694 	.word	0x0800a694
 80093c8:	7fefffff 	.word	0x7fefffff
 80093cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80093d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80093d4:	ee10 0a10 	vmov	r0, s0
 80093d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80093dc:	ee10 6a10 	vmov	r6, s0
 80093e0:	460f      	mov	r7, r1
 80093e2:	f7f7 fbc1 	bl	8000b68 <__aeabi_d2iz>
 80093e6:	f7f7 f8a5 	bl	8000534 <__aeabi_i2d>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4630      	mov	r0, r6
 80093f0:	4639      	mov	r1, r7
 80093f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093f6:	f7f6 ff4f 	bl	8000298 <__aeabi_dsub>
 80093fa:	4b23      	ldr	r3, [pc, #140]	; (8009488 <__ieee754_rem_pio2+0x410>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	f7f7 f903 	bl	8000608 <__aeabi_dmul>
 8009402:	460f      	mov	r7, r1
 8009404:	4606      	mov	r6, r0
 8009406:	f7f7 fbaf 	bl	8000b68 <__aeabi_d2iz>
 800940a:	f7f7 f893 	bl	8000534 <__aeabi_i2d>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800941a:	f7f6 ff3d 	bl	8000298 <__aeabi_dsub>
 800941e:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <__ieee754_rem_pio2+0x410>)
 8009420:	2200      	movs	r2, #0
 8009422:	f7f7 f8f1 	bl	8000608 <__aeabi_dmul>
 8009426:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800942a:	ad04      	add	r5, sp, #16
 800942c:	f04f 0803 	mov.w	r8, #3
 8009430:	46a9      	mov	r9, r5
 8009432:	2600      	movs	r6, #0
 8009434:	2700      	movs	r7, #0
 8009436:	4632      	mov	r2, r6
 8009438:	463b      	mov	r3, r7
 800943a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800943e:	46c3      	mov	fp, r8
 8009440:	3d08      	subs	r5, #8
 8009442:	f108 38ff 	add.w	r8, r8, #4294967295
 8009446:	f7f7 fb47 	bl	8000ad8 <__aeabi_dcmpeq>
 800944a:	2800      	cmp	r0, #0
 800944c:	d1f3      	bne.n	8009436 <__ieee754_rem_pio2+0x3be>
 800944e:	4b0f      	ldr	r3, [pc, #60]	; (800948c <__ieee754_rem_pio2+0x414>)
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	2302      	movs	r3, #2
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	4622      	mov	r2, r4
 8009458:	465b      	mov	r3, fp
 800945a:	4651      	mov	r1, sl
 800945c:	4648      	mov	r0, r9
 800945e:	f000 f993 	bl	8009788 <__kernel_rem_pio2>
 8009462:	9b02      	ldr	r3, [sp, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	4683      	mov	fp, r0
 8009468:	f6bf ae46 	bge.w	80090f8 <__ieee754_rem_pio2+0x80>
 800946c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009470:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009474:	e9ca 2300 	strd	r2, r3, [sl]
 8009478:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800947c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009480:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009484:	e73a      	b.n	80092fc <__ieee754_rem_pio2+0x284>
 8009486:	bf00      	nop
 8009488:	41700000 	.word	0x41700000
 800948c:	0800a714 	.word	0x0800a714

08009490 <__ieee754_sqrt>:
 8009490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	ec55 4b10 	vmov	r4, r5, d0
 8009498:	4e55      	ldr	r6, [pc, #340]	; (80095f0 <__ieee754_sqrt+0x160>)
 800949a:	43ae      	bics	r6, r5
 800949c:	ee10 0a10 	vmov	r0, s0
 80094a0:	ee10 3a10 	vmov	r3, s0
 80094a4:	462a      	mov	r2, r5
 80094a6:	4629      	mov	r1, r5
 80094a8:	d110      	bne.n	80094cc <__ieee754_sqrt+0x3c>
 80094aa:	ee10 2a10 	vmov	r2, s0
 80094ae:	462b      	mov	r3, r5
 80094b0:	f7f7 f8aa 	bl	8000608 <__aeabi_dmul>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4620      	mov	r0, r4
 80094ba:	4629      	mov	r1, r5
 80094bc:	f7f6 feee 	bl	800029c <__adddf3>
 80094c0:	4604      	mov	r4, r0
 80094c2:	460d      	mov	r5, r1
 80094c4:	ec45 4b10 	vmov	d0, r4, r5
 80094c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094cc:	2d00      	cmp	r5, #0
 80094ce:	dc10      	bgt.n	80094f2 <__ieee754_sqrt+0x62>
 80094d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80094d4:	4330      	orrs	r0, r6
 80094d6:	d0f5      	beq.n	80094c4 <__ieee754_sqrt+0x34>
 80094d8:	b15d      	cbz	r5, 80094f2 <__ieee754_sqrt+0x62>
 80094da:	ee10 2a10 	vmov	r2, s0
 80094de:	462b      	mov	r3, r5
 80094e0:	ee10 0a10 	vmov	r0, s0
 80094e4:	f7f6 fed8 	bl	8000298 <__aeabi_dsub>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	f7f7 f9b6 	bl	800085c <__aeabi_ddiv>
 80094f0:	e7e6      	b.n	80094c0 <__ieee754_sqrt+0x30>
 80094f2:	1512      	asrs	r2, r2, #20
 80094f4:	d074      	beq.n	80095e0 <__ieee754_sqrt+0x150>
 80094f6:	07d4      	lsls	r4, r2, #31
 80094f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80094fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009504:	bf5e      	ittt	pl
 8009506:	0fda      	lsrpl	r2, r3, #31
 8009508:	005b      	lslpl	r3, r3, #1
 800950a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800950e:	2400      	movs	r4, #0
 8009510:	0fda      	lsrs	r2, r3, #31
 8009512:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009516:	107f      	asrs	r7, r7, #1
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	2516      	movs	r5, #22
 800951c:	4620      	mov	r0, r4
 800951e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009522:	1886      	adds	r6, r0, r2
 8009524:	428e      	cmp	r6, r1
 8009526:	bfde      	ittt	le
 8009528:	1b89      	suble	r1, r1, r6
 800952a:	18b0      	addle	r0, r6, r2
 800952c:	18a4      	addle	r4, r4, r2
 800952e:	0049      	lsls	r1, r1, #1
 8009530:	3d01      	subs	r5, #1
 8009532:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009536:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800953a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800953e:	d1f0      	bne.n	8009522 <__ieee754_sqrt+0x92>
 8009540:	462a      	mov	r2, r5
 8009542:	f04f 0e20 	mov.w	lr, #32
 8009546:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800954a:	4281      	cmp	r1, r0
 800954c:	eb06 0c05 	add.w	ip, r6, r5
 8009550:	dc02      	bgt.n	8009558 <__ieee754_sqrt+0xc8>
 8009552:	d113      	bne.n	800957c <__ieee754_sqrt+0xec>
 8009554:	459c      	cmp	ip, r3
 8009556:	d811      	bhi.n	800957c <__ieee754_sqrt+0xec>
 8009558:	f1bc 0f00 	cmp.w	ip, #0
 800955c:	eb0c 0506 	add.w	r5, ip, r6
 8009560:	da43      	bge.n	80095ea <__ieee754_sqrt+0x15a>
 8009562:	2d00      	cmp	r5, #0
 8009564:	db41      	blt.n	80095ea <__ieee754_sqrt+0x15a>
 8009566:	f100 0801 	add.w	r8, r0, #1
 800956a:	1a09      	subs	r1, r1, r0
 800956c:	459c      	cmp	ip, r3
 800956e:	bf88      	it	hi
 8009570:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009574:	eba3 030c 	sub.w	r3, r3, ip
 8009578:	4432      	add	r2, r6
 800957a:	4640      	mov	r0, r8
 800957c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009580:	f1be 0e01 	subs.w	lr, lr, #1
 8009584:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009588:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800958c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009590:	d1db      	bne.n	800954a <__ieee754_sqrt+0xba>
 8009592:	430b      	orrs	r3, r1
 8009594:	d006      	beq.n	80095a4 <__ieee754_sqrt+0x114>
 8009596:	1c50      	adds	r0, r2, #1
 8009598:	bf13      	iteet	ne
 800959a:	3201      	addne	r2, #1
 800959c:	3401      	addeq	r4, #1
 800959e:	4672      	moveq	r2, lr
 80095a0:	f022 0201 	bicne.w	r2, r2, #1
 80095a4:	1063      	asrs	r3, r4, #1
 80095a6:	0852      	lsrs	r2, r2, #1
 80095a8:	07e1      	lsls	r1, r4, #31
 80095aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80095ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80095b2:	bf48      	it	mi
 80095b4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80095b8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80095bc:	4614      	mov	r4, r2
 80095be:	e781      	b.n	80094c4 <__ieee754_sqrt+0x34>
 80095c0:	0ad9      	lsrs	r1, r3, #11
 80095c2:	3815      	subs	r0, #21
 80095c4:	055b      	lsls	r3, r3, #21
 80095c6:	2900      	cmp	r1, #0
 80095c8:	d0fa      	beq.n	80095c0 <__ieee754_sqrt+0x130>
 80095ca:	02cd      	lsls	r5, r1, #11
 80095cc:	d50a      	bpl.n	80095e4 <__ieee754_sqrt+0x154>
 80095ce:	f1c2 0420 	rsb	r4, r2, #32
 80095d2:	fa23 f404 	lsr.w	r4, r3, r4
 80095d6:	1e55      	subs	r5, r2, #1
 80095d8:	4093      	lsls	r3, r2
 80095da:	4321      	orrs	r1, r4
 80095dc:	1b42      	subs	r2, r0, r5
 80095de:	e78a      	b.n	80094f6 <__ieee754_sqrt+0x66>
 80095e0:	4610      	mov	r0, r2
 80095e2:	e7f0      	b.n	80095c6 <__ieee754_sqrt+0x136>
 80095e4:	0049      	lsls	r1, r1, #1
 80095e6:	3201      	adds	r2, #1
 80095e8:	e7ef      	b.n	80095ca <__ieee754_sqrt+0x13a>
 80095ea:	4680      	mov	r8, r0
 80095ec:	e7bd      	b.n	800956a <__ieee754_sqrt+0xda>
 80095ee:	bf00      	nop
 80095f0:	7ff00000 	.word	0x7ff00000
 80095f4:	00000000 	.word	0x00000000

080095f8 <__kernel_cos>:
 80095f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	ec57 6b10 	vmov	r6, r7, d0
 8009600:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009604:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009608:	ed8d 1b00 	vstr	d1, [sp]
 800960c:	da07      	bge.n	800961e <__kernel_cos+0x26>
 800960e:	ee10 0a10 	vmov	r0, s0
 8009612:	4639      	mov	r1, r7
 8009614:	f7f7 faa8 	bl	8000b68 <__aeabi_d2iz>
 8009618:	2800      	cmp	r0, #0
 800961a:	f000 8088 	beq.w	800972e <__kernel_cos+0x136>
 800961e:	4632      	mov	r2, r6
 8009620:	463b      	mov	r3, r7
 8009622:	4630      	mov	r0, r6
 8009624:	4639      	mov	r1, r7
 8009626:	f7f6 ffef 	bl	8000608 <__aeabi_dmul>
 800962a:	4b51      	ldr	r3, [pc, #324]	; (8009770 <__kernel_cos+0x178>)
 800962c:	2200      	movs	r2, #0
 800962e:	4604      	mov	r4, r0
 8009630:	460d      	mov	r5, r1
 8009632:	f7f6 ffe9 	bl	8000608 <__aeabi_dmul>
 8009636:	a340      	add	r3, pc, #256	; (adr r3, 8009738 <__kernel_cos+0x140>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	4682      	mov	sl, r0
 800963e:	468b      	mov	fp, r1
 8009640:	4620      	mov	r0, r4
 8009642:	4629      	mov	r1, r5
 8009644:	f7f6 ffe0 	bl	8000608 <__aeabi_dmul>
 8009648:	a33d      	add	r3, pc, #244	; (adr r3, 8009740 <__kernel_cos+0x148>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 fe25 	bl	800029c <__adddf3>
 8009652:	4622      	mov	r2, r4
 8009654:	462b      	mov	r3, r5
 8009656:	f7f6 ffd7 	bl	8000608 <__aeabi_dmul>
 800965a:	a33b      	add	r3, pc, #236	; (adr r3, 8009748 <__kernel_cos+0x150>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fe1a 	bl	8000298 <__aeabi_dsub>
 8009664:	4622      	mov	r2, r4
 8009666:	462b      	mov	r3, r5
 8009668:	f7f6 ffce 	bl	8000608 <__aeabi_dmul>
 800966c:	a338      	add	r3, pc, #224	; (adr r3, 8009750 <__kernel_cos+0x158>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	f7f6 fe13 	bl	800029c <__adddf3>
 8009676:	4622      	mov	r2, r4
 8009678:	462b      	mov	r3, r5
 800967a:	f7f6 ffc5 	bl	8000608 <__aeabi_dmul>
 800967e:	a336      	add	r3, pc, #216	; (adr r3, 8009758 <__kernel_cos+0x160>)
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f7f6 fe08 	bl	8000298 <__aeabi_dsub>
 8009688:	4622      	mov	r2, r4
 800968a:	462b      	mov	r3, r5
 800968c:	f7f6 ffbc 	bl	8000608 <__aeabi_dmul>
 8009690:	a333      	add	r3, pc, #204	; (adr r3, 8009760 <__kernel_cos+0x168>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 fe01 	bl	800029c <__adddf3>
 800969a:	4622      	mov	r2, r4
 800969c:	462b      	mov	r3, r5
 800969e:	f7f6 ffb3 	bl	8000608 <__aeabi_dmul>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 ffaf 	bl	8000608 <__aeabi_dmul>
 80096aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ae:	4604      	mov	r4, r0
 80096b0:	460d      	mov	r5, r1
 80096b2:	4630      	mov	r0, r6
 80096b4:	4639      	mov	r1, r7
 80096b6:	f7f6 ffa7 	bl	8000608 <__aeabi_dmul>
 80096ba:	460b      	mov	r3, r1
 80096bc:	4602      	mov	r2, r0
 80096be:	4629      	mov	r1, r5
 80096c0:	4620      	mov	r0, r4
 80096c2:	f7f6 fde9 	bl	8000298 <__aeabi_dsub>
 80096c6:	4b2b      	ldr	r3, [pc, #172]	; (8009774 <__kernel_cos+0x17c>)
 80096c8:	4598      	cmp	r8, r3
 80096ca:	4606      	mov	r6, r0
 80096cc:	460f      	mov	r7, r1
 80096ce:	dc10      	bgt.n	80096f2 <__kernel_cos+0xfa>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4650      	mov	r0, sl
 80096d6:	4659      	mov	r1, fp
 80096d8:	f7f6 fdde 	bl	8000298 <__aeabi_dsub>
 80096dc:	460b      	mov	r3, r1
 80096de:	4926      	ldr	r1, [pc, #152]	; (8009778 <__kernel_cos+0x180>)
 80096e0:	4602      	mov	r2, r0
 80096e2:	2000      	movs	r0, #0
 80096e4:	f7f6 fdd8 	bl	8000298 <__aeabi_dsub>
 80096e8:	ec41 0b10 	vmov	d0, r0, r1
 80096ec:	b003      	add	sp, #12
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	4b22      	ldr	r3, [pc, #136]	; (800977c <__kernel_cos+0x184>)
 80096f4:	4920      	ldr	r1, [pc, #128]	; (8009778 <__kernel_cos+0x180>)
 80096f6:	4598      	cmp	r8, r3
 80096f8:	bfcc      	ite	gt
 80096fa:	4d21      	ldrgt	r5, [pc, #132]	; (8009780 <__kernel_cos+0x188>)
 80096fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009700:	2400      	movs	r4, #0
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	2000      	movs	r0, #0
 8009708:	f7f6 fdc6 	bl	8000298 <__aeabi_dsub>
 800970c:	4622      	mov	r2, r4
 800970e:	4680      	mov	r8, r0
 8009710:	4689      	mov	r9, r1
 8009712:	462b      	mov	r3, r5
 8009714:	4650      	mov	r0, sl
 8009716:	4659      	mov	r1, fp
 8009718:	f7f6 fdbe 	bl	8000298 <__aeabi_dsub>
 800971c:	4632      	mov	r2, r6
 800971e:	463b      	mov	r3, r7
 8009720:	f7f6 fdba 	bl	8000298 <__aeabi_dsub>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4640      	mov	r0, r8
 800972a:	4649      	mov	r1, r9
 800972c:	e7da      	b.n	80096e4 <__kernel_cos+0xec>
 800972e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009768 <__kernel_cos+0x170>
 8009732:	e7db      	b.n	80096ec <__kernel_cos+0xf4>
 8009734:	f3af 8000 	nop.w
 8009738:	be8838d4 	.word	0xbe8838d4
 800973c:	bda8fae9 	.word	0xbda8fae9
 8009740:	bdb4b1c4 	.word	0xbdb4b1c4
 8009744:	3e21ee9e 	.word	0x3e21ee9e
 8009748:	809c52ad 	.word	0x809c52ad
 800974c:	3e927e4f 	.word	0x3e927e4f
 8009750:	19cb1590 	.word	0x19cb1590
 8009754:	3efa01a0 	.word	0x3efa01a0
 8009758:	16c15177 	.word	0x16c15177
 800975c:	3f56c16c 	.word	0x3f56c16c
 8009760:	5555554c 	.word	0x5555554c
 8009764:	3fa55555 	.word	0x3fa55555
 8009768:	00000000 	.word	0x00000000
 800976c:	3ff00000 	.word	0x3ff00000
 8009770:	3fe00000 	.word	0x3fe00000
 8009774:	3fd33332 	.word	0x3fd33332
 8009778:	3ff00000 	.word	0x3ff00000
 800977c:	3fe90000 	.word	0x3fe90000
 8009780:	3fd20000 	.word	0x3fd20000
 8009784:	00000000 	.word	0x00000000

08009788 <__kernel_rem_pio2>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	ed2d 8b02 	vpush	{d8}
 8009790:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009794:	f112 0f14 	cmn.w	r2, #20
 8009798:	9308      	str	r3, [sp, #32]
 800979a:	9101      	str	r1, [sp, #4]
 800979c:	4bc4      	ldr	r3, [pc, #784]	; (8009ab0 <__kernel_rem_pio2+0x328>)
 800979e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80097a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80097a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097a6:	9302      	str	r3, [sp, #8]
 80097a8:	9b08      	ldr	r3, [sp, #32]
 80097aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80097ae:	bfa8      	it	ge
 80097b0:	1ed4      	subge	r4, r2, #3
 80097b2:	9306      	str	r3, [sp, #24]
 80097b4:	bfb2      	itee	lt
 80097b6:	2400      	movlt	r4, #0
 80097b8:	2318      	movge	r3, #24
 80097ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80097be:	f06f 0317 	mvn.w	r3, #23
 80097c2:	fb04 3303 	mla	r3, r4, r3, r3
 80097c6:	eb03 0a02 	add.w	sl, r3, r2
 80097ca:	9b02      	ldr	r3, [sp, #8]
 80097cc:	9a06      	ldr	r2, [sp, #24]
 80097ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009aa0 <__kernel_rem_pio2+0x318>
 80097d2:	eb03 0802 	add.w	r8, r3, r2
 80097d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80097d8:	1aa7      	subs	r7, r4, r2
 80097da:	ae22      	add	r6, sp, #136	; 0x88
 80097dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80097e0:	2500      	movs	r5, #0
 80097e2:	4545      	cmp	r5, r8
 80097e4:	dd13      	ble.n	800980e <__kernel_rem_pio2+0x86>
 80097e6:	9b08      	ldr	r3, [sp, #32]
 80097e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009aa0 <__kernel_rem_pio2+0x318>
 80097ec:	aa22      	add	r2, sp, #136	; 0x88
 80097ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80097f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	9b02      	ldr	r3, [sp, #8]
 80097fc:	4598      	cmp	r8, r3
 80097fe:	dc2f      	bgt.n	8009860 <__kernel_rem_pio2+0xd8>
 8009800:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009804:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009808:	462f      	mov	r7, r5
 800980a:	2600      	movs	r6, #0
 800980c:	e01b      	b.n	8009846 <__kernel_rem_pio2+0xbe>
 800980e:	42ef      	cmn	r7, r5
 8009810:	d407      	bmi.n	8009822 <__kernel_rem_pio2+0x9a>
 8009812:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009816:	f7f6 fe8d 	bl	8000534 <__aeabi_i2d>
 800981a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800981e:	3501      	adds	r5, #1
 8009820:	e7df      	b.n	80097e2 <__kernel_rem_pio2+0x5a>
 8009822:	ec51 0b18 	vmov	r0, r1, d8
 8009826:	e7f8      	b.n	800981a <__kernel_rem_pio2+0x92>
 8009828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800982c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009830:	f7f6 feea 	bl	8000608 <__aeabi_dmul>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800983c:	f7f6 fd2e 	bl	800029c <__adddf3>
 8009840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009844:	3601      	adds	r6, #1
 8009846:	9b06      	ldr	r3, [sp, #24]
 8009848:	429e      	cmp	r6, r3
 800984a:	f1a7 0708 	sub.w	r7, r7, #8
 800984e:	ddeb      	ble.n	8009828 <__kernel_rem_pio2+0xa0>
 8009850:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009854:	f108 0801 	add.w	r8, r8, #1
 8009858:	ecab 7b02 	vstmia	fp!, {d7}
 800985c:	3508      	adds	r5, #8
 800985e:	e7cc      	b.n	80097fa <__kernel_rem_pio2+0x72>
 8009860:	9b02      	ldr	r3, [sp, #8]
 8009862:	aa0e      	add	r2, sp, #56	; 0x38
 8009864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009868:	930d      	str	r3, [sp, #52]	; 0x34
 800986a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800986c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009870:	9c02      	ldr	r4, [sp, #8]
 8009872:	930c      	str	r3, [sp, #48]	; 0x30
 8009874:	00e3      	lsls	r3, r4, #3
 8009876:	930a      	str	r3, [sp, #40]	; 0x28
 8009878:	ab9a      	add	r3, sp, #616	; 0x268
 800987a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800987e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009882:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009886:	ab72      	add	r3, sp, #456	; 0x1c8
 8009888:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800988c:	46c3      	mov	fp, r8
 800988e:	46a1      	mov	r9, r4
 8009890:	f1b9 0f00 	cmp.w	r9, #0
 8009894:	f1a5 0508 	sub.w	r5, r5, #8
 8009898:	dc77      	bgt.n	800998a <__kernel_rem_pio2+0x202>
 800989a:	ec47 6b10 	vmov	d0, r6, r7
 800989e:	4650      	mov	r0, sl
 80098a0:	f000 fc12 	bl	800a0c8 <scalbn>
 80098a4:	ec57 6b10 	vmov	r6, r7, d0
 80098a8:	2200      	movs	r2, #0
 80098aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80098ae:	ee10 0a10 	vmov	r0, s0
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f6 fea8 	bl	8000608 <__aeabi_dmul>
 80098b8:	ec41 0b10 	vmov	d0, r0, r1
 80098bc:	f000 fb7c 	bl	8009fb8 <floor>
 80098c0:	4b7c      	ldr	r3, [pc, #496]	; (8009ab4 <__kernel_rem_pio2+0x32c>)
 80098c2:	ec51 0b10 	vmov	r0, r1, d0
 80098c6:	2200      	movs	r2, #0
 80098c8:	f7f6 fe9e 	bl	8000608 <__aeabi_dmul>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f6 fce0 	bl	8000298 <__aeabi_dsub>
 80098d8:	460f      	mov	r7, r1
 80098da:	4606      	mov	r6, r0
 80098dc:	f7f7 f944 	bl	8000b68 <__aeabi_d2iz>
 80098e0:	9004      	str	r0, [sp, #16]
 80098e2:	f7f6 fe27 	bl	8000534 <__aeabi_i2d>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 fcd3 	bl	8000298 <__aeabi_dsub>
 80098f2:	f1ba 0f00 	cmp.w	sl, #0
 80098f6:	4606      	mov	r6, r0
 80098f8:	460f      	mov	r7, r1
 80098fa:	dd6d      	ble.n	80099d8 <__kernel_rem_pio2+0x250>
 80098fc:	1e62      	subs	r2, r4, #1
 80098fe:	ab0e      	add	r3, sp, #56	; 0x38
 8009900:	9d04      	ldr	r5, [sp, #16]
 8009902:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009906:	f1ca 0118 	rsb	r1, sl, #24
 800990a:	fa40 f301 	asr.w	r3, r0, r1
 800990e:	441d      	add	r5, r3
 8009910:	408b      	lsls	r3, r1
 8009912:	1ac0      	subs	r0, r0, r3
 8009914:	ab0e      	add	r3, sp, #56	; 0x38
 8009916:	9504      	str	r5, [sp, #16]
 8009918:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800991c:	f1ca 0317 	rsb	r3, sl, #23
 8009920:	fa40 fb03 	asr.w	fp, r0, r3
 8009924:	f1bb 0f00 	cmp.w	fp, #0
 8009928:	dd65      	ble.n	80099f6 <__kernel_rem_pio2+0x26e>
 800992a:	9b04      	ldr	r3, [sp, #16]
 800992c:	2200      	movs	r2, #0
 800992e:	3301      	adds	r3, #1
 8009930:	9304      	str	r3, [sp, #16]
 8009932:	4615      	mov	r5, r2
 8009934:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009938:	4294      	cmp	r4, r2
 800993a:	f300 809c 	bgt.w	8009a76 <__kernel_rem_pio2+0x2ee>
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	dd07      	ble.n	8009954 <__kernel_rem_pio2+0x1cc>
 8009944:	f1ba 0f01 	cmp.w	sl, #1
 8009948:	f000 80c0 	beq.w	8009acc <__kernel_rem_pio2+0x344>
 800994c:	f1ba 0f02 	cmp.w	sl, #2
 8009950:	f000 80c6 	beq.w	8009ae0 <__kernel_rem_pio2+0x358>
 8009954:	f1bb 0f02 	cmp.w	fp, #2
 8009958:	d14d      	bne.n	80099f6 <__kernel_rem_pio2+0x26e>
 800995a:	4632      	mov	r2, r6
 800995c:	463b      	mov	r3, r7
 800995e:	4956      	ldr	r1, [pc, #344]	; (8009ab8 <__kernel_rem_pio2+0x330>)
 8009960:	2000      	movs	r0, #0
 8009962:	f7f6 fc99 	bl	8000298 <__aeabi_dsub>
 8009966:	4606      	mov	r6, r0
 8009968:	460f      	mov	r7, r1
 800996a:	2d00      	cmp	r5, #0
 800996c:	d043      	beq.n	80099f6 <__kernel_rem_pio2+0x26e>
 800996e:	4650      	mov	r0, sl
 8009970:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009aa8 <__kernel_rem_pio2+0x320>
 8009974:	f000 fba8 	bl	800a0c8 <scalbn>
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	ec53 2b10 	vmov	r2, r3, d0
 8009980:	f7f6 fc8a 	bl	8000298 <__aeabi_dsub>
 8009984:	4606      	mov	r6, r0
 8009986:	460f      	mov	r7, r1
 8009988:	e035      	b.n	80099f6 <__kernel_rem_pio2+0x26e>
 800998a:	4b4c      	ldr	r3, [pc, #304]	; (8009abc <__kernel_rem_pio2+0x334>)
 800998c:	2200      	movs	r2, #0
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f6 fe39 	bl	8000608 <__aeabi_dmul>
 8009996:	f7f7 f8e7 	bl	8000b68 <__aeabi_d2iz>
 800999a:	f7f6 fdcb 	bl	8000534 <__aeabi_i2d>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	ec43 2b18 	vmov	d8, r2, r3
 80099a6:	4b46      	ldr	r3, [pc, #280]	; (8009ac0 <__kernel_rem_pio2+0x338>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	f7f6 fe2d 	bl	8000608 <__aeabi_dmul>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4630      	mov	r0, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	f7f6 fc6f 	bl	8000298 <__aeabi_dsub>
 80099ba:	f7f7 f8d5 	bl	8000b68 <__aeabi_d2iz>
 80099be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099c2:	f84b 0b04 	str.w	r0, [fp], #4
 80099c6:	ec51 0b18 	vmov	r0, r1, d8
 80099ca:	f7f6 fc67 	bl	800029c <__adddf3>
 80099ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	e75b      	b.n	8009890 <__kernel_rem_pio2+0x108>
 80099d8:	d106      	bne.n	80099e8 <__kernel_rem_pio2+0x260>
 80099da:	1e63      	subs	r3, r4, #1
 80099dc:	aa0e      	add	r2, sp, #56	; 0x38
 80099de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80099e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80099e6:	e79d      	b.n	8009924 <__kernel_rem_pio2+0x19c>
 80099e8:	4b36      	ldr	r3, [pc, #216]	; (8009ac4 <__kernel_rem_pio2+0x33c>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	f7f7 f892 	bl	8000b14 <__aeabi_dcmpge>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d13d      	bne.n	8009a70 <__kernel_rem_pio2+0x2e8>
 80099f4:	4683      	mov	fp, r0
 80099f6:	2200      	movs	r2, #0
 80099f8:	2300      	movs	r3, #0
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f7 f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f000 80c0 	beq.w	8009b88 <__kernel_rem_pio2+0x400>
 8009a08:	1e65      	subs	r5, r4, #1
 8009a0a:	462b      	mov	r3, r5
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	9902      	ldr	r1, [sp, #8]
 8009a10:	428b      	cmp	r3, r1
 8009a12:	da6c      	bge.n	8009aee <__kernel_rem_pio2+0x366>
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	f000 8089 	beq.w	8009b2c <__kernel_rem_pio2+0x3a4>
 8009a1a:	ab0e      	add	r3, sp, #56	; 0x38
 8009a1c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009a20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 80ad 	beq.w	8009b84 <__kernel_rem_pio2+0x3fc>
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009aa8 <__kernel_rem_pio2+0x320>
 8009a30:	f000 fb4a 	bl	800a0c8 <scalbn>
 8009a34:	ab9a      	add	r3, sp, #616	; 0x268
 8009a36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009a3a:	ec57 6b10 	vmov	r6, r7, d0
 8009a3e:	00ec      	lsls	r4, r5, #3
 8009a40:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009a44:	46aa      	mov	sl, r5
 8009a46:	f1ba 0f00 	cmp.w	sl, #0
 8009a4a:	f280 80d6 	bge.w	8009bfa <__kernel_rem_pio2+0x472>
 8009a4e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009aa0 <__kernel_rem_pio2+0x318>
 8009a52:	462e      	mov	r6, r5
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	f2c0 8104 	blt.w	8009c62 <__kernel_rem_pio2+0x4da>
 8009a5a:	ab72      	add	r3, sp, #456	; 0x1c8
 8009a5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009a60:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009ac8 <__kernel_rem_pio2+0x340>
 8009a64:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009a68:	f04f 0800 	mov.w	r8, #0
 8009a6c:	1baf      	subs	r7, r5, r6
 8009a6e:	e0ea      	b.n	8009c46 <__kernel_rem_pio2+0x4be>
 8009a70:	f04f 0b02 	mov.w	fp, #2
 8009a74:	e759      	b.n	800992a <__kernel_rem_pio2+0x1a2>
 8009a76:	f8d8 3000 	ldr.w	r3, [r8]
 8009a7a:	b955      	cbnz	r5, 8009a92 <__kernel_rem_pio2+0x30a>
 8009a7c:	b123      	cbz	r3, 8009a88 <__kernel_rem_pio2+0x300>
 8009a7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009a82:	f8c8 3000 	str.w	r3, [r8]
 8009a86:	2301      	movs	r3, #1
 8009a88:	3201      	adds	r2, #1
 8009a8a:	f108 0804 	add.w	r8, r8, #4
 8009a8e:	461d      	mov	r5, r3
 8009a90:	e752      	b.n	8009938 <__kernel_rem_pio2+0x1b0>
 8009a92:	1acb      	subs	r3, r1, r3
 8009a94:	f8c8 3000 	str.w	r3, [r8]
 8009a98:	462b      	mov	r3, r5
 8009a9a:	e7f5      	b.n	8009a88 <__kernel_rem_pio2+0x300>
 8009a9c:	f3af 8000 	nop.w
	...
 8009aac:	3ff00000 	.word	0x3ff00000
 8009ab0:	0800a860 	.word	0x0800a860
 8009ab4:	40200000 	.word	0x40200000
 8009ab8:	3ff00000 	.word	0x3ff00000
 8009abc:	3e700000 	.word	0x3e700000
 8009ac0:	41700000 	.word	0x41700000
 8009ac4:	3fe00000 	.word	0x3fe00000
 8009ac8:	0800a820 	.word	0x0800a820
 8009acc:	1e62      	subs	r2, r4, #1
 8009ace:	ab0e      	add	r3, sp, #56	; 0x38
 8009ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ad8:	a90e      	add	r1, sp, #56	; 0x38
 8009ada:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009ade:	e739      	b.n	8009954 <__kernel_rem_pio2+0x1cc>
 8009ae0:	1e62      	subs	r2, r4, #1
 8009ae2:	ab0e      	add	r3, sp, #56	; 0x38
 8009ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009aec:	e7f4      	b.n	8009ad8 <__kernel_rem_pio2+0x350>
 8009aee:	a90e      	add	r1, sp, #56	; 0x38
 8009af0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	430a      	orrs	r2, r1
 8009af8:	e789      	b.n	8009a0e <__kernel_rem_pio2+0x286>
 8009afa:	3301      	adds	r3, #1
 8009afc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009b00:	2900      	cmp	r1, #0
 8009b02:	d0fa      	beq.n	8009afa <__kernel_rem_pio2+0x372>
 8009b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b06:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009b0a:	446a      	add	r2, sp
 8009b0c:	3a98      	subs	r2, #152	; 0x98
 8009b0e:	920a      	str	r2, [sp, #40]	; 0x28
 8009b10:	9a08      	ldr	r2, [sp, #32]
 8009b12:	18e3      	adds	r3, r4, r3
 8009b14:	18a5      	adds	r5, r4, r2
 8009b16:	aa22      	add	r2, sp, #136	; 0x88
 8009b18:	f104 0801 	add.w	r8, r4, #1
 8009b1c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	9b04      	ldr	r3, [sp, #16]
 8009b24:	4543      	cmp	r3, r8
 8009b26:	da04      	bge.n	8009b32 <__kernel_rem_pio2+0x3aa>
 8009b28:	461c      	mov	r4, r3
 8009b2a:	e6a3      	b.n	8009874 <__kernel_rem_pio2+0xec>
 8009b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e7e4      	b.n	8009afc <__kernel_rem_pio2+0x374>
 8009b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009b38:	f7f6 fcfc 	bl	8000534 <__aeabi_i2d>
 8009b3c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b42:	46ab      	mov	fp, r5
 8009b44:	461c      	mov	r4, r3
 8009b46:	f04f 0900 	mov.w	r9, #0
 8009b4a:	2600      	movs	r6, #0
 8009b4c:	2700      	movs	r7, #0
 8009b4e:	9b06      	ldr	r3, [sp, #24]
 8009b50:	4599      	cmp	r9, r3
 8009b52:	dd06      	ble.n	8009b62 <__kernel_rem_pio2+0x3da>
 8009b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b56:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009b5a:	f108 0801 	add.w	r8, r8, #1
 8009b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b60:	e7df      	b.n	8009b22 <__kernel_rem_pio2+0x39a>
 8009b62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009b66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009b6a:	f7f6 fd4d 	bl	8000608 <__aeabi_dmul>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4630      	mov	r0, r6
 8009b74:	4639      	mov	r1, r7
 8009b76:	f7f6 fb91 	bl	800029c <__adddf3>
 8009b7a:	f109 0901 	add.w	r9, r9, #1
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460f      	mov	r7, r1
 8009b82:	e7e4      	b.n	8009b4e <__kernel_rem_pio2+0x3c6>
 8009b84:	3d01      	subs	r5, #1
 8009b86:	e748      	b.n	8009a1a <__kernel_rem_pio2+0x292>
 8009b88:	ec47 6b10 	vmov	d0, r6, r7
 8009b8c:	f1ca 0000 	rsb	r0, sl, #0
 8009b90:	f000 fa9a 	bl	800a0c8 <scalbn>
 8009b94:	ec57 6b10 	vmov	r6, r7, d0
 8009b98:	4ba0      	ldr	r3, [pc, #640]	; (8009e1c <__kernel_rem_pio2+0x694>)
 8009b9a:	ee10 0a10 	vmov	r0, s0
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4639      	mov	r1, r7
 8009ba2:	f7f6 ffb7 	bl	8000b14 <__aeabi_dcmpge>
 8009ba6:	b1f8      	cbz	r0, 8009be8 <__kernel_rem_pio2+0x460>
 8009ba8:	4b9d      	ldr	r3, [pc, #628]	; (8009e20 <__kernel_rem_pio2+0x698>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	4630      	mov	r0, r6
 8009bae:	4639      	mov	r1, r7
 8009bb0:	f7f6 fd2a 	bl	8000608 <__aeabi_dmul>
 8009bb4:	f7f6 ffd8 	bl	8000b68 <__aeabi_d2iz>
 8009bb8:	4680      	mov	r8, r0
 8009bba:	f7f6 fcbb 	bl	8000534 <__aeabi_i2d>
 8009bbe:	4b97      	ldr	r3, [pc, #604]	; (8009e1c <__kernel_rem_pio2+0x694>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f7f6 fd21 	bl	8000608 <__aeabi_dmul>
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4602      	mov	r2, r0
 8009bca:	4639      	mov	r1, r7
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f7f6 fb63 	bl	8000298 <__aeabi_dsub>
 8009bd2:	f7f6 ffc9 	bl	8000b68 <__aeabi_d2iz>
 8009bd6:	1c65      	adds	r5, r4, #1
 8009bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8009bda:	f10a 0a18 	add.w	sl, sl, #24
 8009bde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009be2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009be6:	e720      	b.n	8009a2a <__kernel_rem_pio2+0x2a2>
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f6 ffbc 	bl	8000b68 <__aeabi_d2iz>
 8009bf0:	ab0e      	add	r3, sp, #56	; 0x38
 8009bf2:	4625      	mov	r5, r4
 8009bf4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009bf8:	e717      	b.n	8009a2a <__kernel_rem_pio2+0x2a2>
 8009bfa:	ab0e      	add	r3, sp, #56	; 0x38
 8009bfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009c00:	f7f6 fc98 	bl	8000534 <__aeabi_i2d>
 8009c04:	4632      	mov	r2, r6
 8009c06:	463b      	mov	r3, r7
 8009c08:	f7f6 fcfe 	bl	8000608 <__aeabi_dmul>
 8009c0c:	4b84      	ldr	r3, [pc, #528]	; (8009e20 <__kernel_rem_pio2+0x698>)
 8009c0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009c12:	2200      	movs	r2, #0
 8009c14:	4630      	mov	r0, r6
 8009c16:	4639      	mov	r1, r7
 8009c18:	f7f6 fcf6 	bl	8000608 <__aeabi_dmul>
 8009c1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c20:	4606      	mov	r6, r0
 8009c22:	460f      	mov	r7, r1
 8009c24:	e70f      	b.n	8009a46 <__kernel_rem_pio2+0x2be>
 8009c26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009c2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009c2e:	f7f6 fceb 	bl	8000608 <__aeabi_dmul>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c3a:	f7f6 fb2f 	bl	800029c <__adddf3>
 8009c3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c42:	f108 0801 	add.w	r8, r8, #1
 8009c46:	9b02      	ldr	r3, [sp, #8]
 8009c48:	4598      	cmp	r8, r3
 8009c4a:	dc01      	bgt.n	8009c50 <__kernel_rem_pio2+0x4c8>
 8009c4c:	45b8      	cmp	r8, r7
 8009c4e:	ddea      	ble.n	8009c26 <__kernel_rem_pio2+0x49e>
 8009c50:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009c54:	ab4a      	add	r3, sp, #296	; 0x128
 8009c56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c5a:	ed87 7b00 	vstr	d7, [r7]
 8009c5e:	3e01      	subs	r6, #1
 8009c60:	e6f8      	b.n	8009a54 <__kernel_rem_pio2+0x2cc>
 8009c62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	dc0b      	bgt.n	8009c80 <__kernel_rem_pio2+0x4f8>
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	dc35      	bgt.n	8009cd8 <__kernel_rem_pio2+0x550>
 8009c6c:	d059      	beq.n	8009d22 <__kernel_rem_pio2+0x59a>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	f003 0007 	and.w	r0, r3, #7
 8009c74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009c78:	ecbd 8b02 	vpop	{d8}
 8009c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d1f3      	bne.n	8009c6e <__kernel_rem_pio2+0x4e6>
 8009c86:	ab4a      	add	r3, sp, #296	; 0x128
 8009c88:	4423      	add	r3, r4
 8009c8a:	9306      	str	r3, [sp, #24]
 8009c8c:	461c      	mov	r4, r3
 8009c8e:	469a      	mov	sl, r3
 8009c90:	9502      	str	r5, [sp, #8]
 8009c92:	9b02      	ldr	r3, [sp, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f1aa 0a08 	sub.w	sl, sl, #8
 8009c9a:	dc6b      	bgt.n	8009d74 <__kernel_rem_pio2+0x5ec>
 8009c9c:	46aa      	mov	sl, r5
 8009c9e:	f1ba 0f01 	cmp.w	sl, #1
 8009ca2:	f1a4 0408 	sub.w	r4, r4, #8
 8009ca6:	f300 8085 	bgt.w	8009db4 <__kernel_rem_pio2+0x62c>
 8009caa:	9c06      	ldr	r4, [sp, #24]
 8009cac:	2000      	movs	r0, #0
 8009cae:	3408      	adds	r4, #8
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	2d01      	cmp	r5, #1
 8009cb4:	f300 809d 	bgt.w	8009df2 <__kernel_rem_pio2+0x66a>
 8009cb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009cbc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009cc0:	f1bb 0f00 	cmp.w	fp, #0
 8009cc4:	f040 809b 	bne.w	8009dfe <__kernel_rem_pio2+0x676>
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	e9c3 5600 	strd	r5, r6, [r3]
 8009cce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009cd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009cd6:	e7ca      	b.n	8009c6e <__kernel_rem_pio2+0x4e6>
 8009cd8:	3408      	adds	r4, #8
 8009cda:	ab4a      	add	r3, sp, #296	; 0x128
 8009cdc:	441c      	add	r4, r3
 8009cde:	462e      	mov	r6, r5
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	2e00      	cmp	r6, #0
 8009ce6:	da36      	bge.n	8009d56 <__kernel_rem_pio2+0x5ce>
 8009ce8:	f1bb 0f00 	cmp.w	fp, #0
 8009cec:	d039      	beq.n	8009d62 <__kernel_rem_pio2+0x5da>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cf4:	9c01      	ldr	r4, [sp, #4]
 8009cf6:	e9c4 2300 	strd	r2, r3, [r4]
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009d02:	f7f6 fac9 	bl	8000298 <__aeabi_dsub>
 8009d06:	ae4c      	add	r6, sp, #304	; 0x130
 8009d08:	2401      	movs	r4, #1
 8009d0a:	42a5      	cmp	r5, r4
 8009d0c:	da2c      	bge.n	8009d68 <__kernel_rem_pio2+0x5e0>
 8009d0e:	f1bb 0f00 	cmp.w	fp, #0
 8009d12:	d002      	beq.n	8009d1a <__kernel_rem_pio2+0x592>
 8009d14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d18:	4619      	mov	r1, r3
 8009d1a:	9b01      	ldr	r3, [sp, #4]
 8009d1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009d20:	e7a5      	b.n	8009c6e <__kernel_rem_pio2+0x4e6>
 8009d22:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009d26:	eb0d 0403 	add.w	r4, sp, r3
 8009d2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009d2e:	2000      	movs	r0, #0
 8009d30:	2100      	movs	r1, #0
 8009d32:	2d00      	cmp	r5, #0
 8009d34:	da09      	bge.n	8009d4a <__kernel_rem_pio2+0x5c2>
 8009d36:	f1bb 0f00 	cmp.w	fp, #0
 8009d3a:	d002      	beq.n	8009d42 <__kernel_rem_pio2+0x5ba>
 8009d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d40:	4619      	mov	r1, r3
 8009d42:	9b01      	ldr	r3, [sp, #4]
 8009d44:	e9c3 0100 	strd	r0, r1, [r3]
 8009d48:	e791      	b.n	8009c6e <__kernel_rem_pio2+0x4e6>
 8009d4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d4e:	f7f6 faa5 	bl	800029c <__adddf3>
 8009d52:	3d01      	subs	r5, #1
 8009d54:	e7ed      	b.n	8009d32 <__kernel_rem_pio2+0x5aa>
 8009d56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d5a:	f7f6 fa9f 	bl	800029c <__adddf3>
 8009d5e:	3e01      	subs	r6, #1
 8009d60:	e7c0      	b.n	8009ce4 <__kernel_rem_pio2+0x55c>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	e7c5      	b.n	8009cf4 <__kernel_rem_pio2+0x56c>
 8009d68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009d6c:	f7f6 fa96 	bl	800029c <__adddf3>
 8009d70:	3401      	adds	r4, #1
 8009d72:	e7ca      	b.n	8009d0a <__kernel_rem_pio2+0x582>
 8009d74:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009d7c:	9b02      	ldr	r3, [sp, #8]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	9302      	str	r3, [sp, #8]
 8009d82:	4632      	mov	r2, r6
 8009d84:	463b      	mov	r3, r7
 8009d86:	4640      	mov	r0, r8
 8009d88:	4649      	mov	r1, r9
 8009d8a:	f7f6 fa87 	bl	800029c <__adddf3>
 8009d8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4640      	mov	r0, r8
 8009d98:	4649      	mov	r1, r9
 8009d9a:	f7f6 fa7d 	bl	8000298 <__aeabi_dsub>
 8009d9e:	4632      	mov	r2, r6
 8009da0:	463b      	mov	r3, r7
 8009da2:	f7f6 fa7b 	bl	800029c <__adddf3>
 8009da6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009daa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009dae:	ed8a 7b00 	vstr	d7, [sl]
 8009db2:	e76e      	b.n	8009c92 <__kernel_rem_pio2+0x50a>
 8009db4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009db8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4632      	mov	r2, r6
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	f7f6 fa6a 	bl	800029c <__adddf3>
 8009dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7f6 fa60 	bl	8000298 <__aeabi_dsub>
 8009dd8:	4632      	mov	r2, r6
 8009dda:	463b      	mov	r3, r7
 8009ddc:	f7f6 fa5e 	bl	800029c <__adddf3>
 8009de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009de4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009de8:	ed84 7b00 	vstr	d7, [r4]
 8009dec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009df0:	e755      	b.n	8009c9e <__kernel_rem_pio2+0x516>
 8009df2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009df6:	f7f6 fa51 	bl	800029c <__adddf3>
 8009dfa:	3d01      	subs	r5, #1
 8009dfc:	e759      	b.n	8009cb2 <__kernel_rem_pio2+0x52a>
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	9a01      	ldr	r2, [sp, #4]
 8009e02:	601d      	str	r5, [r3, #0]
 8009e04:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009e08:	605c      	str	r4, [r3, #4]
 8009e0a:	609f      	str	r7, [r3, #8]
 8009e0c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009e10:	60d3      	str	r3, [r2, #12]
 8009e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e16:	6110      	str	r0, [r2, #16]
 8009e18:	6153      	str	r3, [r2, #20]
 8009e1a:	e728      	b.n	8009c6e <__kernel_rem_pio2+0x4e6>
 8009e1c:	41700000 	.word	0x41700000
 8009e20:	3e700000 	.word	0x3e700000
 8009e24:	00000000 	.word	0x00000000

08009e28 <__kernel_sin>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	ed2d 8b04 	vpush	{d8-d9}
 8009e30:	eeb0 8a41 	vmov.f32	s16, s2
 8009e34:	eef0 8a61 	vmov.f32	s17, s3
 8009e38:	ec55 4b10 	vmov	r4, r5, d0
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e42:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009e46:	9001      	str	r0, [sp, #4]
 8009e48:	da06      	bge.n	8009e58 <__kernel_sin+0x30>
 8009e4a:	ee10 0a10 	vmov	r0, s0
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f7f6 fe8a 	bl	8000b68 <__aeabi_d2iz>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d051      	beq.n	8009efc <__kernel_sin+0xd4>
 8009e58:	4622      	mov	r2, r4
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	4629      	mov	r1, r5
 8009e60:	f7f6 fbd2 	bl	8000608 <__aeabi_dmul>
 8009e64:	4682      	mov	sl, r0
 8009e66:	468b      	mov	fp, r1
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	f7f6 fbca 	bl	8000608 <__aeabi_dmul>
 8009e74:	a341      	add	r3, pc, #260	; (adr r3, 8009f7c <__kernel_sin+0x154>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	4689      	mov	r9, r1
 8009e7e:	4650      	mov	r0, sl
 8009e80:	4659      	mov	r1, fp
 8009e82:	f7f6 fbc1 	bl	8000608 <__aeabi_dmul>
 8009e86:	a33f      	add	r3, pc, #252	; (adr r3, 8009f84 <__kernel_sin+0x15c>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fa04 	bl	8000298 <__aeabi_dsub>
 8009e90:	4652      	mov	r2, sl
 8009e92:	465b      	mov	r3, fp
 8009e94:	f7f6 fbb8 	bl	8000608 <__aeabi_dmul>
 8009e98:	a33c      	add	r3, pc, #240	; (adr r3, 8009f8c <__kernel_sin+0x164>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 f9fd 	bl	800029c <__adddf3>
 8009ea2:	4652      	mov	r2, sl
 8009ea4:	465b      	mov	r3, fp
 8009ea6:	f7f6 fbaf 	bl	8000608 <__aeabi_dmul>
 8009eaa:	a33a      	add	r3, pc, #232	; (adr r3, 8009f94 <__kernel_sin+0x16c>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	f7f6 f9f2 	bl	8000298 <__aeabi_dsub>
 8009eb4:	4652      	mov	r2, sl
 8009eb6:	465b      	mov	r3, fp
 8009eb8:	f7f6 fba6 	bl	8000608 <__aeabi_dmul>
 8009ebc:	a337      	add	r3, pc, #220	; (adr r3, 8009f9c <__kernel_sin+0x174>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 f9eb 	bl	800029c <__adddf3>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	4606      	mov	r6, r0
 8009eca:	460f      	mov	r7, r1
 8009ecc:	b9eb      	cbnz	r3, 8009f0a <__kernel_sin+0xe2>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4650      	mov	r0, sl
 8009ed4:	4659      	mov	r1, fp
 8009ed6:	f7f6 fb97 	bl	8000608 <__aeabi_dmul>
 8009eda:	a325      	add	r3, pc, #148	; (adr r3, 8009f70 <__kernel_sin+0x148>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f7f6 f9da 	bl	8000298 <__aeabi_dsub>
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	f7f6 fb8e 	bl	8000608 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	f7f6 f9d2 	bl	800029c <__adddf3>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	ec45 4b10 	vmov	d0, r4, r5
 8009f00:	b003      	add	sp, #12
 8009f02:	ecbd 8b04 	vpop	{d8-d9}
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <__kernel_sin+0x150>)
 8009f0c:	ec51 0b18 	vmov	r0, r1, d8
 8009f10:	2200      	movs	r2, #0
 8009f12:	f7f6 fb79 	bl	8000608 <__aeabi_dmul>
 8009f16:	4632      	mov	r2, r6
 8009f18:	ec41 0b19 	vmov	d9, r0, r1
 8009f1c:	463b      	mov	r3, r7
 8009f1e:	4640      	mov	r0, r8
 8009f20:	4649      	mov	r1, r9
 8009f22:	f7f6 fb71 	bl	8000608 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	ec51 0b19 	vmov	r0, r1, d9
 8009f2e:	f7f6 f9b3 	bl	8000298 <__aeabi_dsub>
 8009f32:	4652      	mov	r2, sl
 8009f34:	465b      	mov	r3, fp
 8009f36:	f7f6 fb67 	bl	8000608 <__aeabi_dmul>
 8009f3a:	ec53 2b18 	vmov	r2, r3, d8
 8009f3e:	f7f6 f9ab 	bl	8000298 <__aeabi_dsub>
 8009f42:	a30b      	add	r3, pc, #44	; (adr r3, 8009f70 <__kernel_sin+0x148>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	4606      	mov	r6, r0
 8009f4a:	460f      	mov	r7, r1
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 fb5a 	bl	8000608 <__aeabi_dmul>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 f99e 	bl	800029c <__adddf3>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 f996 	bl	8000298 <__aeabi_dsub>
 8009f6c:	e7c4      	b.n	8009ef8 <__kernel_sin+0xd0>
 8009f6e:	bf00      	nop
 8009f70:	55555549 	.word	0x55555549
 8009f74:	3fc55555 	.word	0x3fc55555
 8009f78:	3fe00000 	.word	0x3fe00000
 8009f7c:	5acfd57c 	.word	0x5acfd57c
 8009f80:	3de5d93a 	.word	0x3de5d93a
 8009f84:	8a2b9ceb 	.word	0x8a2b9ceb
 8009f88:	3e5ae5e6 	.word	0x3e5ae5e6
 8009f8c:	57b1fe7d 	.word	0x57b1fe7d
 8009f90:	3ec71de3 	.word	0x3ec71de3
 8009f94:	19c161d5 	.word	0x19c161d5
 8009f98:	3f2a01a0 	.word	0x3f2a01a0
 8009f9c:	1110f8a6 	.word	0x1110f8a6
 8009fa0:	3f811111 	.word	0x3f811111

08009fa4 <fabs>:
 8009fa4:	ec51 0b10 	vmov	r0, r1, d0
 8009fa8:	ee10 2a10 	vmov	r2, s0
 8009fac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fb0:	ec43 2b10 	vmov	d0, r2, r3
 8009fb4:	4770      	bx	lr
	...

08009fb8 <floor>:
 8009fb8:	ec51 0b10 	vmov	r0, r1, d0
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009fc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009fc8:	2e13      	cmp	r6, #19
 8009fca:	ee10 5a10 	vmov	r5, s0
 8009fce:	ee10 8a10 	vmov	r8, s0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	dc32      	bgt.n	800a03c <floor+0x84>
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	da14      	bge.n	800a004 <floor+0x4c>
 8009fda:	a333      	add	r3, pc, #204	; (adr r3, 800a0a8 <floor+0xf0>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f95c 	bl	800029c <__adddf3>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f7f6 fd9e 	bl	8000b28 <__aeabi_dcmpgt>
 8009fec:	b138      	cbz	r0, 8009ffe <floor+0x46>
 8009fee:	2c00      	cmp	r4, #0
 8009ff0:	da57      	bge.n	800a0a2 <floor+0xea>
 8009ff2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009ff6:	431d      	orrs	r5, r3
 8009ff8:	d001      	beq.n	8009ffe <floor+0x46>
 8009ffa:	4c2d      	ldr	r4, [pc, #180]	; (800a0b0 <floor+0xf8>)
 8009ffc:	2500      	movs	r5, #0
 8009ffe:	4621      	mov	r1, r4
 800a000:	4628      	mov	r0, r5
 800a002:	e025      	b.n	800a050 <floor+0x98>
 800a004:	4f2b      	ldr	r7, [pc, #172]	; (800a0b4 <floor+0xfc>)
 800a006:	4137      	asrs	r7, r6
 800a008:	ea01 0307 	and.w	r3, r1, r7
 800a00c:	4303      	orrs	r3, r0
 800a00e:	d01f      	beq.n	800a050 <floor+0x98>
 800a010:	a325      	add	r3, pc, #148	; (adr r3, 800a0a8 <floor+0xf0>)
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f7f6 f941 	bl	800029c <__adddf3>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	f7f6 fd83 	bl	8000b28 <__aeabi_dcmpgt>
 800a022:	2800      	cmp	r0, #0
 800a024:	d0eb      	beq.n	8009ffe <floor+0x46>
 800a026:	2c00      	cmp	r4, #0
 800a028:	bfbe      	ittt	lt
 800a02a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a02e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a032:	19a4      	addlt	r4, r4, r6
 800a034:	ea24 0407 	bic.w	r4, r4, r7
 800a038:	2500      	movs	r5, #0
 800a03a:	e7e0      	b.n	8009ffe <floor+0x46>
 800a03c:	2e33      	cmp	r6, #51	; 0x33
 800a03e:	dd0b      	ble.n	800a058 <floor+0xa0>
 800a040:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a044:	d104      	bne.n	800a050 <floor+0x98>
 800a046:	ee10 2a10 	vmov	r2, s0
 800a04a:	460b      	mov	r3, r1
 800a04c:	f7f6 f926 	bl	800029c <__adddf3>
 800a050:	ec41 0b10 	vmov	d0, r0, r1
 800a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a058:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a05c:	f04f 33ff 	mov.w	r3, #4294967295
 800a060:	fa23 f707 	lsr.w	r7, r3, r7
 800a064:	4207      	tst	r7, r0
 800a066:	d0f3      	beq.n	800a050 <floor+0x98>
 800a068:	a30f      	add	r3, pc, #60	; (adr r3, 800a0a8 <floor+0xf0>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 f915 	bl	800029c <__adddf3>
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	f7f6 fd57 	bl	8000b28 <__aeabi_dcmpgt>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d0bf      	beq.n	8009ffe <floor+0x46>
 800a07e:	2c00      	cmp	r4, #0
 800a080:	da02      	bge.n	800a088 <floor+0xd0>
 800a082:	2e14      	cmp	r6, #20
 800a084:	d103      	bne.n	800a08e <floor+0xd6>
 800a086:	3401      	adds	r4, #1
 800a088:	ea25 0507 	bic.w	r5, r5, r7
 800a08c:	e7b7      	b.n	8009ffe <floor+0x46>
 800a08e:	2301      	movs	r3, #1
 800a090:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a094:	fa03 f606 	lsl.w	r6, r3, r6
 800a098:	4435      	add	r5, r6
 800a09a:	4545      	cmp	r5, r8
 800a09c:	bf38      	it	cc
 800a09e:	18e4      	addcc	r4, r4, r3
 800a0a0:	e7f2      	b.n	800a088 <floor+0xd0>
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	462c      	mov	r4, r5
 800a0a6:	e7aa      	b.n	8009ffe <floor+0x46>
 800a0a8:	8800759c 	.word	0x8800759c
 800a0ac:	7e37e43c 	.word	0x7e37e43c
 800a0b0:	bff00000 	.word	0xbff00000
 800a0b4:	000fffff 	.word	0x000fffff

0800a0b8 <nan>:
 800a0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0c0 <nan+0x8>
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	00000000 	.word	0x00000000
 800a0c4:	7ff80000 	.word	0x7ff80000

0800a0c8 <scalbn>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	ec55 4b10 	vmov	r4, r5, d0
 800a0ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	b99a      	cbnz	r2, 800a100 <scalbn+0x38>
 800a0d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0dc:	4323      	orrs	r3, r4
 800a0de:	d036      	beq.n	800a14e <scalbn+0x86>
 800a0e0:	4b39      	ldr	r3, [pc, #228]	; (800a1c8 <scalbn+0x100>)
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	ee10 0a10 	vmov	r0, s0
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f7f6 fa8d 	bl	8000608 <__aeabi_dmul>
 800a0ee:	4b37      	ldr	r3, [pc, #220]	; (800a1cc <scalbn+0x104>)
 800a0f0:	429e      	cmp	r6, r3
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	da10      	bge.n	800a11a <scalbn+0x52>
 800a0f8:	a32b      	add	r3, pc, #172	; (adr r3, 800a1a8 <scalbn+0xe0>)
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	e03a      	b.n	800a176 <scalbn+0xae>
 800a100:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a104:	428a      	cmp	r2, r1
 800a106:	d10c      	bne.n	800a122 <scalbn+0x5a>
 800a108:	ee10 2a10 	vmov	r2, s0
 800a10c:	4620      	mov	r0, r4
 800a10e:	4629      	mov	r1, r5
 800a110:	f7f6 f8c4 	bl	800029c <__adddf3>
 800a114:	4604      	mov	r4, r0
 800a116:	460d      	mov	r5, r1
 800a118:	e019      	b.n	800a14e <scalbn+0x86>
 800a11a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a11e:	460b      	mov	r3, r1
 800a120:	3a36      	subs	r2, #54	; 0x36
 800a122:	4432      	add	r2, r6
 800a124:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a128:	428a      	cmp	r2, r1
 800a12a:	dd08      	ble.n	800a13e <scalbn+0x76>
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	a120      	add	r1, pc, #128	; (adr r1, 800a1b0 <scalbn+0xe8>)
 800a130:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a134:	da1c      	bge.n	800a170 <scalbn+0xa8>
 800a136:	a120      	add	r1, pc, #128	; (adr r1, 800a1b8 <scalbn+0xf0>)
 800a138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a13c:	e018      	b.n	800a170 <scalbn+0xa8>
 800a13e:	2a00      	cmp	r2, #0
 800a140:	dd08      	ble.n	800a154 <scalbn+0x8c>
 800a142:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a146:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a14a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a14e:	ec45 4b10 	vmov	d0, r4, r5
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a158:	da19      	bge.n	800a18e <scalbn+0xc6>
 800a15a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a15e:	429e      	cmp	r6, r3
 800a160:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a164:	dd0a      	ble.n	800a17c <scalbn+0xb4>
 800a166:	a112      	add	r1, pc, #72	; (adr r1, 800a1b0 <scalbn+0xe8>)
 800a168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e2      	bne.n	800a136 <scalbn+0x6e>
 800a170:	a30f      	add	r3, pc, #60	; (adr r3, 800a1b0 <scalbn+0xe8>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	f7f6 fa47 	bl	8000608 <__aeabi_dmul>
 800a17a:	e7cb      	b.n	800a114 <scalbn+0x4c>
 800a17c:	a10a      	add	r1, pc, #40	; (adr r1, 800a1a8 <scalbn+0xe0>)
 800a17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0b8      	beq.n	800a0f8 <scalbn+0x30>
 800a186:	a10e      	add	r1, pc, #56	; (adr r1, 800a1c0 <scalbn+0xf8>)
 800a188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a18c:	e7b4      	b.n	800a0f8 <scalbn+0x30>
 800a18e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a192:	3236      	adds	r2, #54	; 0x36
 800a194:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a198:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a19c:	4620      	mov	r0, r4
 800a19e:	4b0c      	ldr	r3, [pc, #48]	; (800a1d0 <scalbn+0x108>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	e7e8      	b.n	800a176 <scalbn+0xae>
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	c2f8f359 	.word	0xc2f8f359
 800a1ac:	01a56e1f 	.word	0x01a56e1f
 800a1b0:	8800759c 	.word	0x8800759c
 800a1b4:	7e37e43c 	.word	0x7e37e43c
 800a1b8:	8800759c 	.word	0x8800759c
 800a1bc:	fe37e43c 	.word	0xfe37e43c
 800a1c0:	c2f8f359 	.word	0xc2f8f359
 800a1c4:	81a56e1f 	.word	0x81a56e1f
 800a1c8:	43500000 	.word	0x43500000
 800a1cc:	ffff3cb0 	.word	0xffff3cb0
 800a1d0:	3c900000 	.word	0x3c900000

0800a1d4 <_init>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	bf00      	nop
 800a1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1da:	bc08      	pop	{r3}
 800a1dc:	469e      	mov	lr, r3
 800a1de:	4770      	bx	lr

0800a1e0 <_fini>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	bf00      	nop
 800a1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e6:	bc08      	pop	{r3}
 800a1e8:	469e      	mov	lr, r3
 800a1ea:	4770      	bx	lr
